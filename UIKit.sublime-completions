{
"scope": "source.swift",
"completions":
 [ 
{ "trigger": "drawAtPoint \t func UIImage -> void" , "contents": "drawAtPoint(${1:CGPoint}, blendMode:${2:CGBlendMode}, alpha:${3:CGFloat})" },{ "trigger": "invalidationContextForBoundsChange \t func UICollectionViewLayout -> UICollectionViewLayoutInvalidationContext
" , "contents": "invalidationContextForBoundsChange(${1:CGRect})" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldDeselectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "setImage \t func UIButton -> void" , "contents": "setImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "removeItem \t func UIGravityBehavior -> void" , "contents": "removeItem(${1:UIDynamicItem})" },{ "trigger": "beginFloatingCursorAtPoint \t func UITextField -> void" , "contents": "beginFloatingCursorAtPoint(${1:CGPoint})" },{ "trigger": "unmarkText \t func UITextView -> void" , "contents": "unmarkText(${1:})" },{ "trigger": "tableView \t func UITableViewController -> CGFloat
" , "contents": "tableView(${1:UITableView}, heightForHeaderInSection:${2:Int})" },{ "trigger": "willAnimateFirstHalfOfRotationToInterfaceOrientation \t func UIViewController -> void" , "contents": "willAnimateFirstHalfOfRotationToInterfaceOrientation(${1:UIInterfaceOrientation}, duration:${2:NSTimeInterval})" },{ "trigger": "borderRectForBounds \t func UITextField -> CGRect
" , "contents": "borderRectForBounds(${1:CGRect})" },{ "trigger": "insertSections \t func UICollectionView -> void" , "contents": "insertSections(${1:NSIndexSet})" },{ "trigger": "offsetFromPosition \t func unknown -> Int
" , "contents": "offsetFromPosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "constraintLessThanOrEqualToAnchor \t func NSLayoutAnchor -> NSLayoutConstraint!
" , "contents": "constraintLessThanOrEqualToAnchor(${1:NSLayoutAnchor!}, constant:${2:CGFloat})" },{ "trigger": "copyWithZone \t func UIBezierPath -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "containsPoint \t func UIRegion -> BOOL
" , "contents": "containsPoint(${1:CGPoint})" },{ "trigger": "rangeOfNominallySpacedGlyphsContainingIndex \t func NSLayoutManager -> NSRange
" , "contents": "rangeOfNominallySpacedGlyphsContainingIndex(${1:Int})" },{ "trigger": "setMarkedText \t func UITextField -> void" , "contents": "setMarkedText(${1:String?}, selectedRange:${2:NSRange})" },{ "trigger": "isBeingPresented \t func UIViewController -> BOOL
" , "contents": "isBeingPresented(${1:})" },{ "trigger": "layoutIfNeeded \t func UIView -> void" , "contents": "layoutIfNeeded(${1:})" },{ "trigger": "indexPathForItemAtPoint \t func UICollectionView -> NSIndexPath?
" , "contents": "indexPathForItemAtPoint(${1:CGPoint})" },{ "trigger": "UIFloatRangeIsInfinite \t func UIFocusAnimationCoordinator -> BOOL
" , "contents": "UIFloatRangeIsInfinite(${1:UIFloatRange})" },{ "trigger": "scrollViewDidEndDragging \t func unknown -> void" , "contents": "scrollViewDidEndDragging(${1:UIScrollView}, willDecelerate:${2:BOOL})" },{ "trigger": "UIGraphicsGetPDFContextBounds \t func UIGravityBehavior -> CGRect
" , "contents": "UIGraphicsGetPDFContextBounds(${1:})" },{ "trigger": "collectionView \t func UICollectionViewController -> UICollectionReusableView
" , "contents": "collectionView(${1:UICollectionView}, viewForSupplementaryElementOfKind:${2:String}, atIndexPath:${3:NSIndexPath})" },{ "trigger": "presentOptionsMenuFromBarButtonItem \t func UIDocumentInteractionController -> BOOL
" , "contents": "presentOptionsMenuFromBarButtonItem(${1:UIBarButtonItem}, animated:${2:BOOL})" },{ "trigger": "setTitleColor \t func UIButton -> void" , "contents": "setTitleColor(${1:UIColor?}, forState:${2:UIControlState})" },{ "trigger": "removeConstraint \t func UIView -> void" , "contents": "removeConstraint(${1:NSLayoutConstraint})" },{ "trigger": "mutableCopyWithZone \t func NSParagraphStyle -> AnyObject
" , "contents": "mutableCopyWithZone(${1:NSZone})" },{ "trigger": "removeAllPoints \t func UIBezierPath -> void" , "contents": "removeAllPoints(${1:})" },{ "trigger": "cellForItemAtIndexPath \t func UICollectionView -> UICollectionViewCell?
" , "contents": "cellForItemAtIndexPath(${1:NSIndexPath})" },{ "trigger": "setBackButtonTitlePositionAdjustment \t func UIBarButtonItem -> void" , "contents": "setBackButtonTitlePositionAdjustment(${1:UIOffset}, forBarMetrics:${2:UIBarMetrics})" },{ "trigger": "presentationController \t func unknown -> void" , "contents": "presentationController(${1:UIPresentationController}, willPresentWithAdaptiveStyle:${2:UIModalPresentationStyle}, transitionCoordinator:${3:UIViewControllerTransitionCoordinator?})" },{ "trigger": "isDescendantOfView \t func UIView -> BOOL
" , "contents": "isDescendantOfView(${1:UIView})" },{ "trigger": "invalidationContextForInteractivelyMovingItems \t func UICollectionViewLayout -> UICollectionViewLayoutInvalidationContext
" , "contents": "invalidationContextForInteractivelyMovingItems(${1:[NSIndexPath]}, withTargetPosition:${2:CGPoint}, previousIndexPaths:${3:[NSIndexPath]}, previousPosition:${4:CGPoint})" },{ "trigger": "didUpdateFocusInContext \t func UIPresentationController -> void" , "contents": "didUpdateFocusInContext(${1:UIFocusUpdateContext}, withAnimationCoordinator:${2:UIFocusAnimationCoordinator})" },{ "trigger": "copyWithZone \t func UIAlertAction -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "UIGraphicsBeginPDFContextToData \t func UIGravityBehavior -> void" , "contents": "UIGraphicsBeginPDFContextToData(${1:NSMutableData}, _:${2:CGRect}, _:${3:[NSObject })" },{ "trigger": "UIRectClip \t func UIRectCorner -> void" , "contents": "UIRectClip(${1:CGRect})" },{ "trigger": "scrollViewDidScroll \t func UITableViewController -> void" , "contents": "scrollViewDidScroll(${1:UIScrollView})" },{ "trigger": "textDidChange \t func UIInputViewController -> void" , "contents": "textDidChange(${1:UITextInput?})" },{ "trigger": "removeTabStop \t func NSMutableParagraphStyle -> void" , "contents": "removeTabStop(${1:NSTextTab})" },{ "trigger": "ensureLayoutForTextContainer \t func NSLayoutManager -> void" , "contents": "ensureLayoutForTextContainer(${1:NSTextContainer})" },{ "trigger": "performAsynchronousFileAccessUsingBlock \t func UIDocument -> Void
" , "contents": "performAsynchronousFileAccessUsingBlock(${1: -> Void})" },{ "trigger": "readFromURL \t func NSMutableAttributedString -> void" , "contents": "readFromURL(${1:NSURL}, options:${2:[String }, documentAttributes:${3:AutoreleasingUnsafeMutablePointer<NSDictionary?>})" },{ "trigger": "traitCollectionDidChange \t func UIPresentationController -> void" , "contents": "traitCollectionDidChange(${1:UITraitCollection?})" },{ "trigger": "tabBar \t func UITabBarController -> void" , "contents": "tabBar(${1:UITabBar}, willEndCustomizingItems:${2:[UITabBarItem]}, changed:${3:BOOL})" },{ "trigger": "reloadData \t func UITableView -> void" , "contents": "reloadData(${1:})" },{ "trigger": "registerNib \t func UICollectionViewLayout -> void" , "contents": "registerNib(${1:UINib?}, forDecorationViewOfKind:${2:String})" },{ "trigger": "presentFromRect \t func UIPrinterPickerController -> BOOL
" , "contents": "presentFromRect(${1:CGRect}, inView:${2:UIView}, animated:${3:BOOL}, completionHandler:${4:UIPrinterPickerCompletionHandler?})" },{ "trigger": "pressesEnded \t func UIResponder -> void" , "contents": "pressesEnded(${1:Set<UIPress>}, withEvent:${2:UIPressesEvent?})" },{ "trigger": "tabBarController \t func unknown -> BOOL
" , "contents": "tabBarController(${1:UITabBarController}, shouldSelectViewController:${2:UIViewController})" },{ "trigger": "tableView \t func UITableViewController -> UIView?
" , "contents": "tableView(${1:UITableView}, viewForHeaderInSection:${2:Int})" },{ "trigger": "viewPrintFormatter \t func UIView -> UIViewPrintFormatter
" , "contents": "viewPrintFormatter(${1:})" },{ "trigger": "drawInRect \t func NSString -> void" , "contents": "drawInRect(${1:CGRect}, withAttributes:${2:[String })" },{ "trigger": "matchingFontDescriptorsWithMandatoryKeys \t func UIFontDescriptor -> [UIFontDescriptor]
" , "contents": "matchingFontDescriptorsWithMandatoryKeys(${1:Set<String>?})" },{ "trigger": "splitViewController \t func unknown -> BOOL
" , "contents": "splitViewController(${1:UISplitViewController}, collapseSecondaryViewController:${2:UIViewController}, ontoPrimaryViewController:${3:UIViewController})" },{ "trigger": "footerViewForSection \t func UITableView -> UITableViewHeaderFooterView?
" , "contents": "footerViewForSection(${1:Int})" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, handleActionWithIdentifier:${2:String?}, forLocalNotification:${3:UILocalNotification}, withResponseInfo:${4:[NSObject }, completionHandler:${5: -> Void})" },{ "trigger": "presentOptionsMenuFromRect \t func UIDocumentInteractionController -> BOOL
" , "contents": "presentOptionsMenuFromRect(${1:CGRect}, inView:${2:UIView}, animated:${3:BOOL})" },{ "trigger": "setFinishedSelectedImage \t func UITabBarItem -> void" , "contents": "setFinishedSelectedImage(${1:UIImage?}, withFinishedUnselectedImage:${2:UIImage?})" },{ "trigger": "writeContents \t func UIDocument -> void" , "contents": "writeContents(${1:AnyObject}, andAttributes:${2:[NSObject }, safelyToURL:${3:NSURL}, forSaveOperation:${4:UIDocumentSaveOperation})" },{ "trigger": "touchesEstimatedPropertiesUpdated \t func UIResponder -> void" , "contents": "touchesEstimatedPropertiesUpdated(${1:Set<NSObject>})" },{ "trigger": "tableView \t func UIPickerView -> void" , "contents": "tableView(${1:UITableView}, commitEditingStyle:${2:UITableViewCellEditingStyle}, forRowAtIndexPath:${3:NSIndexPath})" },{ "trigger": "popoverPresentationControllerShouldDismissPopover \t func unknown -> BOOL
" , "contents": "popoverPresentationControllerShouldDismissPopover(${1:UIPopoverPresentationController})" },{ "trigger": "tableView \t func UITableViewController -> BOOL
" , "contents": "tableView(${1:UITableView}, canMoveRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "textRangeFromPosition \t func UITextView -> UITextRange?
" , "contents": "textRangeFromPosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "fileNameExtensionForType \t func UIDocument -> String
" , "contents": "fileNameExtensionForType(${1:String?}, saveOperation:${2:UIDocumentSaveOperation})" },{ "trigger": "convertPoint \t func UIWindow -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, toWindow:${2:UIWindow?})" },{ "trigger": "encodeWithCoder \t func UIViewController -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "willAnimateRotationToInterfaceOrientation \t func UIViewController -> void" , "contents": "willAnimateRotationToInterfaceOrientation(${1:UIInterfaceOrientation}, duration:${2:NSTimeInterval})" },{ "trigger": "itemChangedAtURL \t func NSFileProviderExtension -> void" , "contents": "itemChangedAtURL(${1:NSURL})" },{ "trigger": "locationOfTouch \t func UIGestureRecognizer -> CGPoint
" , "contents": "locationOfTouch(${1:Int}, inView:${2:UIView?})" },{ "trigger": "traitCollectionDidChange \t func UIView -> void" , "contents": "traitCollectionDidChange(${1:UITraitCollection?})" },{ "trigger": "cancelInteractiveTransition \t func UICollectionView -> void" , "contents": "cancelInteractiveTransition(${1:})" },{ "trigger": "textFieldShouldReturn \t func unknown -> BOOL
" , "contents": "textFieldShouldReturn(${1:UITextField})" },{ "trigger": "scrollViewDidScrollToTop \t func unknown -> void" , "contents": "scrollViewDidScrollToTop(${1:UIScrollView})" },{ "trigger": "presentationCountForPageViewController \t func unknown -> Int
" , "contents": "presentationCountForPageViewController(${1:UIPageViewController})" },{ "trigger": "setData \t func UIPasteboard -> void" , "contents": "setData(${1:NSData}, forPasteboardType:${2:String})" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldShowMenuForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "elapsedTime \t func UIDynamicAnimator -> NSTimeInterval
" , "contents": "elapsedTime(${1:})" },{ "trigger": "constraintGreaterThanOrEqualToAnchor \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintGreaterThanOrEqualToAnchor(${1:NSLayoutDimension!}, multiplier:${2:CGFloat})" },{ "trigger": "copyWithZone \t func UIMotionEffect -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "cancelTrackingWithEvent \t func UIControl -> void" , "contents": "cancelTrackingWithEvent(${1:UIEvent?})" },{ "trigger": "setEditing \t func UITableViewCell -> void" , "contents": "setEditing(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "mutableCopyWithZone \t func UIUserNotificationAction -> AnyObject
" , "contents": "mutableCopyWithZone(${1:NSZone})" },{ "trigger": "drawViewHierarchyInRect \t func UIView -> BOOL
" , "contents": "drawViewHierarchyInRect(${1:CGRect}, afterScreenUpdates:${2:BOOL})" },{ "trigger": "endReceivingRemoteControlEvents \t func UIApplication -> void" , "contents": "endReceivingRemoteControlEvents(${1:})" },{ "trigger": "viewWithTag \t func UIView -> UIView?
" , "contents": "viewWithTag(${1:Int})" },{ "trigger": "segueForUnwindingToViewController \t func UIViewController -> UIStoryboardSegue?
" , "contents": "segueForUnwindingToViewController(${1:UIViewController}, fromViewController:${2:UIViewController}, identifier:${3:String?})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, willDisplayFooterView:${2:UIView}, forSection:${3:Int})" },{ "trigger": "textView \t func unknown -> BOOL
" , "contents": "textView(${1:UITextView}, shouldChangeTextInRange:${2:NSRange}, replacementText:${3:String})" },{ "trigger": "addAngularVelocity \t func UIDynamicItemBehavior -> void" , "contents": "addAngularVelocity(${1:CGFloat}, forItem:${2:UIDynamicItem})" },{ "trigger": "UIEdgeInsetsFromString \t func UIEvent -> UIEdgeInsets
" , "contents": "UIEdgeInsetsFromString(${1:String})" },{ "trigger": "presentedItemDidResolveConflictVersion \t func UIDocument -> void" , "contents": "presentedItemDidResolveConflictVersion(${1:NSFileVersion})" },{ "trigger": "positionFromPosition \t func UITextView -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, offset:${2:Int})" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, handleActionWithIdentifier:${2:String?}, forRemoteNotification:${3:[NSObject }, completionHandler:${4: -> Void})" },{ "trigger": "addArrangedSubview \t func UIStackView -> void" , "contents": "addArrangedSubview(${1:UIView})" },{ "trigger": "drawInRect \t func UIPrintFormatter -> void" , "contents": "drawInRect(${1:CGRect}, forPageAtIndex:${2:Int})" },{ "trigger": "collectionView \t func unknown -> UIEdgeInsets
" , "contents": "collectionView(${1:UICollectionView}, layout:${2:UICollectionViewLayout}, insetForSectionAtIndex:${3:Int})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, commitEditingStyle:${2:UITableViewCellEditingStyle}, forRowAtIndexPath:${3:NSIndexPath})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didUnhighlightRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "setContentOffset \t func UISegmentedControl -> void" , "contents": "setContentOffset(${1:CGSize}, forSegmentAtIndex:${2:Int})" },{ "trigger": "didAddSubview \t func UIView -> void" , "contents": "didAddSubview(${1:UIView})" },{ "trigger": "collectionView \t func unknown -> CGSize
" , "contents": "collectionView(${1:UICollectionView}, layout:${2:UICollectionViewLayout}, referenceSizeForHeaderInSection:${3:Int})" },{ "trigger": "reloadInputViews \t func UIResponder -> void" , "contents": "reloadInputViews(${1:})" },{ "trigger": "glyphRangeForBoundingRect \t func NSLayoutManager -> NSRange
" , "contents": "glyphRangeForBoundingRect(${1:CGRect}, inTextContainer:${2:NSTextContainer})" },{ "trigger": "activityType \t func UIActivity -> String?
" , "contents": "activityType(${1:})" },{ "trigger": "updateFloatingCursorAtPoint \t func UITextView -> void" , "contents": "updateFloatingCursorAtPoint(${1:CGPoint})" },{ "trigger": "copyWithZone \t func UIVisualEffect -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "glyphIndexForPoint \t func NSLayoutManager -> Int
" , "contents": "glyphIndexForPoint(${1:CGPoint}, inTextContainer:${2:NSTextContainer})" },{ "trigger": "instantiateViewControllerWithIdentifier \t func UIStoryboard -> UIViewController
" , "contents": "instantiateViewControllerWithIdentifier(${1:String})" },{ "trigger": "UIRectFrame \t func UIReferenceLibraryViewController -> void" , "contents": "UIRectFrame(${1:CGRect})" },{ "trigger": "splitViewController \t func unknown -> BOOL
" , "contents": "splitViewController(${1:UISplitViewController}, showViewController:${2:UIViewController}, sender:${3:AnyObject?})" },{ "trigger": "dismissModalViewControllerAnimated \t func UIViewController -> void" , "contents": "dismissModalViewControllerAnimated(${1:BOOL})" },{ "trigger": "backgroundImageForBarMetrics \t func UINavigationBar -> UIImage?
" , "contents": "backgroundImageForBarMetrics(${1:UIBarMetrics})" },{ "trigger": "animateTransition \t func UISearchController -> void" , "contents": "animateTransition(${1:UIViewControllerContextTransitioning})" },{ "trigger": "imageForSegmentAtIndex \t func UISegmentedControl -> UIImage?
" , "contents": "imageForSegmentAtIndex(${1:Int})" },{ "trigger": "rowSizeForComponent \t func UIPickerView -> CGSize
" , "contents": "rowSizeForComponent(${1:Int})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, willEncodeRestorableStateWithCoder:${2:NSCoder})" },{ "trigger": "becomeKeyWindow \t func UIWindow -> void" , "contents": "becomeKeyWindow(${1:})" },{ "trigger": "accessibilityPerformMagicTap \t func NSObject -> BOOL
" , "contents": "accessibilityPerformMagicTap(${1:})" },{ "trigger": "presentationControllerForPresentedViewController \t func UISearchController -> UIPresentationController?
" , "contents": "presentationControllerForPresentedViewController(${1:UIViewController}, presentingViewController:${2:UIViewController}, sourceViewController:${3:UIViewController})" },{ "trigger": "selectionRectsForRange \t func unknown -> [AnyObject]
" , "contents": "selectionRectsForRange(${1:UITextRange})" },{ "trigger": "indexPathForPreferredFocusedViewInCollectionView \t func unknown -> NSIndexPath?
" , "contents": "indexPathForPreferredFocusedViewInCollectionView(${1:UICollectionView})" },{ "trigger": "showDetailViewController \t func UISplitViewController -> void" , "contents": "showDetailViewController(${1:UIViewController}, sender:${2:AnyObject?})" },{ "trigger": "removeDictationResultPlaceholder \t func UITextView -> void" , "contents": "removeDictationResultPlaceholder(${1:AnyObject}, willInsertResult:${2:BOOL})" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, didSelectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "printerPickerControllerDidSelectPrinter \t func unknown -> void" , "contents": "printerPickerControllerDidSelectPrinter(${1:UIPrinterPickerController})" },{ "trigger": "presentPopoverFromBarButtonItem \t func UIPopoverController -> void" , "contents": "presentPopoverFromBarButtonItem(${1:UIBarButtonItem}, permittedArrowDirections:${2:UIPopoverArrowDirection}, animated:${3:BOOL})" },{ "trigger": "setDividerImage \t func UISegmentedControl -> void" , "contents": "setDividerImage(${1:UIImage?}, forLeftSegmentState:${2:UIControlState}, rightSegmentState:${3:UIControlState}, barMetrics:${4:UIBarMetrics})" },{ "trigger": "activityViewControllerPlaceholderItem \t func UIActivityItemProvider -> AnyObject
" , "contents": "activityViewControllerPlaceholderItem(${1:UIActivityViewController})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didDecodeRestorableStateWithCoder:${2:NSCoder})" },{ "trigger": "presentLocalNotificationNow \t func UIApplication -> void" , "contents": "presentLocalNotificationNow(${1:UILocalNotification})" },{ "trigger": "scopeBarButtonDividerImageForLeftSegmentState \t func UISearchBar -> UIImage?
" , "contents": "scopeBarButtonDividerImageForLeftSegmentState(${1:UIControlState}, rightSegmentState:${2:UIControlState})" },{ "trigger": "encodeCGAffineTransform \t func NSCoder -> void" , "contents": "encodeCGAffineTransform(${1:CGAffineTransform}, forKey:${2:String})" },{ "trigger": "offsetFromPosition \t func UITextView -> Int
" , "contents": "offsetFromPosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "convertPoint \t func UIView -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, fromView:${2:UIView?})" },{ "trigger": "resizableImageWithCapInsets \t func UIImage -> UIImage
" , "contents": "resizableImageWithCapInsets(${1:UIEdgeInsets})" },{ "trigger": "applyTransform \t func UIBezierPath -> void" , "contents": "applyTransform(${1:CGAffineTransform})" },{ "trigger": "addBoundaryWithIdentifier \t func UICollisionBehavior -> void" , "contents": "addBoundaryWithIdentifier(${1:NSCopying}, fromPoint:${2:CGPoint}, toPoint:${3:CGPoint})" },{ "trigger": "becomeFirstResponder \t func UIResponder -> BOOL
" , "contents": "becomeFirstResponder(${1:})" },{ "trigger": "collisionBehavior \t func unknown -> void" , "contents": "collisionBehavior(${1:UICollisionBehavior}, endedContactForItem:${2:UIDynamicItem}, withBoundaryIdentifier:${3:NSCopying?})" },{ "trigger": "sizeForChildContentContainer \t func unknown -> CGSize
" , "contents": "sizeForChildContentContainer(${1:UIContentContainer}, withParentContainerSize:${2:CGSize})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didEndDisplayingFooterView:${2:UIView}, forSection:${3:Int})" },{ "trigger": "bezierPathByReversingPath \t func UIBezierPath -> UIBezierPath
" , "contents": "bezierPathByReversingPath(${1:})" },{ "trigger": "rectForPageAtIndex \t func UIPrintFormatter -> CGRect
" , "contents": "rectForPageAtIndex(${1:Int})" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldShowMenuForItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "containerViewWillLayoutSubviews \t func UIPresentationController -> void" , "contents": "containerViewWillLayoutSubviews(${1:})" },{ "trigger": "insertSubview \t func UIView -> void" , "contents": "insertSubview(${1:UIView}, atIndex:${2:Int})" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, handleEventsForBackgroundURLSession:${2:String}, completionHandler:${3: -> Void})" },{ "trigger": "popoverPresentationControllerDidDismissPopover \t func unknown -> void" , "contents": "popoverPresentationControllerDidDismissPopover(${1:UIPopoverPresentationController})" },{ "trigger": "strokeWithBlendMode \t func UIBezierPath -> void" , "contents": "strokeWithBlendMode(${1:CGBlendMode}, alpha:${2:CGFloat})" },{ "trigger": "copyWithZone \t func UIUserNotificationCategory -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "isBeingDismissed \t func UIViewController -> BOOL
" , "contents": "isBeingDismissed(${1:})" },{ "trigger": "setEditing \t func UIViewController -> void" , "contents": "setEditing(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "copyWithZone \t func NSShadow -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "splitViewController \t func unknown -> BOOL
" , "contents": "splitViewController(${1:UISplitViewController}, showDetailViewController:${2:UIViewController}, sender:${3:AnyObject?})" },{ "trigger": "setParagraphStyle \t func NSMutableParagraphStyle -> void" , "contents": "setParagraphStyle(${1:NSParagraphStyle})" },{ "trigger": "isPosition \t func unknown -> BOOL
" , "contents": "isPosition(${1:UITextPosition}, withinTextUnit:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "drawUnderlineForGlyphRange \t func NSLayoutManager -> void" , "contents": "drawUnderlineForGlyphRange(${1:NSRange}, underlineType:${2:NSUnderlineStyle}, baselineOffset:${3:CGFloat}, lineFragmentRect:${4:CGRect}, lineFragmentGlyphRange:${5:NSRange}, containerOrigin:${6:CGPoint})" },{ "trigger": "drawHeaderForPageAtIndex \t func UIPrintPageRenderer -> void" , "contents": "drawHeaderForPageAtIndex(${1:Int}, inRect:${2:CGRect})" },{ "trigger": "deleteSections \t func UICollectionView -> void" , "contents": "deleteSections(${1:NSIndexSet})" },{ "trigger": "sectionForObject \t func UILocalizedIndexedCollation -> Int
" , "contents": "sectionForObject(${1:AnyObject}, collationStringSelector:${2:Selector})" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldUpdateFocusInContext:${2:UITableViewFocusUpdateContext})" },{ "trigger": "tableView \t func UITableViewController -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldUpdateFocusInContext:${2:UITableViewFocusUpdateContext})" },{ "trigger": "encodeWithCoder \t func UINavigationItem -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "setBackgroundImage \t func UINavigationBar -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forBarMetrics:${2:UIBarMetrics})" },{ "trigger": "applicationDidBecomeActive \t func unknown -> void" , "contents": "applicationDidBecomeActive(${1:UIApplication})" },{ "trigger": "shouldUpdateFocusInContext \t func UIPresentationController -> BOOL
" , "contents": "shouldUpdateFocusInContext(${1:UIFocusUpdateContext})" },{ "trigger": "setGlyphs \t func NSLayoutManager -> void" , "contents": "setGlyphs(${1:UnsafePointer<CGGlyph>}, properties:${2:UnsafePointer<NSGlyphProperty>}, characterIndexes:${3:UnsafePointer<Int>}, font:${4:UIFont}, forGlyphRange:${5:NSRange})" },{ "trigger": "tableView \t func UITableViewController -> [UITableViewRowAction]?
" , "contents": "tableView(${1:UITableView}, editActionsForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "presentationControllerForPresentedViewController \t func unknown -> UIPresentationController?
" , "contents": "presentationControllerForPresentedViewController(${1:UIViewController}, presentingViewController:${2:UIViewController}, sourceViewController:${3:UIViewController})" },{ "trigger": "UIGraphicsGetCurrentContext \t func UIGravityBehavior -> CGContext?
" , "contents": "UIGraphicsGetCurrentContext(${1:})" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, willDisplayCell:${2:UICollectionViewCell}, forItemAtIndexPath:${3:NSIndexPath})" },{ "trigger": "finishedSelectedImage \t func UITabBarItem -> UIImage?
" , "contents": "finishedSelectedImage(${1:})" },{ "trigger": "minimumValueImageRectForBounds \t func UISlider -> CGRect
" , "contents": "minimumValueImageRectForBounds(${1:CGRect})" },{ "trigger": "setNeedsUpdateConstraints \t func UIView -> void" , "contents": "setNeedsUpdateConstraints(${1:})" },{ "trigger": "encodeWithCoder \t func UIPrintInfo -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "touchesForWindow \t func UIEvent -> Set UITouch ?
" , "contents": "touchesForWindow(${1:UIWindow})" },{ "trigger": "widthForSegmentAtIndex \t func UISegmentedControl -> CGFloat
" , "contents": "widthForSegmentAtIndex(${1:Int})" },{ "trigger": "dismissAnimated \t func UIPrintInteractionController -> void" , "contents": "dismissAnimated(${1:BOOL})" },{ "trigger": "decodeUIEdgeInsetsForKey \t func NSCoder -> UIEdgeInsets
" , "contents": "decodeUIEdgeInsetsForKey(${1:String})" },{ "trigger": "sizeWithFont \t func NSString -> CGSize
" , "contents": "sizeWithFont(${1:UIFont!}, minFontSize:${2:CGFloat}, actualFontSize:${3:UnsafeMutablePointer<CGFloat>}, forWidth:${4:CGFloat}, lineBreakMode:${5:NSLineBreakMode})" },{ "trigger": "tableView \t func UIPickerView -> String?
" , "contents": "tableView(${1:UITableView}, titleForFooterInSection:${2:Int})" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, performAction:${2:Selector}, forItemAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "navigationBar \t func unknown -> void" , "contents": "navigationBar(${1:UINavigationBar}, didPushItem:${2:UINavigationItem})" },{ "trigger": "isMovingToParentViewController \t func UIViewController -> BOOL
" , "contents": "isMovingToParentViewController(${1:})" },{ "trigger": "boundingRectWithSize \t func NSString -> CGRect
" , "contents": "boundingRectWithSize(${1:CGSize}, options:${2:NSStringDrawingOptions}, attributes:${3:[String }, context:${4:NSStringDrawingContext?})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didEndDisplayingCell:${2:UITableViewCell}, forRowAtIndexPath:${3:NSIndexPath})" },{ "trigger": "pickerView \t func unknown -> Int
" , "contents": "pickerView(${1:UIPickerView}, numberOfRowsInComponent:${2:Int})" },{ "trigger": "documentInteractionController \t func unknown -> BOOL
" , "contents": "documentInteractionController(${1:UIDocumentInteractionController}, canPerformAction:${2:Selector})" },{ "trigger": "presentedItemDidChange \t func UIDocument -> void" , "contents": "presentedItemDidChange(${1:})" },{ "trigger": "UIGraphicsPushContext \t func UIGravityBehavior -> void" , "contents": "UIGraphicsPushContext(${1:CGContext})" },{ "trigger": "setPopoverContentSize \t func UIPopoverController -> void" , "contents": "setPopoverContentSize(${1:CGSize}, animated:${2:BOOL})" },{ "trigger": "makeTextWritingDirectionLeftToRight \t func NSObject -> void" , "contents": "makeTextWritingDirectionLeftToRight(${1:AnyObject?})" },{ "trigger": "clearKeepAliveTimeout \t func UIApplication -> void" , "contents": "clearKeepAliveTimeout(${1:})" },{ "trigger": "decodeUIOffsetForKey \t func NSCoder -> UIOffset
" , "contents": "decodeUIOffsetForKey(${1:String})" },{ "trigger": "constraintGreaterThanOrEqualToAnchor \t func NSLayoutAnchor -> NSLayoutConstraint!
" , "contents": "constraintGreaterThanOrEqualToAnchor(${1:NSLayoutAnchor!})" },{ "trigger": "contentsForType \t func UIDocument -> AnyObject
" , "contents": "contentsForType(${1:String})" },{ "trigger": "scrollViewWillBeginDragging \t func UICollectionViewController -> void" , "contents": "scrollViewWillBeginDragging(${1:UIScrollView})" },{ "trigger": "setToolbarHidden \t func UINavigationController -> void" , "contents": "setToolbarHidden(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "textViewDidChange \t func unknown -> void" , "contents": "textViewDidChange(${1:UITextView})" },{ "trigger": "accessibilityScrollStatusForScrollView \t func unknown -> String?
" , "contents": "accessibilityScrollStatusForScrollView(${1:UIScrollView})" },{ "trigger": "displayLinkWithTarget \t func UIScreen -> CADisplayLink?
" , "contents": "displayLinkWithTarget(${1:AnyObject}, selector:${2:Selector})" },{ "trigger": "collisionBehavior \t func unknown -> void" , "contents": "collisionBehavior(${1:UICollisionBehavior}, beganContactForItem:${2:UIDynamicItem}, withBoundaryIdentifier:${3:NSCopying?}, atPoint:${4:CGPoint})" },{ "trigger": "pageViewController \t func unknown -> void" , "contents": "pageViewController(${1:UIPageViewController}, didFinishAnimating:${2:BOOL}, previousViewControllers:${3:[UIViewController]}, transitionCompleted:${4:BOOL})" },{ "trigger": "printInteractionController \t func unknown -> CGFloat
" , "contents": "printInteractionController(${1:UIPrintInteractionController}, cutLengthForPaper:${2:UIPrintPaper})" },{ "trigger": "registerNib \t func UICollectionView -> void" , "contents": "registerNib(${1:UINib?}, forCellWithReuseIdentifier:${2:String})" },{ "trigger": "fileAttributesToWriteToURL \t func UIDocument -> [NSObject" , "contents": "fileAttributesToWriteToURL(${1:NSURL}, forSaveOperation:${2:UIDocumentSaveOperation})" },{ "trigger": "convertPoint \t func unknown -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, fromCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "copyWithZone \t func UIKeyCommand -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "printerPickerControllerWillDismiss \t func unknown -> void" , "contents": "printerPickerControllerWillDismiss(${1:UIPrinterPickerController})" },{ "trigger": "rectForFooterInSection \t func UITableView -> CGRect
" , "contents": "rectForFooterInSection(${1:Int})" },{ "trigger": "NSStringFromCGVector \t func NSTextAlignment -> String
" , "contents": "NSStringFromCGVector(${1:CGVector})" },{ "trigger": "drawRect \t func UIView -> void" , "contents": "drawRect(${1:CGRect}, forViewPrintFormatter:${2:UIViewPrintFormatter})" },{ "trigger": "NSStringFromCGAffineTransform \t func NSTextAlignment -> String
" , "contents": "NSStringFromCGAffineTransform(${1:CGAffineTransform})" },{ "trigger": "preferredContentSizeDidChangeForChildContentContainer \t func UIPresentationController -> void" , "contents": "preferredContentSizeDidChangeForChildContentContainer(${1:UIContentContainer})" },{ "trigger": "regionByDifferenceFromRegion \t func UIRegion -> Self
" , "contents": "regionByDifferenceFromRegion(${1:UIRegion})" },{ "trigger": "setSearchFieldBackgroundImage \t func UISearchBar -> void" , "contents": "setSearchFieldBackgroundImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "displayModeButtonItem \t func UISplitViewController -> UIBarButtonItem
" , "contents": "displayModeButtonItem(${1:})" },{ "trigger": "willMoveToAnimator \t func UIDynamicBehavior -> void" , "contents": "willMoveToAnimator(${1:UIDynamicAnimator?})" },{ "trigger": "textForGuidedAccessRestrictionWithIdentifier \t func unknown -> String?
" , "contents": "textForGuidedAccessRestrictionWithIdentifier(${1:String})" },{ "trigger": "scrollViewDidEndDragging \t func UITableViewController -> void" , "contents": "scrollViewDidEndDragging(${1:UIScrollView}, willDecelerate:${2:BOOL})" },{ "trigger": "gestureRecognizerShouldBegin \t func UITableViewCell -> BOOL
" , "contents": "gestureRecognizerShouldBegin(${1:UIGestureRecognizer})" },{ "trigger": "setLeftBarButtonItems \t func UINavigationItem -> void" , "contents": "setLeftBarButtonItems(${1:[UIBarButtonItem]?}, animated:${2:BOOL})" },{ "trigger": "invalidateSupplementaryElementsOfKind \t func UICollectionViewLayoutInvalidationContext -> void" , "contents": "invalidateSupplementaryElementsOfKind(${1:String}, atIndexPaths:${2:[NSIndexPath]})" },{ "trigger": "tableView \t func UIPickerView -> UITableViewCell
" , "contents": "tableView(${1:UITableView}, cellForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "collectionView \t func unknown -> NSIndexPath
" , "contents": "collectionView(${1:UICollectionView}, targetIndexPathForMoveFromItemAtIndexPath:${2:NSIndexPath}, toProposedIndexPath:${3:NSIndexPath})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, willChangeStatusBarOrientation:${2:UIInterfaceOrientation}, duration:${3:NSTimeInterval})" },{ "trigger": "UIImageWriteToSavedPhotosAlbum \t func UIInputView -> void" , "contents": "UIImageWriteToSavedPhotosAlbum(${1:UIImage}, _:${2:AnyObject?}, _:${3:Selector}, _:${4:UnsafeMutablePointer<Void>})" },{ "trigger": "selectRowAtIndexPath \t func UITableView -> void" , "contents": "selectRowAtIndexPath(${1:NSIndexPath?}, animated:${2:BOOL}, scrollPosition:${3:UITableViewScrollPosition})" },{ "trigger": "drawsOutsideLineFragmentForGlyphAtIndex \t func NSLayoutManager -> BOOL
" , "contents": "drawsOutsideLineFragmentForGlyphAtIndex(${1:Int})" },{ "trigger": "setMenuVisible \t func UIMenuController -> void" , "contents": "setMenuVisible(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "removeSegmentAtIndex \t func UISegmentedControl -> void" , "contents": "removeSegmentAtIndex(${1:Int}, animated:${2:BOOL})" },{ "trigger": "hasText \t func UITextView -> BOOL
" , "contents": "hasText(${1:})" },{ "trigger": "reload \t func UIWebView -> void" , "contents": "reload(${1:})" },{ "trigger": "endIgnoringInteractionEvents \t func UIApplication -> void" , "contents": "endIgnoringInteractionEvents(${1:})" },{ "trigger": "scrollViewWillEndDragging \t func UICollectionViewController -> void" , "contents": "scrollViewWillEndDragging(${1:UIScrollView}, withVelocity:${2:CGPoint}, targetContentOffset:${3:UnsafeMutablePointer<CGPoint>})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didUpdateFocusInContext:${2:UITableViewFocusUpdateContext}, withAnimationCoordinator:${3:UIFocusAnimationCoordinator})" },{ "trigger": "animateTransition \t func unknown -> void" , "contents": "animateTransition(${1:UIViewControllerContextTransitioning})" },{ "trigger": "encodeRestorableStateWithCoder \t func UIView -> void" , "contents": "encodeRestorableStateWithCoder(${1:NSCoder})" },{ "trigger": "firstRectForRange \t func UITextField -> CGRect
" , "contents": "firstRectForRange(${1:UITextRange})" },{ "trigger": "updateInteractiveTransition \t func unknown -> void" , "contents": "updateInteractiveTransition(${1:CGFloat})" },{ "trigger": "savePresentedItemChangesWithCompletionHandler \t func UIDocument -> Void
" , "contents": "savePresentedItemChangesWithCompletionHandler(${1:NSError? -> Void})" },{ "trigger": "layoutAttributesForElementsInRect \t func UICollectionViewLayout -> [UICollectionViewLayoutAttributes]?
" , "contents": "layoutAttributesForElementsInRect(${1:CGRect})" },{ "trigger": "containerViewDidLayoutSubviews \t func UIPresentationController -> void" , "contents": "containerViewDidLayoutSubviews(${1:})" },{ "trigger": "UIAccessibilityIsGrayscaleEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsGrayscaleEnabled(${1:})" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, didUnhighlightItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "childViewControllerContainingSegueSource \t func UIViewController -> UIViewController?
" , "contents": "childViewControllerContainingSegueSource(${1:UIStoryboardUnwindSegueSource})" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, handleOpenURL:${2:NSURL})" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, shouldRestoreApplicationState:${2:NSCoder})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, willDisplayFooterView:${2:UIView}, forSection:${3:Int})" },{ "trigger": "fontWithSize \t func UIFont -> UIFont
" , "contents": "fontWithSize(${1:CGFloat})" },{ "trigger": "UIOffsetEqualToOffset \t func UIPageControl -> BOOL
" , "contents": "UIOffsetEqualToOffset(${1:UIOffset}, _:${2:UIOffset})" },{ "trigger": "updateItemUsingCurrentState \t func UIDynamicAnimator -> void" , "contents": "updateItemUsingCurrentState(${1:UIDynamicItem})" },{ "trigger": "UIAccessibilityIsSwitchControlRunning \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsSwitchControlRunning(${1:})" },{ "trigger": "decodeRestorableStateWithCoder \t func UIView -> void" , "contents": "decodeRestorableStateWithCoder(${1:NSCoder})" },{ "trigger": "setToolbarItems \t func UIViewController -> void" , "contents": "setToolbarItems(${1:[UIBarButtonItem]?}, animated:${2:BOOL})" },{ "trigger": "tableView \t func UIPickerView -> Int
" , "contents": "tableView(${1:UITableView}, numberOfRowsInSection:${2:Int})" },{ "trigger": "imageFlippedForRightToLeftLayoutDirection \t func UIImage -> UIImage
" , "contents": "imageFlippedForRightToLeftLayoutDirection(${1:})" },{ "trigger": "selectedRowInComponent \t func UIPickerView -> Int
" , "contents": "selectedRowInComponent(${1:Int})" },{ "trigger": "guidedAccessRestrictionWithIdentifier \t func unknown -> void" , "contents": "guidedAccessRestrictionWithIdentifier(${1:String}, didChangeState:${2:UIGuidedAccessRestrictionState})" },{ "trigger": "printInteractionControllerDidDismissPrinterOptions \t func unknown -> void" , "contents": "printInteractionControllerDidDismissPrinterOptions(${1:UIPrintInteractionController})" },{ "trigger": "dividerImageForLeftSegmentState \t func UIStepper -> UIImage?
" , "contents": "dividerImageForLeftSegmentState(${1:UIControlState}, rightSegmentState:${2:UIControlState})" },{ "trigger": "appendPath \t func UIBezierPath -> void" , "contents": "appendPath(${1:UIBezierPath})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didSelectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "targetContentOffsetForProposedContentOffset \t func UICollectionViewLayout -> CGPoint
" , "contents": "targetContentOffsetForProposedContentOffset(${1:CGPoint}, withScrollingVelocity:${2:CGPoint})" },{ "trigger": "alertView \t func unknown -> void" , "contents": "alertView(${1:UIAlertView}, willDismissWithButtonIndex:${2:Int})" },{ "trigger": "dataForPasteboardType \t func UIPasteboard -> [AnyObject]?
" , "contents": "dataForPasteboardType(${1:String}, inItemSet:${2:NSIndexSet?})" },{ "trigger": "drawPageAtIndex \t func UIPrintPageRenderer -> void" , "contents": "drawPageAtIndex(${1:Int}, inRect:${2:CGRect})" },{ "trigger": "viewDidDisappear \t func UIViewController -> void" , "contents": "viewDidDisappear(${1:BOOL})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, moveRowAtIndexPath:${2:NSIndexPath}, toIndexPath:${3:NSIndexPath})" },{ "trigger": "velocityInView \t func UIPanGestureRecognizer -> CGPoint
" , "contents": "velocityInView(${1:UIView?})" },{ "trigger": "textField \t func unknown -> BOOL
" , "contents": "textField(${1:UITextField}, shouldChangeCharactersInRange:${2:NSRange}, replacementString:${3:String})" },{ "trigger": "stopAnimating \t func UIImageView -> void" , "contents": "stopAnimating(${1:})" },{ "trigger": "alignmentRectInsets \t func UIView -> UIEdgeInsets
" , "contents": "alignmentRectInsets(${1:})" },{ "trigger": "currentUserNotificationSettings \t func UIApplication -> UIUserNotificationSettings?
" , "contents": "currentUserNotificationSettings(${1:})" },{ "trigger": "applicationDidFinishLaunching \t func unknown -> void" , "contents": "applicationDidFinishLaunching(${1:UIApplication})" },{ "trigger": "UIAccessibilityZoomFocusChanged \t func UIAccessibilityZoomType -> void" , "contents": "UIAccessibilityZoomFocusChanged(${1:UIAccessibilityZoomType}, _:${2:CGRect}, _:${3:UIView})" },{ "trigger": "dictationRecognitionFailed \t func UITextField -> void" , "contents": "dictationRecognitionFailed(${1:})" },{ "trigger": "zoomToRect \t func UIScrollView -> void" , "contents": "zoomToRect(${1:CGRect}, animated:${2:BOOL})" },{ "trigger": "UIAccessibilityIsClosedCaptioningEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsClosedCaptioningEnabled(${1:})" },{ "trigger": "collisionBehavior \t func unknown -> void" , "contents": "collisionBehavior(${1:UICollisionBehavior}, endedContactForItem:${2:UIDynamicItem}, withItem:${3:UIDynamicItem})" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, performActionForShortcutItem:${2:UIApplicationShortcutItem}, completionHandler:${3:BOOL -> Void})" },{ "trigger": "advanceToNextInputMode \t func UIInputViewController -> void" , "contents": "advanceToNextInputMode(${1:})" },{ "trigger": "decrementImageForState \t func UIStepper -> UIImage?
" , "contents": "decrementImageForState(${1:UIControlState})" },{ "trigger": "userInteractionNoLongerPermittedForError \t func UIDocument -> void" , "contents": "userInteractionNoLongerPermittedForError(${1:NSError})" },{ "trigger": "updateInteractiveTransition \t func UIPercentDrivenInteractiveTransition -> void" , "contents": "updateInteractiveTransition(${1:CGFloat})" },{ "trigger": "allControlEvents \t func UIControl -> UIControlEvents
" , "contents": "allControlEvents(${1:})" },{ "trigger": "setDate \t func UIDatePicker -> void" , "contents": "setDate(${1:NSDate}, animated:${2:BOOL})" },{ "trigger": "presentedSubitemAtURL \t func UIDocument -> void" , "contents": "presentedSubitemAtURL(${1:NSURL}, didMoveToURL:${2:NSURL})" },{ "trigger": "rangeEnclosingPosition \t func unknown -> UITextRange?
" , "contents": "rangeEnclosingPosition(${1:UITextPosition}, withGranularity:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "underlineGlyphRange \t func NSLayoutManager -> void" , "contents": "underlineGlyphRange(${1:NSRange}, underlineType:${2:NSUnderlineStyle}, lineFragmentRect:${3:CGRect}, lineFragmentGlyphRange:${4:NSRange}, containerOrigin:${5:CGPoint})" },{ "trigger": "titleTextAttributesForState \t func UIBarItem -> [String" , "contents": "titleTextAttributesForState(${1:UIControlState})" },{ "trigger": "encodeWithCoder \t func UIFontDescriptor -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "application \t func unknown -> UIViewController?
" , "contents": "application(${1:UIApplication}, viewControllerWithRestorationIdentifierPath:${2:[AnyObject]}, coder:${3:NSCoder})" },{ "trigger": "updateFloatingCursorAtPoint \t func UITextField -> void" , "contents": "updateFloatingCursorAtPoint(${1:CGPoint})" },{ "trigger": "canBecomeFocused \t func UIView -> BOOL
" , "contents": "canBecomeFocused(${1:})" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, didHighlightItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "drawWithRect \t func NSAttributedString -> void" , "contents": "drawWithRect(${1:CGRect}, options:${2:NSStringDrawingOptions}, context:${3:NSStringDrawingContext?})" },{ "trigger": "setExtraLineFragmentRect \t func NSLayoutManager -> void" , "contents": "setExtraLineFragmentRect(${1:CGRect}, usedRect:${2:CGRect}, textContainer:${3:NSTextContainer})" },{ "trigger": "setAttributedTitle \t func UIButton -> void" , "contents": "setAttributedTitle(${1:NSAttributedString?}, forState:${2:UIControlState})" },{ "trigger": "fill \t func UIBezierPath -> void" , "contents": "fill(${1:})" },{ "trigger": "layoutManager \t func unknown -> BOOL
" , "contents": "layoutManager(${1:NSLayoutManager}, shouldBreakLineByWordBeforeCharacterAtIndex:${2:Int})" },{ "trigger": "searchBarCancelButtonClicked \t func unknown -> void" , "contents": "searchBarCancelButtonClicked(${1:UISearchBar})" },{ "trigger": "set \t func UIColor -> void" , "contents": "set(${1:})" },{ "trigger": "inverseRegion \t func UIRegion -> Self
" , "contents": "inverseRegion(${1:})" },{ "trigger": "updateChangeCount \t func UIDocument -> void" , "contents": "updateChangeCount(${1:UIDocumentChangeKind})" },{ "trigger": "caretRectForPosition \t func unknown -> CGRect
" , "contents": "caretRectForPosition(${1:UITextPosition})" },{ "trigger": "tableView \t func unknown -> [UITableViewRowAction]?
" , "contents": "tableView(${1:UITableView}, editActionsForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "positionWithinRange \t func UITextView -> UITextPosition?
" , "contents": "positionWithinRange(${1:UITextRange}, atCharacterOffset:${2:Int})" },{ "trigger": "getLineDash \t func UIBezierPath -> void" , "contents": "getLineDash(${1:UnsafeMutablePointer<CGFloat>}, count:${2:UnsafeMutablePointer<Int>}, phase:${3:UnsafeMutablePointer<CGFloat>})" },{ "trigger": "shouldInvalidateLayoutForBoundsChange \t func UICollectionViewLayout -> BOOL
" , "contents": "shouldInvalidateLayoutForBoundsChange(${1:CGRect})" },{ "trigger": "shouldPresentInFullscreen \t func UIPresentationController -> BOOL
" , "contents": "shouldPresentInFullscreen(${1:})" },{ "trigger": "willPresentSearchController \t func unknown -> void" , "contents": "willPresentSearchController(${1:UISearchController})" },{ "trigger": "tableView \t func UITableViewController -> NSIndexPath?
" , "contents": "tableView(${1:UITableView}, willDeselectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "azimuthUnitVectorInView \t func UITouch -> CGVector
" , "contents": "azimuthUnitVectorInView(${1:UIView?})" },{ "trigger": "fontDescriptorWithSymbolicTraits \t func UIFontDescriptor -> UIFontDescriptor
" , "contents": "fontDescriptorWithSymbolicTraits(${1:UIFontDescriptorSymbolicTraits})" },{ "trigger": "setAngle \t func UIPushBehavior -> void" , "contents": "setAngle(${1:CGFloat}, magnitude:${2:CGFloat})" },{ "trigger": "pasteboardTypes \t func UIPasteboard -> [String]
" , "contents": "pasteboardTypes(${1:})" },{ "trigger": "truncatedGlyphRangeInLineFragmentForGlyphAtIndex \t func NSLayoutManager -> NSRange
" , "contents": "truncatedGlyphRangeInLineFragmentForGlyphAtIndex(${1:Int})" },{ "trigger": "prefersStatusBarHidden \t func UIViewController -> BOOL
" , "contents": "prefersStatusBarHidden(${1:})" },{ "trigger": "layoutAttributesForDecorationViewOfKind \t func UIDynamicAnimator -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForDecorationViewOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "visibleSupplementaryViewsOfKind \t func UICollectionView -> [UICollectionReusableView]
" , "contents": "visibleSupplementaryViewsOfKind(${1:String})" },{ "trigger": "attachmentSizeForGlyphAtIndex \t func NSLayoutManager -> CGSize
" , "contents": "attachmentSizeForGlyphAtIndex(${1:Int})" },{ "trigger": "documentInteractionControllerWillPresentOpenInMenu \t func unknown -> void" , "contents": "documentInteractionControllerWillPresentOpenInMenu(${1:UIDocumentInteractionController})" },{ "trigger": "systemLayoutSizeFittingSize \t func UIView -> CGSize
" , "contents": "systemLayoutSizeFittingSize(${1:CGSize}, withHorizontalFittingPriority:${2:UILayoutPriority}, verticalFittingPriority:${3:UILayoutPriority})" },{ "trigger": "searchDisplayController \t func unknown -> void" , "contents": "searchDisplayController(${1:UISearchDisplayController}, willHideSearchResultsTableView:${2:UITableView})" },{ "trigger": "navigationControllerPreferredInterfaceOrientationForPresentation \t func unknown -> UIInterfaceOrientation
" , "contents": "navigationControllerPreferredInterfaceOrientationForPresentation(${1:UINavigationController})" },{ "trigger": "layoutManager \t func unknown -> void" , "contents": "layoutManager(${1:NSLayoutManager}, textContainer:${2:NSTextContainer}, didChangeGeometryFromSize:${3:CGSize})" },{ "trigger": "imageForState \t func UIButton -> UIImage?
" , "contents": "imageForState(${1:UIControlState})" },{ "trigger": "completionCurve \t func unknown -> UIViewAnimationCurve
" , "contents": "completionCurve(${1:})" },{ "trigger": "presentedSubitemDidAppearAtURL \t func UIDocument -> void" , "contents": "presentedSubitemDidAppearAtURL(${1:NSURL})" },{ "trigger": "application \t func unknown -> Void" , "contents": "application(${1:UIApplication}, continueUserActivity:${2:NSUserActivity}, restorationHandler:${3:[AnyObject]? -> Void})" },{ "trigger": "documentInteractionController \t func unknown -> BOOL
" , "contents": "documentInteractionController(${1:UIDocumentInteractionController}, performAction:${2:Selector})" },{ "trigger": "copyWithZone \t func UIFont -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "startInteractiveTransition \t func UIPercentDrivenInteractiveTransition -> void" , "contents": "startInteractiveTransition(${1:UIViewControllerContextTransitioning})" },{ "trigger": "isMovingFromParentViewController \t func UIViewController -> BOOL
" , "contents": "isMovingFromParentViewController(${1:})" },{ "trigger": "encodeUIEdgeInsets \t func NSCoder -> void" , "contents": "encodeUIEdgeInsets(${1:UIEdgeInsets}, forKey:${2:String})" },{ "trigger": "CGVectorFromString \t func unknown -> CGVector
" , "contents": "CGVectorFromString(${1:String})" },{ "trigger": "dequeueReusableCellWithReuseIdentifier \t func UICollectionView -> UICollectionViewCell
" , "contents": "dequeueReusableCellWithReuseIdentifier(${1:String}, forIndexPath:${2:NSIndexPath})" },{ "trigger": "insertItemsAtIndexPaths \t func UICollectionView -> void" , "contents": "insertItemsAtIndexPaths(${1:[NSIndexPath]})" },{ "trigger": "transitionDuration \t func UISearchController -> NSTimeInterval
" , "contents": "transitionDuration(${1:UIViewControllerContextTransitioning?})" },{ "trigger": "scrollViewDidEndDecelerating \t func UITableViewController -> void" , "contents": "scrollViewDidEndDecelerating(${1:UIScrollView})" },{ "trigger": "UIAccessibilityIsBoldTextEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsBoldTextEnabled(${1:})" },{ "trigger": "positionFromPosition \t func UITextField -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, offset:${2:Int})" },{ "trigger": "selectionRectsForRange \t func UITextView -> [AnyObject]
" , "contents": "selectionRectsForRange(${1:UITextRange})" },{ "trigger": "instantiateInitialViewController \t func UIStoryboard -> UIViewController?
" , "contents": "instantiateInitialViewController(${1:})" },{ "trigger": "cancelInteractiveMovement \t func UICollectionView -> void" , "contents": "cancelInteractiveMovement(${1:})" },{ "trigger": "contactPrinter \t func UIPrinter -> Void?
" , "contents": "contactPrinter(${1:BOOL -> Void?})" },{ "trigger": "setBackgroundImage \t func UISearchBar -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forBarPosition:${2:UIBarPosition}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "primaryViewControllerForCollapsingSplitViewController \t func unknown -> UIViewController?
" , "contents": "primaryViewControllerForCollapsingSplitViewController(${1:UISplitViewController})" },{ "trigger": "instantiateWithOwner \t func UINib -> [AnyObject]
" , "contents": "instantiateWithOwner(${1:AnyObject?}, options:${2:[NSObject })" },{ "trigger": "completeStateRestoration \t func UIApplication -> void" , "contents": "completeStateRestoration(${1:})" },{ "trigger": "textViewDidEndEditing \t func unknown -> void" , "contents": "textViewDidEndEditing(${1:UITextView})" },{ "trigger": "textViewDidChangeSelection \t func unknown -> void" , "contents": "textViewDidChangeSelection(${1:UITextView})" },{ "trigger": "azimuthAngleInView \t func UITouch -> CGFloat
" , "contents": "azimuthAngleInView(${1:UIView?})" },{ "trigger": "tabBar \t func UITabBarController -> void" , "contents": "tabBar(${1:UITabBar}, didEndCustomizingItems:${2:[UITabBarItem]}, changed:${3:BOOL})" },{ "trigger": "UIGraphicsBeginPDFContextToFile \t func UIGravityBehavior -> BOOL
" , "contents": "UIGraphicsBeginPDFContextToFile(${1:String}, _:${2:CGRect}, _:${3:[NSObject })" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didEndDisplayingCell:${2:UITableViewCell}, forRowAtIndexPath:${3:NSIndexPath})" },{ "trigger": "actionsForTarget \t func UIControl -> [String]?
" , "contents": "actionsForTarget(${1:AnyObject?}, forControlEvent:${2:UIControlEvents})" },{ "trigger": "decodeRestorableStateWithCoder \t func UIViewController -> void" , "contents": "decodeRestorableStateWithCoder(${1:NSCoder})" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, didDeselectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "setTranslatesReferenceBoundsIntoBoundaryWithInsets \t func UICollisionBehavior -> void" , "contents": "setTranslatesReferenceBoundsIntoBoundaryWithInsets(${1:UIEdgeInsets})" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, canFocusItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "tableView \t func UITableViewController -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldHighlightRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, didDeselectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "pickerView \t func unknown -> CGFloat
" , "contents": "pickerView(${1:UIPickerView}, rowHeightForComponent:${2:Int})" },{ "trigger": "setTitleTextAttributes \t func UISegmentedControl -> void" , "contents": "setTitleTextAttributes(${1:[NSObject }, forState:${2:UIControlState})" },{ "trigger": "startProvidingItemAtURL \t func NSFileProviderExtension -> Void
" , "contents": "startProvidingItemAtURL(${1:NSURL}, completionHandler:${2:NSError? -> Void})" },{ "trigger": "prepareForReuse \t func UITableViewCell -> void" , "contents": "prepareForReuse(${1:})" },{ "trigger": "indexPathsToDeleteForSupplementaryViewOfKind \t func UICollectionViewLayout -> [NSIndexPath]
" , "contents": "indexPathsToDeleteForSupplementaryViewOfKind(${1:String})" },{ "trigger": "viewForBaselineLayout \t func UIView -> UIView
" , "contents": "viewForBaselineLayout(${1:})" },{ "trigger": "setImage \t func UISegmentedControl -> void" , "contents": "setImage(${1:UIImage?}, forSegmentAtIndex:${2:Int})" },{ "trigger": "setBackgroundImage \t func UIBarButtonItem -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forState:${2:UIControlState}, style:${3:UIBarButtonItemStyle}, barMetrics:${4:UIBarMetrics})" },{ "trigger": "sectionIndexTitlesForTableView \t func unknown -> [String]?
" , "contents": "sectionIndexTitlesForTableView(${1:UITableView})" },{ "trigger": "setTitle \t func UIButton -> void" , "contents": "setTitle(${1:String?}, forState:${2:UIControlState})" },{ "trigger": "showInView \t func UIActionSheet -> void" , "contents": "showInView(${1:UIView})" },{ "trigger": "addConstraint \t func UIView -> void" , "contents": "addConstraint(${1:NSLayoutConstraint})" },{ "trigger": "showFromBarButtonItem \t func UIActionSheet -> void" , "contents": "showFromBarButtonItem(${1:UIBarButtonItem}, animated:${2:BOOL})" },{ "trigger": "savingFileType \t func UIDocument -> String?
" , "contents": "savingFileType(${1:})" },{ "trigger": "frameForDictationResultPlaceholder \t func unknown -> CGRect
" , "contents": "frameForDictationResultPlaceholder(${1:AnyObject})" },{ "trigger": "documentMenu \t func unknown -> void" , "contents": "documentMenu(${1:UIDocumentMenuViewController}, didPickDocumentPicker:${2:UIDocumentPickerViewController})" },{ "trigger": "previewActionItems \t func UIViewController -> [UIPreviewActionItem]
" , "contents": "previewActionItems(${1:})" },{ "trigger": "drawAtPoint \t func NSString -> CGSize
" , "contents": "drawAtPoint(${1:CGPoint}, forWidth:${2:CGFloat}, withFont:${3:UIFont!}, minFontSize:${4:CGFloat}, actualFontSize:${5:UnsafeMutablePointer<CGFloat>}, lineBreakMode:${6:NSLineBreakMode}, baselineAdjustment:${7:UIBaselineAdjustment})" },{ "trigger": "titleVerticalPositionAdjustmentForBarMetrics \t func UINavigationBar -> CGFloat
" , "contents": "titleVerticalPositionAdjustmentForBarMetrics(${1:UIBarMetrics})" },{ "trigger": "registerNib \t func UITableView -> void" , "contents": "registerNib(${1:UINib?}, forHeaderFooterViewReuseIdentifier:${2:String})" },{ "trigger": "preferredStatusBarStyle \t func UIViewController -> UIStatusBarStyle
" , "contents": "preferredStatusBarStyle(${1:})" },{ "trigger": "webViewDidFinishLoad \t func unknown -> void" , "contents": "webViewDidFinishLoad(${1:UIWebView})" },{ "trigger": "decodeRestorableStateWithCoder \t func unknown -> void" , "contents": "decodeRestorableStateWithCoder(${1:NSCoder})" },{ "trigger": "pageViewController \t func unknown -> UIViewController?
" , "contents": "pageViewController(${1:UIPageViewController}, viewControllerBeforeViewController:${2:UIViewController})" },{ "trigger": "regionByIntersectionWithRegion \t func UIRegion -> Self
" , "contents": "regionByIntersectionWithRegion(${1:UIRegion})" },{ "trigger": "tabBar \t func UITabBarController -> void" , "contents": "tabBar(${1:UITabBar}, didSelectItem:${2:UITabBarItem})" },{ "trigger": "moveSection \t func UITableView -> void" , "contents": "moveSection(${1:Int}, toSection:${2:Int})" },{ "trigger": "collectionView \t func unknown -> CGFloat
" , "contents": "collectionView(${1:UICollectionView}, layout:${2:UICollectionViewLayout}, minimumInteritemSpacingForSectionAtIndex:${3:Int})" },{ "trigger": "setTitlePositionAdjustment \t func UIBarButtonItem -> void" , "contents": "setTitlePositionAdjustment(${1:UIOffset}, forBarMetrics:${2:UIBarMetrics})" },{ "trigger": "readFromFileURL \t func NSMutableAttributedString -> void" , "contents": "readFromFileURL(${1:NSURL}, options:${2:[NSObject }, documentAttributes:${3:AutoreleasingUnsafeMutablePointer<NSDictionary?>})" },{ "trigger": "animationControllerForDismissedController \t func UISearchController -> UIViewControllerAnimatedTransitioning?
" , "contents": "animationControllerForDismissedController(${1:UIViewController})" },{ "trigger": "offsetFromPosition \t func UITextField -> Int
" , "contents": "offsetFromPosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "encodeWithCoder \t func UIImageAsset -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "UIAccessibilityDarkerSystemColorsEnabled \t func UIAccessibilityElement -> BOOL
" , "contents": "UIAccessibilityDarkerSystemColorsEnabled(${1:})" },{ "trigger": "tableView \t func UITableViewController -> UITableViewCell
" , "contents": "tableView(${1:UITableView}, cellForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "containerView \t func unknown -> UIView
" , "contents": "containerView(${1:})" },{ "trigger": "setBackgroundImage \t func UINavigationBar -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forBarPosition:${2:UIBarPosition}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "constraintEqualToAnchor \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintEqualToAnchor(${1:NSLayoutDimension!}, multiplier:${2:CGFloat}, constant:${3:CGFloat})" },{ "trigger": "addCoordinatedAnimations \t func UIFocusAnimationCoordinator -> Void?" , "contents": "addCoordinatedAnimations(${1: -> Void?}, completion:${2: -> Void?})" },{ "trigger": "drawAtPoint \t func NSString -> void" , "contents": "drawAtPoint(${1:CGPoint}, withAttributes:${2:[String })" },{ "trigger": "pickerView \t func unknown -> String?
" , "contents": "pickerView(${1:UIPickerView}, accessibilityHintForComponent:${2:Int})" },{ "trigger": "interactionControllerForPresentation \t func UISearchController -> UIViewControllerInteractiveTransitioning?
" , "contents": "interactionControllerForPresentation(${1:UIViewControllerAnimatedTransitioning})" },{ "trigger": "applicationProtectedDataWillBecomeUnavailable \t func unknown -> void" , "contents": "applicationProtectedDataWillBecomeUnavailable(${1:UIApplication})" },{ "trigger": "hasUnsavedChanges \t func UIDocument -> BOOL
" , "contents": "hasUnsavedChanges(${1:})" },{ "trigger": "prepareForPopoverPresentation \t func unknown -> void" , "contents": "prepareForPopoverPresentation(${1:UIPopoverPresentationController})" },{ "trigger": "positionAdjustmentForSearchBarIcon \t func UISearchBar -> UIOffset
" , "contents": "positionAdjustmentForSearchBarIcon(${1:UISearchBarIcon})" },{ "trigger": "willDismissSearchController \t func unknown -> void" , "contents": "willDismissSearchController(${1:UISearchController})" },{ "trigger": "closeWithCompletionHandler \t func UIDocument -> Void?
" , "contents": "closeWithCompletionHandler(${1:BOOL -> Void?})" },{ "trigger": "presentedSubitemAtURL \t func UIDocument -> void" , "contents": "presentedSubitemAtURL(${1:NSURL}, didLoseVersion:${2:NSFileVersion})" },{ "trigger": "CGSizeValue \t func NSValue -> CGSize
" , "contents": "CGSizeValue(${1:})" },{ "trigger": "automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers \t func UIViewController -> BOOL
" , "contents": "automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers(${1:})" },{ "trigger": "UIAccessibilityConvertPathToScreenCoordinates \t func UIAccessibilityCustomAction -> UIBezierPath
" , "contents": "UIAccessibilityConvertPathToScreenCoordinates(${1:UIBezierPath}, _:${2:UIView})" },{ "trigger": "removeFromParentViewController \t func UIViewController -> void" , "contents": "removeFromParentViewController(${1:})" },{ "trigger": "finalLayoutAttributesForDisappearingDecorationElementOfKind \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "finalLayoutAttributesForDisappearingDecorationElementOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "setTitleTextAttributes \t func UIBarItem -> void" , "contents": "setTitleTextAttributes(${1:[String }, forState:${2:UIControlState})" },{ "trigger": "copyWithZone \t func UIPreviewActionGroup -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "systemLayoutFittingSizeDidChangeForChildContentContainer \t func unknown -> void" , "contents": "systemLayoutFittingSizeDidChangeForChildContentContainer(${1:UIContentContainer})" },{ "trigger": "finishedUnselectedImage \t func UITabBarItem -> UIImage?
" , "contents": "finishedUnselectedImage(${1:})" },{ "trigger": "canPerformAction \t func UIResponder -> BOOL
" , "contents": "canPerformAction(${1:Selector}, withSender:${2:AnyObject?})" },{ "trigger": "positionWithinRange \t func UITextView -> UITextPosition?
" , "contents": "positionWithinRange(${1:UITextRange}, farthestInDirection:${2:UITextLayoutDirection})" },{ "trigger": "addBoundaryWithIdentifier \t func UICollisionBehavior -> void" , "contents": "addBoundaryWithIdentifier(${1:NSCopying}, forPath:${2:UIBezierPath})" },{ "trigger": "viewWillUnload \t func UIViewController -> void" , "contents": "viewWillUnload(${1:})" },{ "trigger": "stringByEvaluatingJavaScriptFromString \t func UIWebView -> String?
" , "contents": "stringByEvaluatingJavaScriptFromString(${1:String})" },{ "trigger": "drawAsPatternInRect \t func UIImage -> void" , "contents": "drawAsPatternInRect(${1:CGRect})" },{ "trigger": "UIAccessibilityFocusedElement \t func unknown -> AnyObject?
" , "contents": "UIAccessibilityFocusedElement(${1:String?})" },{ "trigger": "beginAppearanceTransition \t func UIViewController -> void" , "contents": "beginAppearanceTransition(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "constraintEqualToConstant \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintEqualToConstant(${1:CGFloat})" },{ "trigger": "regionByUnionWithRegion \t func UIRegion -> Self
" , "contents": "regionByUnionWithRegion(${1:UIRegion})" },{ "trigger": "setBaseWritingDirection \t func unknown -> void" , "contents": "setBaseWritingDirection(${1:UITextWritingDirection}, forRange:${2:UITextRange})" },{ "trigger": "setContentViewController \t func UIPopoverController -> void" , "contents": "setContentViewController(${1:UIViewController}, animated:${2:BOOL})" },{ "trigger": "removeGestureRecognizer \t func UIView -> void" , "contents": "removeGestureRecognizer(${1:UIGestureRecognizer})" },{ "trigger": "URLForItemWithPersistentIdentifier \t func NSFileProviderExtension -> NSURL?
" , "contents": "URLForItemWithPersistentIdentifier(${1:String})" },{ "trigger": "scrollViewWillBeginDecelerating \t func UICollectionViewController -> void" , "contents": "scrollViewWillBeginDecelerating(${1:UIScrollView})" },{ "trigger": "searchDisplayControllerWillEndSearch \t func unknown -> void" , "contents": "searchDisplayControllerWillEndSearch(${1:UISearchDisplayController})" },{ "trigger": "rangeEnclosingPosition \t func UITextInputStringTokenizer -> UITextRange?
" , "contents": "rangeEnclosingPosition(${1:UITextPosition}, withGranularity:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "setStatusBarOrientation \t func UIApplication -> void" , "contents": "setStatusBarOrientation(${1:UIInterfaceOrientation}, animated:${2:BOOL})" },{ "trigger": "collectionView \t func unknown -> UICollectionReusableView
" , "contents": "collectionView(${1:UICollectionView}, viewForSupplementaryElementOfKind:${2:String}, atIndexPath:${3:NSIndexPath})" },{ "trigger": "childViewControllerForStatusBarStyle \t func UIViewController -> UIViewController?
" , "contents": "childViewControllerForStatusBarStyle(${1:})" },{ "trigger": "NSTextAlignmentToCTTextAlignment \t func NSTextAttachment -> CTTextAlignment
" , "contents": "NSTextAlignmentToCTTextAlignment(${1:NSTextAlignment})" },{ "trigger": "deleteBackward \t func UITextView -> void" , "contents": "deleteBackward(${1:})" },{ "trigger": "titleColorForState \t func UIButton -> UIColor?
" , "contents": "titleColorForState(${1:UIControlState})" },{ "trigger": "didTransitionToState \t func UITableViewCell -> void" , "contents": "didTransitionToState(${1:UITableViewCellStateMask})" },{ "trigger": "copy \t func NSObject -> void" , "contents": "copy(${1:AnyObject?})" },{ "trigger": "reloadAllComponents \t func UIPickerView -> void" , "contents": "reloadAllComponents(${1:})" },{ "trigger": "printerPickerControllerWillPresent \t func unknown -> void" , "contents": "printerPickerControllerWillPresent(${1:UIPrinterPickerController})" },{ "trigger": "setNeedsStatusBarAppearanceUpdate \t func UIViewController -> void" , "contents": "setNeedsStatusBarAppearanceUpdate(${1:})" },{ "trigger": "selectItemAtIndexPath \t func UICollectionView -> void" , "contents": "selectItemAtIndexPath(${1:NSIndexPath?}, animated:${2:BOOL}, scrollPosition:${3:UICollectionViewScrollPosition})" },{ "trigger": "interactionControllerForDismissal \t func UISearchController -> UIViewControllerInteractiveTransitioning?
" , "contents": "interactionControllerForDismissal(${1:UIViewControllerAnimatedTransitioning})" },{ "trigger": "animateAlongsideTransition \t func unknown -> Void?" , "contents": "animateAlongsideTransition(${1:UIViewControllerTransitionCoordinatorContext -> Void?}, completion:${2:UIViewControllerTransitionCoordinatorContext -> Void?})" },{ "trigger": "valueForPasteboardType \t func UIPasteboard -> AnyObject?
" , "contents": "valueForPasteboardType(${1:String})" },{ "trigger": "awakeFromNib \t func NSObject -> void" , "contents": "awakeFromNib(${1:})" },{ "trigger": "characterOffsetOfPosition \t func UITextView -> Int
" , "contents": "characterOffsetOfPosition(${1:UITextPosition}, withinRange:${2:UITextRange})" },{ "trigger": "updateInteractiveMovementTargetPosition \t func UICollectionView -> void" , "contents": "updateInteractiveMovementTargetPosition(${1:CGPoint})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, moveRowAtIndexPath:${2:NSIndexPath}, toIndexPath:${3:NSIndexPath})" },{ "trigger": "invalidateDisplayForGlyphRange \t func NSLayoutManager -> void" , "contents": "invalidateDisplayForGlyphRange(${1:NSRange})" },{ "trigger": "navigationController \t func unknown -> void" , "contents": "navigationController(${1:UINavigationController}, willShowViewController:${2:UIViewController}, animated:${3:BOOL})" },{ "trigger": "applicationShouldRequestHealthAuthorization \t func unknown -> void" , "contents": "applicationShouldRequestHealthAuthorization(${1:UIApplication})" },{ "trigger": "setStatusBarHidden \t func UIApplication -> void" , "contents": "setStatusBarHidden(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "decodeCGVectorForKey \t func NSCoder -> CGVector
" , "contents": "decodeCGVectorForKey(${1:String})" },{ "trigger": "setTextContainer \t func NSLayoutManager -> void" , "contents": "setTextContainer(${1:NSTextContainer}, forGlyphRange:${2:NSRange})" },{ "trigger": "viewDidLoad \t func UIViewController -> void" , "contents": "viewDidLoad(${1:})" },{ "trigger": "setMarkedText \t func UITextView -> void" , "contents": "setMarkedText(${1:String?}, selectedRange:${2:NSRange})" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldShowMenuForItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "drawInRect \t func UIImage -> void" , "contents": "drawInRect(${1:CGRect})" },{ "trigger": "applicationProtectedDataDidBecomeAvailable \t func unknown -> void" , "contents": "applicationProtectedDataDidBecomeAvailable(${1:UIApplication})" },{ "trigger": "tableView \t func UITableViewController -> CGFloat
" , "contents": "tableView(${1:UITableView}, estimatedHeightForFooterInSection:${2:Int})" },{ "trigger": "applicationWillEnterForeground \t func unknown -> void" , "contents": "applicationWillEnterForeground(${1:UIApplication})" },{ "trigger": "copyWithZone \t func UILexiconEntry -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "tableView \t func unknown -> CGFloat
" , "contents": "tableView(${1:UITableView}, heightForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didEndDisplayingFooterView:${2:UIView}, forSection:${3:Int})" },{ "trigger": "locationForGlyphAtIndex \t func NSLayoutManager -> CGPoint
" , "contents": "locationForGlyphAtIndex(${1:Int})" },{ "trigger": "activityViewController \t func UIActivity -> UIViewController?
" , "contents": "activityViewController(${1:})" },{ "trigger": "willPresentActionSheet \t func UIDocumentInteractionController -> void" , "contents": "willPresentActionSheet(${1:UIActionSheet})" },{ "trigger": "toggleBoldface \t func NSObject -> void" , "contents": "toggleBoldface(${1:AnyObject?})" },{ "trigger": "printerPickerController \t func unknown -> BOOL
" , "contents": "printerPickerController(${1:UIPrinterPickerController}, shouldShowPrinter:${2:UIPrinter})" },{ "trigger": "textRectForBounds \t func UITextField -> CGRect
" , "contents": "textRectForBounds(${1:CGRect})" },{ "trigger": "previousLocationInView \t func UITouch -> CGPoint
" , "contents": "previousLocationInView(${1:UIView?})" },{ "trigger": "copyWithZone \t func UIRegion -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "scrollViewDidEndScrollingAnimation \t func UICollectionViewController -> void" , "contents": "scrollViewDidEndScrollingAnimation(${1:UIScrollView})" },{ "trigger": "encodeWithCoder \t func UIRegion -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "constraintLessThanOrEqualToAnchor \t func NSLayoutAnchor -> NSLayoutConstraint!
" , "contents": "constraintLessThanOrEqualToAnchor(${1:NSLayoutAnchor!})" },{ "trigger": "transitionDuration \t func unknown -> NSTimeInterval
" , "contents": "transitionDuration(${1:})" },{ "trigger": "sectionForSectionIndexTitleAtIndex \t func UILocalizedIndexedCollation -> Int
" , "contents": "sectionForSectionIndexTitleAtIndex(${1:Int})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, performAction:${2:Selector}, forRowAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "viewControllerForKey \t func unknown -> UIViewController?
" , "contents": "viewControllerForKey(${1:String})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didDeselectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "collectionView \t func UICollectionViewController -> CGPoint
" , "contents": "collectionView(${1:UICollectionView}, targetContentOffsetForProposedContentOffset:${2:CGPoint})" },{ "trigger": "keyPathsAndRelativeValuesForViewerOffset \t func UIMotionEffect -> [String" , "contents": "keyPathsAndRelativeValuesForViewerOffset(${1:UIOffset})" },{ "trigger": "drawInRect \t func NSAttributedString -> void" , "contents": "drawInRect(${1:CGRect})" },{ "trigger": "webView \t func unknown -> BOOL
" , "contents": "webView(${1:UIWebView}, shouldStartLoadWithRequest:${2:NSURLRequest}, navigationType:${3:UIWebViewNavigationType})" },{ "trigger": "activityViewController \t func UIActivityItemProvider -> String
" , "contents": "activityViewController(${1:UIActivityViewController}, dataTypeIdentifierForActivityType:${2:String?})" },{ "trigger": "encodeWithCoder \t func UICollectionViewLayout -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "pickerView \t func unknown -> CGFloat
" , "contents": "pickerView(${1:UIPickerView}, widthForComponent:${2:Int})" },{ "trigger": "scrollViewDidEndDecelerating \t func UICollectionViewController -> void" , "contents": "scrollViewDidEndDecelerating(${1:UIScrollView})" },{ "trigger": "didMoveToParentViewController \t func UIViewController -> void" , "contents": "didMoveToParentViewController(${1:UIViewController?})" },{ "trigger": "setOverrideTraitCollection \t func UIViewController -> void" , "contents": "setOverrideTraitCollection(${1:UITraitCollection?}, forChildViewController:${2:UIViewController})" },{ "trigger": "disableEditing \t func UIDocument -> void" , "contents": "disableEditing(${1:})" },{ "trigger": "processEditingForTextStorage \t func NSLayoutManager -> void" , "contents": "processEditingForTextStorage(${1:NSTextStorage}, edited:${2:NSTextStorageEditActions}, range:${3:NSRange}, changeInLength:${4:Int}, invalidatedRange:${5:NSRange})" },{ "trigger": "printInteractionControllerWillStartJob \t func unknown -> void" , "contents": "printInteractionControllerWillStartJob(${1:UIPrintInteractionController})" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldHighlightItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "changeCountTokenForSaveOperation \t func UIDocument -> AnyObject
" , "contents": "changeCountTokenForSaveOperation(${1:UIDocumentSaveOperation})" },{ "trigger": "snapshotViewAfterScreenUpdates \t func UIScreen -> UIView
" , "contents": "snapshotViewAfterScreenUpdates(${1:BOOL})" },{ "trigger": "tableView \t func UIPickerView -> Int
" , "contents": "tableView(${1:UITableView}, sectionForSectionIndexTitle:${2:String}, atIndex:${3:Int})" },{ "trigger": "encodeUIOffset \t func NSCoder -> void" , "contents": "encodeUIOffset(${1:UIOffset}, forKey:${2:String})" },{ "trigger": "indexPathForElementWithModelIdentifier \t func unknown -> NSIndexPath?
" , "contents": "indexPathForElementWithModelIdentifier(${1:String}, inView:${2:UIView})" },{ "trigger": "navigationController \t func unknown -> UIViewControllerInteractiveTransitioning?
" , "contents": "navigationController(${1:UINavigationController}, interactionControllerForAnimationController:${2:UIViewControllerAnimatedTransitioning})" },{ "trigger": "setRightBarButtonItem \t func UINavigationItem -> void" , "contents": "setRightBarButtonItem(${1:UIBarButtonItem?}, animated:${2:BOOL})" },{ "trigger": "setIncrementImage \t func UIStepper -> void" , "contents": "setIncrementImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "cancelInteractiveTransition \t func UIPercentDrivenInteractiveTransition -> void" , "contents": "cancelInteractiveTransition(${1:})" },{ "trigger": "paste \t func NSObject -> void" , "contents": "paste(${1:AnyObject?})" },{ "trigger": "insertSegmentWithImage \t func UISegmentedControl -> void" , "contents": "insertSegmentWithImage(${1:UIImage?}, atIndex:${2:Int}, animated:${3:BOOL})" },{ "trigger": "addButtonWithTitle \t func UIAlertView -> Int
" , "contents": "addButtonWithTitle(${1:String?})" },{ "trigger": "UIAccessibilityIsSpeakScreenEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsSpeakScreenEnabled(${1:})" },{ "trigger": "touchesShouldCancelInContentView \t func UIScrollView -> BOOL
" , "contents": "touchesShouldCancelInContentView(${1:UIView})" },{ "trigger": "sendEvent \t func UIApplication -> void" , "contents": "sendEvent(${1:UIEvent})" },{ "trigger": "presentFromBarButtonItem \t func UIPrintInteractionController -> BOOL
" , "contents": "presentFromBarButtonItem(${1:UIBarButtonItem}, animated:${2:BOOL}, completionHandler:${3:UIPrintInteractionCompletionHandler?})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, willDisplayCell:${2:UITableViewCell}, forRowAtIndexPath:${3:NSIndexPath})" },{ "trigger": "scrollViewWillBeginDragging \t func UITableViewController -> void" , "contents": "scrollViewWillBeginDragging(${1:UIScrollView})" },{ "trigger": "updateFocusIfNeeded \t func UIPresentationController -> void" , "contents": "updateFocusIfNeeded(${1:})" },{ "trigger": "tableView \t func unknown -> UIView?
" , "contents": "tableView(${1:UITableView}, viewForFooterInSection:${2:Int})" },{ "trigger": "encodeCGVector \t func NSCoder -> void" , "contents": "encodeCGVector(${1:CGVector}, forKey:${2:String})" },{ "trigger": "setEnabled \t func UISegmentedControl -> void" , "contents": "setEnabled(${1:BOOL}, forSegmentAtIndex:${2:Int})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didReceiveLocalNotification:${2:UILocalNotification})" },{ "trigger": "activityImage \t func UIActivity -> UIImage?
" , "contents": "activityImage(${1:})" },{ "trigger": "touchesCancelled \t func UIResponder -> void" , "contents": "touchesCancelled(${1:Set<UITouch>?}, withEvent:${2:UIEvent?})" },{ "trigger": "scrollViewDidScroll \t func unknown -> void" , "contents": "scrollViewDidScroll(${1:UIScrollView})" },{ "trigger": "scrollViewDidEndDecelerating \t func unknown -> void" , "contents": "scrollViewDidEndDecelerating(${1:UIScrollView})" },{ "trigger": "sectionIndexTitlesForTableView \t func UITableViewController -> [String]?
" , "contents": "sectionIndexTitlesForTableView(${1:UITableView})" },{ "trigger": "tableView \t func unknown -> UITableViewCellAccessoryType
" , "contents": "tableView(${1:UITableView}, accessoryTypeForRowWithIndexPath:${2:NSIndexPath})" },{ "trigger": "constraintEqualToAnchor \t func NSLayoutAnchor -> NSLayoutConstraint!
" , "contents": "constraintEqualToAnchor(${1:NSLayoutAnchor!}, constant:${2:CGFloat})" },{ "trigger": "layoutManager \t func unknown -> NSControlCharacterAction
" , "contents": "layoutManager(${1:NSLayoutManager}, shouldUseAction:${2:NSControlCharacterAction}, forControlCharacterAtIndex:${3:Int})" },{ "trigger": "indexPathForCell \t func UICollectionView -> NSIndexPath?
" , "contents": "indexPathForCell(${1:UICollectionViewCell})" },{ "trigger": "makeKeyWindow \t func UIWindow -> void" , "contents": "makeKeyWindow(${1:})" },{ "trigger": "addItems \t func UIPasteboard -> void" , "contents": "addItems(${1:[[String })" },{ "trigger": "addSubview \t func UIView -> void" , "contents": "addSubview(${1:UIView})" },{ "trigger": "encodeWithCoder \t func UIUserNotificationAction -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "baseWritingDirectionForPosition \t func unknown -> UITextWritingDirection
" , "contents": "baseWritingDirectionForPosition(${1:UITextPosition}, inDirection:${2:UITextStorageDirection})" },{ "trigger": "encodeWithCoder \t func NSParagraphStyle -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "continueTrackingWithTouch \t func UIControl -> BOOL
" , "contents": "continueTrackingWithTouch(${1:UITouch}, withEvent:${2:UIEvent?})" },{ "trigger": "lineFragmentRectForGlyphAtIndex \t func NSLayoutManager -> CGRect
" , "contents": "lineFragmentRectForGlyphAtIndex(${1:Int}, effectiveRange:${2:NSRangePointer}, withoutAdditionalLayout:${3:BOOL})" },{ "trigger": "previewingContext \t func unknown -> UIViewController?
" , "contents": "previewingContext(${1:UIViewControllerPreviewing}, viewControllerForLocation:${2:CGPoint})" },{ "trigger": "isAnimating \t func UIActivityIndicatorView -> BOOL
" , "contents": "isAnimating(${1:})" },{ "trigger": "indexOfAccessibilityElement \t func NSObject -> Int
" , "contents": "indexOfAccessibilityElement(${1:AnyObject})" },{ "trigger": "textStylingAtPosition \t func unknown -> [String" , "contents": "textStylingAtPosition(${1:UITextPosition}, inDirection:${2:UITextStorageDirection})" },{ "trigger": "getWhite \t func UIColor -> BOOL
" , "contents": "getWhite(${1:UnsafeMutablePointer<CGFloat>}, alpha:${2:UnsafeMutablePointer<CGFloat>})" },{ "trigger": "dismissWithClickedButtonIndex \t func UIActionSheet -> void" , "contents": "dismissWithClickedButtonIndex(${1:Int}, animated:${2:BOOL})" },{ "trigger": "viewForZoomingInScrollView \t func UITableViewController -> UIView?
" , "contents": "viewForZoomingInScrollView(${1:UIScrollView})" },{ "trigger": "positionFromPosition \t func UITextField -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, inDirection:${2:UITextLayoutDirection}, offset:${3:Int})" },{ "trigger": "visibleCells \t func UICollectionView -> [UICollectionViewCell]
" , "contents": "visibleCells(${1:})" },{ "trigger": "showViewController \t func UINavigationController -> void" , "contents": "showViewController(${1:UIViewController}, sender:${2:AnyObject?})" },{ "trigger": "navigationControllerSupportedInterfaceOrientations \t func unknown -> UIInterfaceOrientationMask
" , "contents": "navigationControllerSupportedInterfaceOrientations(${1:UINavigationController})" },{ "trigger": "endRefreshing \t func UIRefreshControl -> void" , "contents": "endRefreshing(${1:})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didReceiveRemoteNotification:${2:[NSObject })" },{ "trigger": "containsPasteboardTypes \t func UIPasteboard -> BOOL
" , "contents": "containsPasteboardTypes(${1:[String]})" },{ "trigger": "snapshotViewAfterScreenUpdates \t func UIView -> UIView
" , "contents": "snapshotViewAfterScreenUpdates(${1:BOOL})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didUpdateFocusInContext:${2:UITableViewFocusUpdateContext}, withAnimationCoordinator:${3:UIFocusAnimationCoordinator})" },{ "trigger": "ensureGlyphsForGlyphRange \t func NSLayoutManager -> void" , "contents": "ensureGlyphsForGlyphRange(${1:NSRange})" },{ "trigger": "layoutAttributesForItemAtIndexPath \t func UICollectionView -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForItemAtIndexPath(${1:NSIndexPath})" },{ "trigger": "moveSection \t func UICollectionView -> void" , "contents": "moveSection(${1:Int}, toSection:${2:Int})" },{ "trigger": "tabBarController \t func unknown -> void" , "contents": "tabBarController(${1:UITabBarController}, willBeginCustomizingViewControllers:${2:[UIViewController]})" },{ "trigger": "shouldAutomaticallyForwardRotationMethods \t func UIViewController -> BOOL
" , "contents": "shouldAutomaticallyForwardRotationMethods(${1:})" },{ "trigger": "setBaseWritingDirection \t func UITextView -> void" , "contents": "setBaseWritingDirection(${1:UITextWritingDirection}, forRange:${2:UITextRange})" },{ "trigger": "scrollViewShouldScrollToTop \t func UIWebView -> BOOL
" , "contents": "scrollViewShouldScrollToTop(${1:UIScrollView})" },{ "trigger": "copyWithZone \t func UITableViewRowAction -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "tableView \t func unknown -> String?
" , "contents": "tableView(${1:UITableView}, titleForDeleteConfirmationButtonForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "printInteractionControllerDidFinishJob \t func unknown -> void" , "contents": "printInteractionControllerDidFinishJob(${1:UIPrintInteractionController})" },{ "trigger": "updateSearchResultsForSearchController \t func unknown -> void" , "contents": "updateSearchResultsForSearchController(${1:UISearchController})" },{ "trigger": "cellForRowAtIndexPath \t func UITableView -> UITableViewCell?
" , "contents": "cellForRowAtIndexPath(${1:NSIndexPath})" },{ "trigger": "videoEditorController \t func unknown -> void" , "contents": "videoEditorController(${1:UIVideoEditorController}, didFailWithError:${2:NSError})" },{ "trigger": "endAppearanceTransition \t func UIViewController -> void" , "contents": "endAppearanceTransition(${1:})" },{ "trigger": "textFieldShouldBeginEditing \t func unknown -> BOOL
" , "contents": "textFieldShouldBeginEditing(${1:UITextField})" },{ "trigger": "finishInteractiveTransition \t func unknown -> void" , "contents": "finishInteractiveTransition(${1:})" },{ "trigger": "setLocation \t func NSLayoutManager -> void" , "contents": "setLocation(${1:CGPoint}, forStartOfGlyphRange:${2:NSRange})" },{ "trigger": "dismissKeyboard \t func UIInputViewController -> void" , "contents": "dismissKeyboard(${1:})" },{ "trigger": "scrollViewWillBeginDragging \t func UIWebView -> void" , "contents": "scrollViewWillBeginDragging(${1:UIScrollView})" },{ "trigger": "supportedInterfaceOrientationsForWindow \t func UIApplication -> UIInterfaceOrientationMask
" , "contents": "supportedInterfaceOrientationsForWindow(${1:UIWindow?})" },{ "trigger": "willRotateToInterfaceOrientation \t func UIViewController -> void" , "contents": "willRotateToInterfaceOrientation(${1:UIInterfaceOrientation}, duration:${2:NSTimeInterval})" },{ "trigger": "activityDidFinish \t func UIActivity -> void" , "contents": "activityDidFinish(${1:BOOL})" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, moveItemAtIndexPath:${2:NSIndexPath}, toIndexPath:${3:NSIndexPath})" },{ "trigger": "layoutManager \t func unknown -> CGFloat
" , "contents": "layoutManager(${1:NSLayoutManager}, paragraphSpacingBeforeGlyphAtIndex:${2:Int}, withProposedLineFragmentRect:${3:CGRect})" },{ "trigger": "UIGraphicsBeginImageContextWithOptions \t func UIGravityBehavior -> void" , "contents": "UIGraphicsBeginImageContextWithOptions(${1:CGSize}, _:${2:BOOL}, _:${3:CGFloat})" },{ "trigger": "closestPositionToPoint \t func unknown -> UITextPosition?
" , "contents": "closestPositionToPoint(${1:CGPoint})" },{ "trigger": "addLinearVelocity \t func UIDynamicItemBehavior -> void" , "contents": "addLinearVelocity(${1:CGPoint}, forItem:${2:UIDynamicItem})" },{ "trigger": "activityViewController \t func unknown -> AnyObject?
" , "contents": "activityViewController(${1:UIActivityViewController}, itemForActivityType:${2:String})" },{ "trigger": "fillWithBlendMode \t func UIBezierPath -> void" , "contents": "fillWithBlendMode(${1:CGBlendMode}, alpha:${2:CGFloat})" },{ "trigger": "backgroundImageForState \t func UIBarButtonItem -> UIImage?
" , "contents": "backgroundImageForState(${1:UIControlState}, style:${2:UIBarButtonItemStyle}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, canMoveItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldDeselectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "canPerformUnwindSegueAction \t func UIViewController -> BOOL
" , "contents": "canPerformUnwindSegueAction(${1:Selector}, fromViewController:${2:UIViewController}, withSender:${3:AnyObject})" },{ "trigger": "targetTransform \t func unknown -> CGAffineTransform
" , "contents": "targetTransform(${1:})" },{ "trigger": "setContentHuggingPriority \t func UIView -> void" , "contents": "setContentHuggingPriority(${1:UILayoutPriority}, forAxis:${2:UILayoutConstraintAxis})" },{ "trigger": "getGlyphsInRange \t func NSLayoutManager -> Int
" , "contents": "getGlyphsInRange(${1:NSRange}, glyphs:${2:UnsafeMutablePointer<CGGlyph>}, properties:${3:UnsafeMutablePointer<NSGlyphProperty>}, characterIndexes:${4:UnsafeMutablePointer<Int>}, bidiLevels:${5:UnsafeMutablePointer<UInt8>})" },{ "trigger": "layoutManager \t func unknown -> Int
" , "contents": "layoutManager(${1:NSLayoutManager}, shouldGenerateGlyphs:${2:UnsafePointer<CGGlyph>}, properties:${3:UnsafePointer<NSGlyphProperty>}, characterIndexes:${4:UnsafePointer<Int>}, font:${5:UIFont}, forGlyphRange:${6:NSRange})" },{ "trigger": "UIAccessibilityIsSpeakSelectionEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsSpeakSelectionEnabled(${1:})" },{ "trigger": "copyWithZone \t func UIFontDescriptor -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "dismissViewControllerAnimated \t func UIViewController -> Void?
" , "contents": "dismissViewControllerAnimated(${1:BOOL}, completion:${2: -> Void?})" },{ "trigger": "tableView \t func unknown -> CGFloat
" , "contents": "tableView(${1:UITableView}, estimatedHeightForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "lineFragmentRectForGlyphAtIndex \t func NSLayoutManager -> CGRect
" , "contents": "lineFragmentRectForGlyphAtIndex(${1:Int}, effectiveRange:${2:NSRangePointer})" },{ "trigger": "pressesBegan \t func UIResponder -> void" , "contents": "pressesBegan(${1:Set<UIPress>}, withEvent:${2:UIPressesEvent?})" },{ "trigger": "setDecrementImage \t func UIStepper -> void" , "contents": "setDecrementImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didDeselectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "layoutManager \t func unknown -> CGRect
" , "contents": "layoutManager(${1:NSLayoutManager}, boundingBoxForControlGlyphAtIndex:${2:Int}, forTextContainer:${3:NSTextContainer}, proposedLineFragment:${4:CGRect}, glyphPosition:${5:CGPoint}, characterIndex:${6:Int})" },{ "trigger": "beginBackgroundTaskWithExpirationHandler \t func UIApplication -> Void?" , "contents": "beginBackgroundTaskWithExpirationHandler(${1: -> Void?})" },{ "trigger": "scrollToItemAtIndexPath \t func UICollectionView -> void" , "contents": "scrollToItemAtIndexPath(${1:NSIndexPath}, atScrollPosition:${2:UICollectionViewScrollPosition}, animated:${3:BOOL})" },{ "trigger": "actionSheet \t func unknown -> void" , "contents": "actionSheet(${1:UIActionSheet}, didDismissWithButtonIndex:${2:Int})" },{ "trigger": "setAttachmentSize \t func NSLayoutManager -> void" , "contents": "setAttachmentSize(${1:CGSize}, forGlyphRange:${2:NSRange})" },{ "trigger": "finishInteractiveTransition \t func UIPercentDrivenInteractiveTransition -> void" , "contents": "finishInteractiveTransition(${1:})" },{ "trigger": "didUpdateFocusInContext \t func UIView -> void" , "contents": "didUpdateFocusInContext(${1:UIFocusUpdateContext}, withAnimationCoordinator:${2:UIFocusAnimationCoordinator})" },{ "trigger": "systemLayoutSizeFittingSize \t func UIView -> CGSize
" , "contents": "systemLayoutSizeFittingSize(${1:CGSize})" },{ "trigger": "removeDictationResultPlaceholder \t func UITextField -> void" , "contents": "removeDictationResultPlaceholder(${1:AnyObject}, willInsertResult:${2:BOOL})" },{ "trigger": "select \t func NSObject -> void" , "contents": "select(${1:AnyObject?})" },{ "trigger": "encodeCGSize \t func NSCoder -> void" , "contents": "encodeCGSize(${1:CGSize}, forKey:${2:String})" },{ "trigger": "tabBar \t func unknown -> void" , "contents": "tabBar(${1:UITabBar}, didSelectItem:${2:UITabBarItem})" },{ "trigger": "touchesForView \t func UIEvent -> Set UITouch ?
" , "contents": "touchesForView(${1:UIView})" },{ "trigger": "accessibilityElementAtIndex \t func NSObject -> AnyObject?
" , "contents": "accessibilityElementAtIndex(${1:Int})" },{ "trigger": "didMoveToSuperview \t func UIView -> void" , "contents": "didMoveToSuperview(${1:})" },{ "trigger": "tabBarController \t func unknown -> UIViewControllerAnimatedTransitioning?
" , "contents": "tabBarController(${1:UITabBarController}, animationControllerForTransitionFromViewController:${2:UIViewController}, toViewController:${3:UIViewController})" },{ "trigger": "popToViewController \t func UINavigationController -> [UIViewController]?
" , "contents": "popToViewController(${1:UIViewController}, animated:${2:BOOL})" },{ "trigger": "thumbRectForBounds \t func UISlider -> CGRect
" , "contents": "thumbRectForBounds(${1:CGRect}, trackRect:${2:CGRect}, value:${3:Float})" },{ "trigger": "scrollViewDidZoom \t func UICollectionViewController -> void" , "contents": "scrollViewDidZoom(${1:UIScrollView})" },{ "trigger": "documentInteractionControllerViewForPreview \t func unknown -> UIView?
" , "contents": "documentInteractionControllerViewForPreview(${1:UIDocumentInteractionController})" },{ "trigger": "setShowsCancelButton \t func UISearchBar -> void" , "contents": "setShowsCancelButton(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "layoutManager \t func unknown -> CGFloat
" , "contents": "layoutManager(${1:NSLayoutManager}, lineSpacingAfterGlyphAtIndex:${2:Int}, withProposedLineFragmentRect:${3:CGRect})" },{ "trigger": "didUpdateFocusInContext \t func unknown -> void" , "contents": "didUpdateFocusInContext(${1:UIFocusUpdateContext}, withAnimationCoordinator:${2:UIFocusAnimationCoordinator})" },{ "trigger": "leftViewRectForBounds \t func UITextField -> CGRect
" , "contents": "leftViewRectForBounds(${1:CGRect})" },{ "trigger": "performSegueWithIdentifier \t func UIViewController -> void" , "contents": "performSegueWithIdentifier(${1:String}, sender:${2:AnyObject?})" },{ "trigger": "toggleItalics \t func NSObject -> void" , "contents": "toggleItalics(${1:AnyObject?})" },{ "trigger": "removeDictationResultPlaceholder \t func unknown -> void" , "contents": "removeDictationResultPlaceholder(${1:AnyObject}, willInsertResult:${2:BOOL})" },{ "trigger": "addTextFieldWithConfigurationHandler \t func UIAlertController -> Void?
" , "contents": "addTextFieldWithConfigurationHandler(${1:UITextField -> Void?})" },{ "trigger": "dictationRecognitionFailed \t func UITextView -> void" , "contents": "dictationRecognitionFailed(${1:})" },{ "trigger": "dictationRecordingDidEnd \t func unknown -> void" , "contents": "dictationRecordingDidEnd(${1:})" },{ "trigger": "targetDisplayModeForActionInSplitViewController \t func unknown -> UISplitViewControllerDisplayMode
" , "contents": "targetDisplayModeForActionInSplitViewController(${1:UISplitViewController})" },{ "trigger": "accessibilityFrameForLineNumber \t func unknown -> CGRect
" , "contents": "accessibilityFrameForLineNumber(${1:Int})" },{ "trigger": "applicationDidReceiveMemoryWarning \t func unknown -> void" , "contents": "applicationDidReceiveMemoryWarning(${1:UIApplication})" },{ "trigger": "printInteractionController \t func unknown -> UIPrintPaper
" , "contents": "printInteractionController(${1:UIPrintInteractionController}, choosePaper:${2:[UIPrintPaper]})" },{ "trigger": "sizeForChildContentContainer \t func UIViewController -> CGSize
" , "contents": "sizeForChildContentContainer(${1:UIContentContainer}, withParentContainerSize:${2:CGSize})" },{ "trigger": "constraintLessThanOrEqualToAnchor \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintLessThanOrEqualToAnchor(${1:NSLayoutDimension!}, multiplier:${2:CGFloat}, constant:${3:CGFloat})" },{ "trigger": "NSStringFromCGSize \t func NSTextAlignment -> String
" , "contents": "NSStringFromCGSize(${1:CGSize})" },{ "trigger": "contentPositionAdjustmentForSegmentType \t func UISegmentedControl -> UIOffset
" , "contents": "contentPositionAdjustmentForSegmentType(${1:UISegmentedControlSegment}, barMetrics:${2:UIBarMetrics})" },{ "trigger": "interactionControllerForDismissal \t func unknown -> UIViewControllerInteractiveTransitioning?
" , "contents": "interactionControllerForDismissal(${1:UIViewControllerAnimatedTransitioning})" },{ "trigger": "tableView \t func UITableViewController -> Int
" , "contents": "tableView(${1:UITableView}, sectionForSectionIndexTitle:${2:String}, atIndex:${3:Int})" },{ "trigger": "enabledRemoteNotificationTypes \t func UIApplication -> UIRemoteNotificationType
" , "contents": "enabledRemoteNotificationTypes(${1:})" },{ "trigger": "textViewDidBeginEditing \t func unknown -> void" , "contents": "textViewDidBeginEditing(${1:UITextView})" },{ "trigger": "accelerometer \t func unknown -> void" , "contents": "accelerometer(${1:UIAccelerometer}, didAccelerate:${2:UIAcceleration})" },{ "trigger": "imageWithTraitCollection \t func UIImageAsset -> UIImage
" , "contents": "imageWithTraitCollection(${1:UITraitCollection})" },{ "trigger": "isAnimated \t func unknown -> BOOL
" , "contents": "isAnimated(${1:})" },{ "trigger": "replaceRange \t func unknown -> void" , "contents": "replaceRange(${1:UITextRange}, withText:${2:String})" },{ "trigger": "characterOffsetOfPosition \t func unknown -> Int
" , "contents": "characterOffsetOfPosition(${1:UITextPosition}, withinRange:${2:UITextRange})" },{ "trigger": "searchDisplayController \t func unknown -> BOOL
" , "contents": "searchDisplayController(${1:UISearchDisplayController}, shouldReloadTableForSearchScope:${2:Int})" },{ "trigger": "drawAtPoint \t func UIImage -> void" , "contents": "drawAtPoint(${1:CGPoint})" },{ "trigger": "tableView \t func UITableViewController -> CGFloat
" , "contents": "tableView(${1:UITableView}, heightForFooterInSection:${2:Int})" },{ "trigger": "actionSheet \t func unknown -> void" , "contents": "actionSheet(${1:UIActionSheet}, clickedButtonAtIndex:${2:Int})" },{ "trigger": "UIGraphicsBeginPDFPage \t func UIGravityBehavior -> void" , "contents": "UIGraphicsBeginPDFPage(${1:})" },{ "trigger": "numberOfRowsInComponent \t func UIPickerView -> Int
" , "contents": "numberOfRowsInComponent(${1:Int})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didHighlightRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "titleForState \t func UIButton -> String?
" , "contents": "titleForState(${1:UIControlState})" },{ "trigger": "UIFloatRangeIsEqualToRange \t func UIFocusAnimationCoordinator -> BOOL
" , "contents": "UIFloatRangeIsEqualToRange(${1:UIFloatRange}, _:${2:UIFloatRange})" },{ "trigger": "webViewDidStartLoad \t func unknown -> void" , "contents": "webViewDidStartLoad(${1:UIWebView})" },{ "trigger": "targetContentOffsetForProposedContentOffset \t func UICollectionViewLayout -> CGPoint
" , "contents": "targetContentOffsetForProposedContentOffset(${1:CGPoint})" },{ "trigger": "updateConstraints \t func UIView -> void" , "contents": "updateConstraints(${1:})" },{ "trigger": "frameForAlignmentRect \t func UIView -> CGRect
" , "contents": "frameForAlignmentRect(${1:CGRect})" },{ "trigger": "dequeueReusableSupplementaryViewOfKind \t func UICollectionView -> UICollectionReusableView
" , "contents": "dequeueReusableSupplementaryViewOfKind(${1:String}, withReuseIdentifier:${2:String}, forIndexPath:${3:NSIndexPath})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didSelectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "viewWillTransitionToSize \t func UIPresentationController -> void" , "contents": "viewWillTransitionToSize(${1:CGSize}, withTransitionCoordinator:${2:UIViewControllerTransitionCoordinator})" },{ "trigger": "startAnimating \t func UIImageView -> void" , "contents": "startAnimating(${1:})" },{ "trigger": "tableView \t func unknown -> UITableViewCell
" , "contents": "tableView(${1:UITableView}, cellForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "tabBarControllerPreferredInterfaceOrientationForPresentation \t func unknown -> UIInterfaceOrientation
" , "contents": "tabBarControllerPreferredInterfaceOrientationForPresentation(${1:UITabBarController})" },{ "trigger": "layoutManager \t func unknown -> BOOL
" , "contents": "layoutManager(${1:NSLayoutManager}, shouldBreakLineByHyphenatingBeforeCharacterAtIndex:${2:Int})" },{ "trigger": "setValue \t func UISlider -> void" , "contents": "setValue(${1:Float}, animated:${2:BOOL})" },{ "trigger": "scrollViewDidScrollToTop \t func UIWebView -> void" , "contents": "scrollViewDidScrollToTop(${1:UIScrollView})" },{ "trigger": "decodeCGSizeForKey \t func NSCoder -> CGSize
" , "contents": "decodeCGSizeForKey(${1:String})" },{ "trigger": "glyphAtIndex \t func NSLayoutManager -> CGGlyph
" , "contents": "glyphAtIndex(${1:Int}, isValidIndex:${2:UnsafeMutablePointer<BOOL>})" },{ "trigger": "UIAccessibilityPostNotification \t func unknown -> void" , "contents": "UIAccessibilityPostNotification(${1:UIAccessibilityNotifications}, _:${2:AnyObject?})" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, didEndDisplayingCell:${2:UICollectionViewCell}, forItemAtIndexPath:${3:NSIndexPath})" },{ "trigger": "tableView \t func unknown -> CGFloat
" , "contents": "tableView(${1:UITableView}, heightForHeaderInSection:${2:Int})" },{ "trigger": "ensureLayoutForBoundingRect \t func NSLayoutManager -> void" , "contents": "ensureLayoutForBoundingRect(${1:CGRect}, inTextContainer:${2:NSTextContainer})" },{ "trigger": "dequeueReusableHeaderFooterViewWithIdentifier \t func UITableView -> UITableViewHeaderFooterView?
" , "contents": "dequeueReusableHeaderFooterViewWithIdentifier(${1:String})" },{ "trigger": "initiallyInteractive \t func unknown -> BOOL
" , "contents": "initiallyInteractive(${1:})" },{ "trigger": "videoEditorController \t func unknown -> void" , "contents": "videoEditorController(${1:UIVideoEditorController}, didSaveEditedVideoToPath:${2:String})" },{ "trigger": "tableView \t func UITableViewController -> CGFloat
" , "contents": "tableView(${1:UITableView}, estimatedHeightForHeaderInSection:${2:Int})" },{ "trigger": "scrollViewWillBeginZooming \t func UICollectionViewController -> void" , "contents": "scrollViewWillBeginZooming(${1:UIScrollView}, withView:${2:UIView?})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, accessoryButtonTappedForRowWithIndexPath:${2:NSIndexPath})" },{ "trigger": "providerIdentifier \t func NSFileProviderExtension -> String
" , "contents": "providerIdentifier(${1:})" },{ "trigger": "finishedHandlingError \t func UIDocument -> void" , "contents": "finishedHandlingError(${1:NSError}, recovered:${2:BOOL})" },{ "trigger": "presentedSubitemAtURL \t func UIDocument -> void" , "contents": "presentedSubitemAtURL(${1:NSURL}, didGainVersion:${2:NSFileVersion})" },{ "trigger": "searchBarTextDidBeginEditing \t func unknown -> void" , "contents": "searchBarTextDidBeginEditing(${1:UISearchBar})" },{ "trigger": "copyWithZone \t func UIApplicationShortcutIcon -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "lineFragmentRectForProposedRect \t func NSTextContainer -> CGRect
" , "contents": "lineFragmentRectForProposedRect(${1:CGRect}, atIndex:${2:Int}, writingDirection:${3:NSWritingDirection}, remainingRect:${4:UnsafeMutablePointer<CGRect>})" },{ "trigger": "beginRefreshing \t func UIRefreshControl -> void" , "contents": "beginRefreshing(${1:})" },{ "trigger": "tableView \t func unknown -> NSIndexPath?
" , "contents": "tableView(${1:UITableView}, willSelectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "positionWithinRange \t func unknown -> UITextPosition?
" , "contents": "positionWithinRange(${1:UITextRange}, farthestInDirection:${2:UITextLayoutDirection})" },{ "trigger": "prepareWithActivityItems \t func UIActivity -> void" , "contents": "prepareWithActivityItems(${1:[AnyObject]})" },{ "trigger": "backgroundImageForToolbarPosition \t func UIToolbar -> UIImage?
" , "contents": "backgroundImageForToolbarPosition(${1:UIBarPosition}, barMetrics:${2:UIBarMetrics})" },{ "trigger": "ensureAttributesAreFixedInRange \t func NSTextStorage -> void" , "contents": "ensureAttributesAreFixedInRange(${1:NSRange})" },{ "trigger": "presentationTransitionDidEnd \t func UIPresentationController -> void" , "contents": "presentationTransitionDidEnd(${1:BOOL})" },{ "trigger": "scrollViewShouldScrollToTop \t func UITableViewController -> BOOL
" , "contents": "scrollViewShouldScrollToTop(${1:UIScrollView})" },{ "trigger": "enableEditing \t func UIDocument -> void" , "contents": "enableEditing(${1:})" },{ "trigger": "tabBar \t func UITabBarController -> void" , "contents": "tabBar(${1:UITabBar}, didBeginCustomizingItems:${2:[UITabBarItem]})" },{ "trigger": "UIAccessibilityIsReduceMotionEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsReduceMotionEnabled(${1:})" },{ "trigger": "endFloatingCursor \t func UITextView -> void" , "contents": "endFloatingCursor(${1:})" },{ "trigger": "endBackgroundTask \t func UIApplication -> void" , "contents": "endBackgroundTask(${1:UIBackgroundTaskIdentifier})" },{ "trigger": "willTransitionToState \t func UITableViewCell -> void" , "contents": "willTransitionToState(${1:UITableViewCellStateMask})" },{ "trigger": "setBackgroundImage \t func UIToolbar -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forToolbarPosition:${2:UIBarPosition}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "setNeedsDisplay \t func UIView -> void" , "contents": "setNeedsDisplay(${1:})" },{ "trigger": "tabBarController \t func unknown -> void" , "contents": "tabBarController(${1:UITabBarController}, willEndCustomizingViewControllers:${2:[UIViewController]}, changed:${3:BOOL})" },{ "trigger": "primaryViewControllerForExpandingSplitViewController \t func unknown -> UIViewController?
" , "contents": "primaryViewControllerForExpandingSplitViewController(${1:UISplitViewController})" },{ "trigger": "pointInside \t func UIView -> BOOL
" , "contents": "pointInside(${1:CGPoint}, withEvent:${2:UIEvent?})" },{ "trigger": "tableView \t func UITableViewController -> String?
" , "contents": "tableView(${1:UITableView}, titleForHeaderInSection:${2:Int})" },{ "trigger": "willMoveToSuperview \t func UIView -> void" , "contents": "willMoveToSuperview(${1:UIView?})" },{ "trigger": "CGPointValue \t func NSValue -> CGPoint
" , "contents": "CGPointValue(${1:})" },{ "trigger": "shouldAutorotateToInterfaceOrientation \t func UIViewController -> BOOL
" , "contents": "shouldAutorotateToInterfaceOrientation(${1:UIInterfaceOrientation})" },{ "trigger": "textContainerForGlyphAtIndex \t func NSLayoutManager -> NSTextContainer?
" , "contents": "textContainerForGlyphAtIndex(${1:Int}, effectiveRange:${2:NSRangePointer})" },{ "trigger": "characterRangeForGlyphRange \t func NSLayoutManager -> NSRange
" , "contents": "characterRangeForGlyphRange(${1:NSRange}, actualGlyphRange:${2:NSRangePointer})" },{ "trigger": "UIEdgeInsetsMake \t func UIEvent -> UIEdgeInsets
" , "contents": "UIEdgeInsetsMake(${1:CGFloat}, _:${2:CGFloat}, _:${3:CGFloat}, _:${4:CGFloat})" },{ "trigger": "convertRect \t func UIWindow -> CGRect
" , "contents": "convertRect(${1:CGRect}, toWindow:${2:UIWindow?})" },{ "trigger": "addOptionWithTitle \t func UIDocumentMenuViewController -> Void
" , "contents": "addOptionWithTitle(${1:String}, image:${2:UIImage?}, order:${3:UIDocumentMenuOrder}, handler:${4: -> Void})" },{ "trigger": "deleteRowsAtIndexPaths \t func UITableView -> void" , "contents": "deleteRowsAtIndexPaths(${1:[NSIndexPath]}, withRowAnimation:${2:UITableViewRowAnimation})" },{ "trigger": "addLineToPoint \t func UIBezierPath -> void" , "contents": "addLineToPoint(${1:CGPoint})" },{ "trigger": "addGestureRecognizer \t func UIView -> void" , "contents": "addGestureRecognizer(${1:UIGestureRecognizer})" },{ "trigger": "dynamicAnimatorWillResume \t func unknown -> void" , "contents": "dynamicAnimatorWillResume(${1:UIDynamicAnimator})" },{ "trigger": "textRectForBounds \t func UILabel -> CGRect
" , "contents": "textRectForBounds(${1:CGRect}, limitedToNumberOfLines:${2:Int})" },{ "trigger": "pageViewController \t func unknown -> UIViewController?
" , "contents": "pageViewController(${1:UIPageViewController}, viewControllerAfterViewController:${2:UIViewController})" },{ "trigger": "popoverPresentationController \t func unknown -> void" , "contents": "popoverPresentationController(${1:UIPopoverPresentationController}, willRepositionPopoverToRect:${2:UnsafeMutablePointer<CGRect>}, inView:${3:AutoreleasingUnsafeMutablePointer<UIView?>})" },{ "trigger": "tableView \t func unknown -> NSIndexPath
" , "contents": "tableView(${1:UITableView}, targetIndexPathForMoveFromRowAtIndexPath:${2:NSIndexPath}, toProposedIndexPath:${3:NSIndexPath})" },{ "trigger": "sendSubviewToBack \t func UIView -> void" , "contents": "sendSubviewToBack(${1:UIView})" },{ "trigger": "scrollViewWillEndDragging \t func UIWebView -> void" , "contents": "scrollViewWillEndDragging(${1:UIScrollView}, withVelocity:${2:CGPoint}, targetContentOffset:${3:UnsafeMutablePointer<CGPoint>})" },{ "trigger": "collectionView \t func unknown -> UICollectionViewCell
" , "contents": "collectionView(${1:UICollectionView}, cellForItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIGraphicsBeginPDFPageWithInfo \t func UIGravityBehavior -> void" , "contents": "UIGraphicsBeginPDFPageWithInfo(${1:CGRect}, _:${2:[NSObject })" },{ "trigger": "setTitleVerticalPositionAdjustment \t func UINavigationBar -> void" , "contents": "setTitleVerticalPositionAdjustment(${1:CGFloat}, forBarMetrics:${2:UIBarMetrics})" },{ "trigger": "viewDidUnload \t func UIViewController -> void" , "contents": "viewDidUnload(${1:})" },{ "trigger": "isRegisteredForRemoteNotifications \t func UIApplication -> BOOL
" , "contents": "isRegisteredForRemoteNotifications(${1:})" },{ "trigger": "CGAffineTransformValue \t func NSValue -> CGAffineTransform
" , "contents": "CGAffineTransformValue(${1:})" },{ "trigger": "getLineFragmentInsertionPointsForCharacterAtIndex \t func NSLayoutManager -> Int
" , "contents": "getLineFragmentInsertionPointsForCharacterAtIndex(${1:Int}, alternatePositions:${2:BOOL}, inDisplayOrder:${3:BOOL}, positions:${4:UnsafeMutablePointer<CGFloat>}, characterIndexes:${5:UnsafeMutablePointer<Int>})" },{ "trigger": "readFromData \t func NSMutableAttributedString -> void" , "contents": "readFromData(${1:NSData}, options:${2:[String }, documentAttributes:${3:AutoreleasingUnsafeMutablePointer<NSDictionary?>})" },{ "trigger": "convertRect \t func unknown -> CGRect
" , "contents": "convertRect(${1:CGRect}, toCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "decodeCGPointForKey \t func NSCoder -> CGPoint
" , "contents": "decodeCGPointForKey(${1:String})" },{ "trigger": "resignFirstResponder \t func UIResponder -> BOOL
" , "contents": "resignFirstResponder(${1:})" },{ "trigger": "rotatingHeaderView \t func UIViewController -> UIView?
" , "contents": "rotatingHeaderView(${1:})" },{ "trigger": "removeBoundaryWithIdentifier \t func UICollisionBehavior -> void" , "contents": "removeBoundaryWithIdentifier(${1:NSCopying})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, willChangeStatusBarFrame:${2:CGRect})" },{ "trigger": "pickerView \t func unknown -> NSAttributedString?
" , "contents": "pickerView(${1:UIPickerView}, attributedTitleForRow:${2:Int}, forComponent:${3:Int})" },{ "trigger": "shouldInvalidateLayoutForPreferredLayoutAttributes \t func UICollectionViewLayout -> BOOL
" , "contents": "shouldInvalidateLayoutForPreferredLayoutAttributes(${1:UICollectionViewLayoutAttributes}, withOriginalAttributes:${2:UICollectionViewLayoutAttributes})" },{ "trigger": "pressesChanged \t func UIResponder -> void" , "contents": "pressesChanged(${1:Set<UIPress>}, withEvent:${2:UIPressesEvent?})" },{ "trigger": "touchesMoved \t func UIResponder -> void" , "contents": "touchesMoved(${1:Set<UITouch>}, withEvent:${2:UIEvent?})" },{ "trigger": "setKeepAliveTimeout \t func UIApplication -> Void?" , "contents": "setKeepAliveTimeout(${1:NSTimeInterval}, handler:${2: -> Void?})" },{ "trigger": "setNotShownAttribute \t func NSLayoutManager -> void" , "contents": "setNotShownAttribute(${1:BOOL}, forGlyphAtIndex:${2:Int})" },{ "trigger": "addAction \t func UIAlertController -> void" , "contents": "addAction(${1:UIAlertAction})" },{ "trigger": "isEnabledForSegmentAtIndex \t func UISegmentedControl -> BOOL
" , "contents": "isEnabledForSegmentAtIndex(${1:Int})" },{ "trigger": "unregisterForPreviewingWithContext \t func UIViewController -> void" , "contents": "unregisterForPreviewingWithContext(${1:UIViewControllerPreviewing})" },{ "trigger": "documentInteractionController \t func unknown -> void" , "contents": "documentInteractionController(${1:UIDocumentInteractionController}, willBeginSendingToApplication:${2:String?})" },{ "trigger": "shouldUpdateFocusInContext \t func unknown -> BOOL
" , "contents": "shouldUpdateFocusInContext(${1:UIFocusUpdateContext})" },{ "trigger": "supplementaryViewForElementKind \t func UICollectionView -> UICollectionReusableView
" , "contents": "supplementaryViewForElementKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "dataFromRange \t func NSAttributedString -> NSData
" , "contents": "dataFromRange(${1:NSRange}, documentAttributes:${2:[String })" },{ "trigger": "invalidateLayoutForCharacterRange \t func NSLayoutManager -> void" , "contents": "invalidateLayoutForCharacterRange(${1:NSRange}, actualCharacterRange:${2:NSRangePointer})" },{ "trigger": "convertRect \t func UIWindow -> CGRect
" , "contents": "convertRect(${1:CGRect}, fromWindow:${2:UIWindow?})" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldUpdateFocusInContext:${2:UICollectionViewFocusUpdateContext})" },{ "trigger": "mutableCopyWithZone \t func UIApplicationShortcutItem -> AnyObject
" , "contents": "mutableCopyWithZone(${1:NSZone})" },{ "trigger": "registerClass \t func UICollectionView -> void" , "contents": "registerClass(${1:AnyClass?}, forCellWithReuseIdentifier:${2:String})" },{ "trigger": "comparePosition \t func UITextField -> NSComparisonResult
" , "contents": "comparePosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "valueForAnimatedKey \t func UICollectionViewTransitionLayout -> CGFloat
" , "contents": "valueForAnimatedKey(${1:String})" },{ "trigger": "setScopeBarButtonBackgroundImage \t func UISearchBar -> void" , "contents": "setScopeBarButtonBackgroundImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldSelectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "insertDictationResultPlaceholder \t func unknown -> AnyObject
" , "contents": "insertDictationResultPlaceholder(${1:})" },{ "trigger": "textInRange \t func UITextView -> String?
" , "contents": "textInRange(${1:UITextRange})" },{ "trigger": "tableView \t func UIPickerView -> String?
" , "contents": "tableView(${1:UITableView}, titleForHeaderInSection:${2:Int})" },{ "trigger": "tableView \t func unknown -> CGFloat
" , "contents": "tableView(${1:UITableView}, estimatedHeightForHeaderInSection:${2:Int})" },{ "trigger": "precisePreviousLocationInView \t func UITouch -> CGPoint
" , "contents": "precisePreviousLocationInView(${1:UIView?})" },{ "trigger": "scrollViewWillEndDragging \t func unknown -> void" , "contents": "scrollViewWillEndDragging(${1:UIScrollView}, withVelocity:${2:CGPoint}, targetContentOffset:${3:UnsafeMutablePointer<CGPoint>})" },{ "trigger": "pickerView \t func unknown -> String?
" , "contents": "pickerView(${1:UIPickerView}, titleForRow:${2:Int}, forComponent:${3:Int})" },{ "trigger": "navigationBar \t func unknown -> void" , "contents": "navigationBar(${1:UINavigationBar}, didPopItem:${2:UINavigationItem})" },{ "trigger": "selectAll \t func NSObject -> void" , "contents": "selectAll(${1:AnyObject?})" },{ "trigger": "isInteractive \t func unknown -> BOOL
" , "contents": "isInteractive(${1:})" },{ "trigger": "layoutMarginsDidChange \t func UIView -> void" , "contents": "layoutMarginsDidChange(${1:})" },{ "trigger": "presentationTransitionWillBegin \t func UIPresentationController -> void" , "contents": "presentationTransitionWillBegin(${1:})" },{ "trigger": "updateConstraintsIfNeeded \t func UIView -> void" , "contents": "updateConstraintsIfNeeded(${1:})" },{ "trigger": "preferredContentSizeDidChangeForChildContentContainer \t func unknown -> void" , "contents": "preferredContentSizeDidChangeForChildContentContainer(${1:UIContentContainer})" },{ "trigger": "replaceRange \t func UITextField -> void" , "contents": "replaceRange(${1:UITextRange}, withText:${2:String})" },{ "trigger": "setCollectionViewLayout \t func UICollectionView -> Void?
" , "contents": "setCollectionViewLayout(${1:UICollectionViewLayout}, animated:${2:BOOL}, completion:${3:BOOL -> Void?})" },{ "trigger": "characterIndexForGlyphAtIndex \t func NSLayoutManager -> Int
" , "contents": "characterIndexForGlyphAtIndex(${1:Int})" },{ "trigger": "pickerView \t func unknown -> UIView
" , "contents": "pickerView(${1:UIPickerView}, viewForRow:${2:Int}, forComponent:${3:Int}, reusingView:${4:UIView?})" },{ "trigger": "item \t func UIActivityItemProvider -> AnyObject
" , "contents": "item(${1:})" },{ "trigger": "characterRangeAtPoint \t func UITextField -> UITextRange?
" , "contents": "characterRangeAtPoint(${1:CGPoint})" },{ "trigger": "accessibilityPageContent \t func unknown -> String?
" , "contents": "accessibilityPageContent(${1:})" },{ "trigger": "scrollViewDidEndDecelerating \t func UIWebView -> void" , "contents": "scrollViewDidEndDecelerating(${1:UIScrollView})" },{ "trigger": "encodeWithCoder \t func UIView -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "closestPositionToPoint \t func UITextField -> UITextPosition?
" , "contents": "closestPositionToPoint(${1:CGPoint}, withinRange:${2:UITextRange})" },{ "trigger": "viewWillTransitionToSize \t func UIViewController -> void" , "contents": "viewWillTransitionToSize(${1:CGSize}, withTransitionCoordinator:${2:UIViewControllerTransitionCoordinator})" },{ "trigger": "positionFromPosition \t func unknown -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, inDirection:${2:UITextLayoutDirection}, offset:${3:Int})" },{ "trigger": "imageForSearchBarIcon \t func UISearchBar -> UIImage?
" , "contents": "imageForSearchBarIcon(${1:UISearchBarIcon}, state:${2:UIControlState})" },{ "trigger": "tableView \t func UIPickerView -> void" , "contents": "tableView(${1:UITableView}, moveRowAtIndexPath:${2:NSIndexPath}, toIndexPath:${3:NSIndexPath})" },{ "trigger": "frameOfPresentedViewInContainerView \t func UIPresentationController -> CGRect
" , "contents": "frameOfPresentedViewInContainerView(${1:})" },{ "trigger": "addPrintFormatter \t func UIPrintPageRenderer -> void" , "contents": "addPrintFormatter(${1:UIPrintFormatter}, startingAtPageAtIndex:${2:Int})" },{ "trigger": "touchesEnded \t func UIResponder -> void" , "contents": "touchesEnded(${1:Set<UITouch>}, withEvent:${2:UIEvent?})" },{ "trigger": "scrollViewWillBeginZooming \t func UIWebView -> void" , "contents": "scrollViewWillBeginZooming(${1:UIScrollView}, withView:${2:UIView?})" },{ "trigger": "copyWithZone \t func UILexicon -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "setMaximumTrackImage \t func UISlider -> void" , "contents": "setMaximumTrackImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "additionalContentForURL \t func UIManagedDocument -> AnyObject
" , "contents": "additionalContentForURL(${1:NSURL})" },{ "trigger": "prepareForTransitionToLayout \t func UICollectionViewLayout -> void" , "contents": "prepareForTransitionToLayout(${1:UICollectionViewLayout})" },{ "trigger": "linearVelocityForItem \t func UIDynamicItemBehavior -> CGPoint
" , "contents": "linearVelocityForItem(${1:UIDynamicItem})" },{ "trigger": "tableView \t func UITableViewController -> Int
" , "contents": "tableView(${1:UITableView}, indentationLevelForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "fontDescriptorWithSize \t func UIFontDescriptor -> UIFontDescriptor
" , "contents": "fontDescriptorWithSize(${1:CGFloat})" },{ "trigger": "convertRect \t func UIView -> CGRect
" , "contents": "convertRect(${1:CGRect}, fromView:${2:UIView?})" },{ "trigger": "addQuadCurveToPoint \t func UIBezierPath -> void" , "contents": "addQuadCurveToPoint(${1:CGPoint}, controlPoint:${2:CGPoint})" },{ "trigger": "ignoredWords \t func UITextChecker -> [AnyObject]?
" , "contents": "ignoredWords(${1:})" },{ "trigger": "textFieldAtIndex \t func UIAlertView -> UITextField?
" , "contents": "textFieldAtIndex(${1:Int})" },{ "trigger": "collectionViewContentSize \t func UICollectionViewLayout -> CGSize
" , "contents": "collectionViewContentSize(${1:})" },{ "trigger": "dequeueReusableCellWithIdentifier \t func UITableView -> UITableViewCell
" , "contents": "dequeueReusableCellWithIdentifier(${1:String}, forIndexPath:${2:NSIndexPath})" },{ "trigger": "scrollViewDidEndZooming \t func UITableViewController -> void" , "contents": "scrollViewDidEndZooming(${1:UIScrollView}, withView:${2:UIView?}, atScale:${3:CGFloat})" },{ "trigger": "dataForPasteboardType \t func UIPasteboard -> NSData?
" , "contents": "dataForPasteboardType(${1:String})" },{ "trigger": "removeLayoutManager \t func NSTextStorage -> void" , "contents": "removeLayoutManager(${1:NSLayoutManager})" },{ "trigger": "insertArrangedSubview \t func UIStackView -> void" , "contents": "insertArrangedSubview(${1:UIView}, atIndex:${2:Int})" },{ "trigger": "setFill \t func UIColor -> void" , "contents": "setFill(${1:})" },{ "trigger": "viewDidLayoutSubviews \t func UIViewController -> void" , "contents": "viewDidLayoutSubviews(${1:})" },{ "trigger": "setNeedsLayout \t func UIView -> void" , "contents": "setNeedsLayout(${1:})" },{ "trigger": "applicationFinishedRestoringState \t func UIViewController -> void" , "contents": "applicationFinishedRestoringState(${1:})" },{ "trigger": "indexPathForPreferredFocusedViewInTableView \t func unknown -> NSIndexPath?
" , "contents": "indexPathForPreferredFocusedViewInTableView(${1:UITableView})" },{ "trigger": "unregisterForRemoteNotifications \t func UIApplication -> void" , "contents": "unregisterForRemoteNotifications(${1:})" },{ "trigger": "drawPrintFormatter \t func UIPrintPageRenderer -> void" , "contents": "drawPrintFormatter(${1:UIPrintFormatter}, forPageAtIndex:${2:Int})" },{ "trigger": "closestPositionToPoint \t func UITextView -> UITextPosition?
" , "contents": "closestPositionToPoint(${1:CGPoint}, withinRange:${2:UITextRange})" },{ "trigger": "rectForSection \t func UITableView -> CGRect
" , "contents": "rectForSection(${1:Int})" },{ "trigger": "interactionControllerForPresentation \t func unknown -> UIViewControllerInteractiveTransitioning?
" , "contents": "interactionControllerForPresentation(${1:UIViewControllerAnimatedTransitioning})" },{ "trigger": "removeArrangedSubview \t func UIStackView -> void" , "contents": "removeArrangedSubview(${1:UIView})" },{ "trigger": "fontDescriptorByAddingAttributes \t func UIFontDescriptor -> UIFontDescriptor
" , "contents": "fontDescriptorByAddingAttributes(${1:[String })" },{ "trigger": "drawAtPoint \t func NSAttributedString -> void" , "contents": "drawAtPoint(${1:CGPoint})" },{ "trigger": "didMoveToWindow \t func UIView -> void" , "contents": "didMoveToWindow(${1:})" },{ "trigger": "UIAccessibilityIsVoiceOverRunning \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsVoiceOverRunning(${1:})" },{ "trigger": "characterOffsetOfPosition \t func UITextField -> Int
" , "contents": "characterOffsetOfPosition(${1:UITextPosition}, withinRange:${2:UITextRange})" },{ "trigger": "initialLayoutAttributesForAppearingSupplementaryElementOfKind \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "initialLayoutAttributesForAppearingSupplementaryElementOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, moveItemAtIndexPath:${2:NSIndexPath}, toIndexPath:${3:NSIndexPath})" },{ "trigger": "cut \t func NSObject -> void" , "contents": "cut(${1:AnyObject?})" },{ "trigger": "enumerateEnclosingRectsForGlyphRange \t func NSLayoutManager -> Void
" , "contents": "enumerateEnclosingRectsForGlyphRange(${1:NSRange}, withinSelectedGlyphRange:${2:NSRange}, inTextContainer:${3:NSTextContainer}, usingBlock:${4:CGRect}, UnsafeMutablePointer<BOOL>:${5:})" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, didUnhighlightItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "maximumTrackImageForState \t func UISlider -> UIImage?
" , "contents": "maximumTrackImageForState(${1:UIControlState})" },{ "trigger": "setIgnoredWords \t func UITextChecker -> void" , "contents": "setIgnoredWords(${1:[AnyObject]?})" },{ "trigger": "collectionView \t func unknown -> CGSize
" , "contents": "collectionView(${1:UICollectionView}, layout:${2:UICollectionViewLayout}, referenceSizeForFooterInSection:${3:Int})" },{ "trigger": "NSStringFromCGPoint \t func NSTextAlignment -> String
" , "contents": "NSStringFromCGPoint(${1:CGPoint})" },{ "trigger": "documentInteractionControllerDidDismissOptionsMenu \t func unknown -> void" , "contents": "documentInteractionControllerDidDismissOptionsMenu(${1:UIDocumentInteractionController})" },{ "trigger": "glyphIndexForCharacterAtIndex \t func NSLayoutManager -> Int
" , "contents": "glyphIndexForCharacterAtIndex(${1:Int})" },{ "trigger": "dismissalTransitionWillBegin \t func UIPresentationController -> void" , "contents": "dismissalTransitionWillBegin(${1:})" },{ "trigger": "alertView \t func unknown -> void" , "contents": "alertView(${1:UIAlertView}, clickedButtonAtIndex:${2:Int})" },{ "trigger": "searchBarTextDidEndEditing \t func unknown -> void" , "contents": "searchBarTextDidEndEditing(${1:UISearchBar})" },{ "trigger": "scrollViewWillBeginDragging \t func unknown -> void" , "contents": "scrollViewWillBeginDragging(${1:UIScrollView})" },{ "trigger": "endCustomizingAnimated \t func UITabBar -> BOOL
" , "contents": "endCustomizingAnimated(${1:BOOL})" },{ "trigger": "glyphRangeForCharacterRange \t func NSLayoutManager -> NSRange
" , "contents": "glyphRangeForCharacterRange(${1:NSRange}, actualCharacterRange:${2:NSRangePointer})" },{ "trigger": "containsTraitsInCollection \t func UITraitCollection -> BOOL
" , "contents": "containsTraitsInCollection(${1:UITraitCollection?})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didRegisterUserNotificationSettings:${2:UIUserNotificationSettings})" },{ "trigger": "printRect \t func UIPrintPaper -> CGRect
" , "contents": "printRect(${1:})" },{ "trigger": "accessibilityElementDidLoseFocus \t func NSObject -> void" , "contents": "accessibilityElementDidLoseFocus(${1:})" },{ "trigger": "traitCollectionDidChange \t func UIViewController -> void" , "contents": "traitCollectionDidChange(${1:UITraitCollection?})" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, didUpdateFocusInContext:${2:UICollectionViewFocusUpdateContext}, withAnimationCoordinator:${3:UIFocusAnimationCoordinator})" },{ "trigger": "NSStringFromUIEdgeInsets \t func NSTextAlignment -> String
" , "contents": "NSStringFromUIEdgeInsets(${1:UIEdgeInsets})" },{ "trigger": "indexPathsToInsertForSupplementaryViewOfKind \t func UICollectionViewLayout -> [NSIndexPath]
" , "contents": "indexPathsToInsertForSupplementaryViewOfKind(${1:String})" },{ "trigger": "indexPathsForRowsInRect \t func UITableView -> [NSIndexPath]?
" , "contents": "indexPathsForRowsInRect(${1:CGRect})" },{ "trigger": "finalizeAnimatedBoundsChange \t func UICollectionViewLayout -> void" , "contents": "finalizeAnimatedBoundsChange(${1:})" },{ "trigger": "shouldAutorotate \t func UIViewController -> BOOL
" , "contents": "shouldAutorotate(${1:})" },{ "trigger": "convertPoint \t func UIWindow -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, fromWindow:${2:UIWindow?})" },{ "trigger": "accessibilityPerformEscape \t func NSObject -> BOOL
" , "contents": "accessibilityPerformEscape(${1:})" },{ "trigger": "pushNavigationItem \t func UINavigationBar -> void" , "contents": "pushNavigationItem(${1:UINavigationItem}, animated:${2:BOOL})" },{ "trigger": "UIInterfaceOrientationIsPortrait \t func UIInterfaceOrientationMask -> BOOL
" , "contents": "UIInterfaceOrientationIsPortrait(${1:UIInterfaceOrientation})" },{ "trigger": "tableView \t func UIPickerView -> BOOL
" , "contents": "tableView(${1:UITableView}, canEditRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "encodeWithCoder \t func UIVisualEffect -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "allTouches \t func UIEvent -> Set UITouch ?
" , "contents": "allTouches(${1:})" },{ "trigger": "placeholderRectForBounds \t func UITextField -> CGRect
" , "contents": "placeholderRectForBounds(${1:CGRect})" },{ "trigger": "extendStateRestoration \t func UIApplication -> void" , "contents": "extendStateRestoration(${1:})" },{ "trigger": "viewWillLayoutSubviews \t func UIViewController -> void" , "contents": "viewWillLayoutSubviews(${1:})" },{ "trigger": "indexPathsToDeleteForDecorationViewOfKind \t func UICollectionViewLayout -> [NSIndexPath]
" , "contents": "indexPathsToDeleteForDecorationViewOfKind(${1:String})" },{ "trigger": "removeConstraints \t func UIView -> void" , "contents": "removeConstraints(${1:[NSLayoutConstraint]})" },{ "trigger": "bringSubviewToFront \t func UIView -> void" , "contents": "bringSubviewToFront(${1:UIView})" },{ "trigger": "drawWithRect \t func NSString -> void" , "contents": "drawWithRect(${1:CGRect}, options:${2:NSStringDrawingOptions}, attributes:${3:[String }, context:${4:NSStringDrawingContext?})" },{ "trigger": "preferredInterfaceOrientationForPresentation \t func UIViewController -> UIInterfaceOrientation
" , "contents": "preferredInterfaceOrientationForPresentation(${1:})" },{ "trigger": "sizeForNumberOfPages \t func UIPageControl -> CGSize
" , "contents": "sizeForNumberOfPages(${1:Int})" },{ "trigger": "indexPathForPreferredFocusedViewInTableView \t func UITableViewController -> NSIndexPath?
" , "contents": "indexPathForPreferredFocusedViewInTableView(${1:UITableView})" },{ "trigger": "UIImageJPEGRepresentation \t func UIImageOrientation -> NSData?
" , "contents": "UIImageJPEGRepresentation(${1:UIImage}, _:${2:CGFloat})" },{ "trigger": "UIApplicationMain \t func UIApplicationShortcutIcon -> Int32
" , "contents": "UIApplicationMain(${1:Int32}, _:${2:UnsafeMutablePointer<UnsafeMutablePointer<Int8>>}, _:${3:String?}, _:${4:String?})" },{ "trigger": "titleShadowColorForState \t func UIButton -> UIColor?
" , "contents": "titleShadowColorForState(${1:UIControlState})" },{ "trigger": "viewForZoomingInScrollView \t func UIWebView -> UIView?
" , "contents": "viewForZoomingInScrollView(${1:UIScrollView})" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, handleActionWithIdentifier:${2:String?}, forRemoteNotification:${3:[NSObject }, withResponseInfo:${4:[NSObject }, completionHandler:${5: -> Void})" },{ "trigger": "updateFocusIfNeeded \t func UIView -> void" , "contents": "updateFocusIfNeeded(${1:})" },{ "trigger": "dictionaryRepresentation \t func UIPrintInfo -> [NSObject" , "contents": "dictionaryRepresentation(${1:})" },{ "trigger": "isPosition \t func UITextInputStringTokenizer -> BOOL
" , "contents": "isPosition(${1:UITextPosition}, withinTextUnit:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "CGPointFromString \t func unknown -> CGPoint
" , "contents": "CGPointFromString(${1:String})" },{ "trigger": "prepareForInterfaceBuilder \t func NSObject -> void" , "contents": "prepareForInterfaceBuilder(${1:})" },{ "trigger": "drawAtPoint \t func NSString -> CGSize
" , "contents": "drawAtPoint(${1:CGPoint}, forWidth:${2:CGFloat}, withFont:${3:UIFont!}, lineBreakMode:${4:NSLineBreakMode})" },{ "trigger": "insertDictationResultPlaceholder \t func UITextField -> AnyObject
" , "contents": "insertDictationResultPlaceholder(${1:})" },{ "trigger": "configurePersistentStoreCoordinatorForURL \t func UIManagedDocument -> void" , "contents": "configurePersistentStoreCoordinatorForURL(${1:NSURL}, ofType:${2:String}, modelConfiguration:${3:String?}, storeOptions:${4:[NSObject })" },{ "trigger": "sizeWithFont \t func NSString -> CGSize
" , "contents": "sizeWithFont(${1:UIFont!})" },{ "trigger": "requestSupplementaryLexiconWithCompletion \t func UIInputViewController -> Void
" , "contents": "requestSupplementaryLexiconWithCompletion(${1:UILexicon -> Void})" },{ "trigger": "deselectItemAtIndexPath \t func UICollectionView -> void" , "contents": "deselectItemAtIndexPath(${1:NSIndexPath}, animated:${2:BOOL})" },{ "trigger": "touchesForGestureRecognizer \t func UIEvent -> Set UITouch ?
" , "contents": "touchesForGestureRecognizer(${1:UIGestureRecognizer})" },{ "trigger": "supportedInterfaceOrientations \t func UIViewController -> UIInterfaceOrientationMask
" , "contents": "supportedInterfaceOrientations(${1:})" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, didEndDisplayingSupplementaryView:${2:UICollectionReusableView}, forElementOfKind:${3:String}, atIndexPath:${4:NSIndexPath})" },{ "trigger": "copyWithZone \t func UIPrintInfo -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "startVideoCapture \t func UIImagePickerController -> BOOL
" , "contents": "startVideoCapture(${1:})" },{ "trigger": "addTabStop \t func NSMutableParagraphStyle -> void" , "contents": "addTabStop(${1:NSTextTab})" },{ "trigger": "addArcWithCenter \t func UIBezierPath -> void" , "contents": "addArcWithCenter(${1:CGPoint}, radius:${2:CGFloat}, startAngle:${3:CGFloat}, endAngle:${4:CGFloat}, clockwise:${5:BOOL})" },{ "trigger": "sendActionsForControlEvents \t func UIControl -> void" , "contents": "sendActionsForControlEvents(${1:UIControlEvents})" },{ "trigger": "setScopeBarButtonDividerImage \t func UISearchBar -> void" , "contents": "setScopeBarButtonDividerImage(${1:UIImage?}, forLeftSegmentState:${2:UIControlState}, rightSegmentState:${3:UIControlState})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, willBeginEditingRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "dictationRecordingDidEnd \t func UITextField -> void" , "contents": "dictationRecordingDidEnd(${1:})" },{ "trigger": "titlePositionAdjustmentForBarMetrics \t func UIBarButtonItem -> UIOffset
" , "contents": "titlePositionAdjustmentForBarMetrics(${1:UIBarMetrics})" },{ "trigger": "hasAmbiguousLayout \t func UIView -> BOOL
" , "contents": "hasAmbiguousLayout(${1:})" },{ "trigger": "textContainerChangedGeometry \t func NSLayoutManager -> void" , "contents": "textContainerChangedGeometry(${1:NSTextContainer})" },{ "trigger": "drawAtPoint \t func NSString -> CGSize
" , "contents": "drawAtPoint(${1:CGPoint}, forWidth:${2:CGFloat}, withFont:${3:UIFont!}, fontSize:${4:CGFloat}, lineBreakMode:${5:NSLineBreakMode}, baselineAdjustment:${6:UIBaselineAdjustment})" },{ "trigger": "printInteractionControllerDidPresentPrinterOptions \t func unknown -> void" , "contents": "printInteractionControllerDidPresentPrinterOptions(${1:UIPrintInteractionController})" },{ "trigger": "layoutAttributesForInteractivelyMovingItemAtIndexPath \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes
" , "contents": "layoutAttributesForInteractivelyMovingItemAtIndexPath(${1:NSIndexPath}, withTargetPosition:${2:CGPoint})" },{ "trigger": "encodeWithCoder \t func NSTextAttachment -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "increaseSize \t func NSObject -> void" , "contents": "increaseSize(${1:AnyObject?})" },{ "trigger": "encodeWithCoder \t func UIMotionEffect -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "presentedSubitemAtURL \t func UIDocument -> void" , "contents": "presentedSubitemAtURL(${1:NSURL}, didResolveConflictVersion:${2:NSFileVersion})" },{ "trigger": "reloadSections \t func UITableView -> void" , "contents": "reloadSections(${1:NSIndexSet}, withRowAnimation:${2:UITableViewRowAnimation})" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, didFinishLaunchingWithOptions:${2:[NSObject })" },{ "trigger": "collisionBehavior \t func unknown -> void" , "contents": "collisionBehavior(${1:UICollisionBehavior}, beganContactForItem:${2:UIDynamicItem}, withItem:${3:UIDynamicItem}, atPoint:${4:CGPoint})" },{ "trigger": "setStatusBarHidden \t func UIApplication -> void" , "contents": "setStatusBarHidden(${1:BOOL}, withAnimation:${2:UIStatusBarAnimation})" },{ "trigger": "removeItem \t func UIFieldBehavior -> void" , "contents": "removeItem(${1:UIDynamicItem})" },{ "trigger": "setLineFragmentRect \t func NSLayoutManager -> void" , "contents": "setLineFragmentRect(${1:CGRect}, forGlyphRange:${2:NSRange}, usedRect:${3:CGRect})" },{ "trigger": "actionSheet \t func UIDocumentInteractionController -> void" , "contents": "actionSheet(${1:UIActionSheet}, didDismissWithButtonIndex:${2:Int})" },{ "trigger": "printInteractionControllerWillDismissPrinterOptions \t func unknown -> void" , "contents": "printInteractionControllerWillDismissPrinterOptions(${1:UIPrintInteractionController})" },{ "trigger": "encodeWithCoder \t func UIImage -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "scrollViewDidScroll \t func UICollectionViewController -> void" , "contents": "scrollViewDidScroll(${1:UIScrollView})" },{ "trigger": "startInteractiveTransitionToCollectionViewLayout \t func UICollectionView -> UICollectionViewTransitionLayout
" , "contents": "startInteractiveTransitionToCollectionViewLayout(${1:UICollectionViewLayout}, completion:${2:UICollectionViewLayoutInteractiveTransitionCompletion?})" },{ "trigger": "removeItem \t func UIDynamicItemBehavior -> void" , "contents": "removeItem(${1:UIDynamicItem})" },{ "trigger": "navigationController \t func unknown -> void" , "contents": "navigationController(${1:UINavigationController}, didShowViewController:${2:UIViewController}, animated:${3:BOOL})" },{ "trigger": "numberOfSectionsInTableView \t func UIPickerView -> Int
" , "contents": "numberOfSectionsInTableView(${1:UITableView})" },{ "trigger": "searchDisplayControllerDidEndSearch \t func unknown -> void" , "contents": "searchDisplayControllerDidEndSearch(${1:UISearchDisplayController})" },{ "trigger": "reloadSections \t func UICollectionView -> void" , "contents": "reloadSections(${1:NSIndexSet})" },{ "trigger": "searchBarShouldBeginEditing \t func unknown -> BOOL
" , "contents": "searchBarShouldBeginEditing(${1:UISearchBar})" },{ "trigger": "tableView \t func unknown -> Int
" , "contents": "tableView(${1:UITableView}, indentationLevelForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, willDisplayCell:${2:UITableViewCell}, forRowAtIndexPath:${3:NSIndexPath})" },{ "trigger": "selectionRectsForRange \t func UITextField -> [AnyObject]
" , "contents": "selectionRectsForRange(${1:UITextRange})" },{ "trigger": "invalidateIntrinsicContentSize \t func UIView -> void" , "contents": "invalidateIntrinsicContentSize(${1:})" },{ "trigger": "tableView \t func unknown -> Int
" , "contents": "tableView(${1:UITableView}, sectionForSectionIndexTitle:${2:String}, atIndex:${3:Int})" },{ "trigger": "invalidateLayout \t func UICollectionViewLayout -> void" , "contents": "invalidateLayout(${1:})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didFailToRegisterForRemoteNotificationsWithError:${2:NSError})" },{ "trigger": "animationEnded \t func UISearchController -> void" , "contents": "animationEnded(${1:BOOL})" },{ "trigger": "selectionDidChange \t func UIInputViewController -> void" , "contents": "selectionDidChange(${1:UITextInput?})" },{ "trigger": "unmarkText \t func unknown -> void" , "contents": "unmarkText(${1:})" },{ "trigger": "delete \t func NSObject -> void" , "contents": "delete(${1:AnyObject?})" },{ "trigger": "collectionView \t func unknown -> CGSize
" , "contents": "collectionView(${1:UICollectionView}, layout:${2:UICollectionViewLayout}, sizeForItemAtIndexPath:${3:NSIndexPath})" },{ "trigger": "setSelected \t func UITableViewCell -> void" , "contents": "setSelected(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "showViewController \t func UISplitViewController -> void" , "contents": "showViewController(${1:UIViewController}, sender:${2:AnyObject?})" },{ "trigger": "selectRow \t func UIPickerView -> void" , "contents": "selectRow(${1:Int}, inComponent:${2:Int}, animated:${3:BOOL})" },{ "trigger": "initialLayoutAttributesForAppearingDecorationElementOfKind \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "initialLayoutAttributesForAppearingDecorationElementOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "UIAccessibilityIsReduceTransparencyEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsReduceTransparencyEnabled(${1:})" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, willDisplaySupplementaryView:${2:UICollectionReusableView}, forElementKind:${3:String}, atIndexPath:${4:NSIndexPath})" },{ "trigger": "setActive \t func UISearchDisplayController -> void" , "contents": "setActive(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "unmarkText \t func UITextField -> void" , "contents": "unmarkText(${1:})" },{ "trigger": "beginFloatingCursorAtPoint \t func UITextView -> void" , "contents": "beginFloatingCursorAtPoint(${1:CGPoint})" },{ "trigger": "invalidateItemsAtIndexPaths \t func UICollectionViewLayoutInvalidationContext -> void" , "contents": "invalidateItemsAtIndexPaths(${1:[NSIndexPath]})" },{ "trigger": "frameForDictationResultPlaceholder \t func UITextField -> CGRect
" , "contents": "frameForDictationResultPlaceholder(${1:AnyObject})" },{ "trigger": "isPosition \t func UITextInputStringTokenizer -> BOOL
" , "contents": "isPosition(${1:UITextPosition}, atBoundary:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "navigationBar \t func unknown -> BOOL
" , "contents": "navigationBar(${1:UINavigationBar}, shouldPushItem:${2:UINavigationItem})" },{ "trigger": "registerClass \t func UICollectionView -> void" , "contents": "registerClass(${1:AnyClass?}, forSupplementaryViewOfKind:${2:String}, withReuseIdentifier:${3:String})" },{ "trigger": "fontDescriptorWithFace \t func UIFontDescriptor -> UIFontDescriptor
" , "contents": "fontDescriptorWithFace(${1:String})" },{ "trigger": "applicationDidEnterBackground \t func unknown -> void" , "contents": "applicationDidEnterBackground(${1:UIApplication})" },{ "trigger": "updateValue \t func UICollectionViewTransitionLayout -> void" , "contents": "updateValue(${1:CGFloat}, forAnimatedKey:${2:String})" },{ "trigger": "firstUnlaidGlyphIndex \t func NSLayoutManager -> Int
" , "contents": "firstUnlaidGlyphIndex(${1:})" },{ "trigger": "activityViewControllerPlaceholderItem \t func unknown -> AnyObject
" , "contents": "activityViewControllerPlaceholderItem(${1:UIActivityViewController})" },{ "trigger": "setImage \t func UISearchBar -> void" , "contents": "setImage(${1:UIImage?}, forSearchBarIcon:${2:UISearchBarIcon}, state:${3:UIControlState})" },{ "trigger": "tabBarController \t func unknown -> void" , "contents": "tabBarController(${1:UITabBarController}, didEndCustomizingViewControllers:${2:[UIViewController]}, changed:${3:BOOL})" },{ "trigger": "hasText \t func UITextField -> BOOL
" , "contents": "hasText(${1:})" },{ "trigger": "firstRectForRange \t func UITextView -> CGRect
" , "contents": "firstRectForRange(${1:UITextRange})" },{ "trigger": "sendAction \t func UIControl -> void" , "contents": "sendAction(${1:Selector}, to:${2:AnyObject?}, forEvent:${3:UIEvent?})" },{ "trigger": "numberOfPages \t func UIPrintPageRenderer -> Int
" , "contents": "numberOfPages(${1:})" },{ "trigger": "presentationController \t func unknown -> UIViewController?
" , "contents": "presentationController(${1:UIPresentationController}, viewControllerForAdaptivePresentationStyle:${2:UIModalPresentationStyle})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didHighlightRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "didPresentActionSheet \t func unknown -> void" , "contents": "didPresentActionSheet(${1:UIActionSheet})" },{ "trigger": "loadHTMLString \t func UIWebView -> void" , "contents": "loadHTMLString(${1:String}, baseURL:${2:NSURL?})" },{ "trigger": "convertRect \t func unknown -> CGRect
" , "contents": "convertRect(${1:CGRect}, fromCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "gestureRecognizer \t func UITableViewCell -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldReceiveTouch:${2:UITouch})" },{ "trigger": "notifyWhenInteractionEndsUsingBlock \t func unknown -> Void
" , "contents": "notifyWhenInteractionEndsUsingBlock(${1:UIViewControllerTransitionCoordinatorContext -> Void})" },{ "trigger": "webView \t func unknown -> void" , "contents": "webView(${1:UIWebView}, didFailLoadWithError:${2:NSError?})" },{ "trigger": "caretRectForPosition \t func UITextField -> CGRect
" , "contents": "caretRectForPosition(${1:UITextPosition})" },{ "trigger": "encodeWithCoder \t func UILayoutGuide -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "makeKeyAndVisible \t func UIWindow -> void" , "contents": "makeKeyAndVisible(${1:})" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, willDisplayCell:${2:UICollectionViewCell}, forItemAtIndexPath:${3:NSIndexPath})" },{ "trigger": "tableView \t func unknown -> UIView?
" , "contents": "tableView(${1:UITableView}, viewForHeaderInSection:${2:Int})" },{ "trigger": "copyWithZone \t func UIUserNotificationAction -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "size \t func NSAttributedString -> CGSize
" , "contents": "size(${1:})" },{ "trigger": "drawContentForPageAtIndex \t func UIPrintPageRenderer -> void" , "contents": "drawContentForPageAtIndex(${1:Int}, inRect:${2:CGRect})" },{ "trigger": "popNavigationItemAnimated \t func UINavigationBar -> UINavigationItem?
" , "contents": "popNavigationItemAnimated(${1:BOOL})" },{ "trigger": "colorWithAlphaComponent \t func UIColor -> UIColor
" , "contents": "colorWithAlphaComponent(${1:CGFloat})" },{ "trigger": "fractionOfDistanceThroughGlyphForPoint \t func NSLayoutManager -> CGFloat
" , "contents": "fractionOfDistanceThroughGlyphForPoint(${1:CGPoint}, inTextContainer:${2:NSTextContainer})" },{ "trigger": "UIGraphicsEndPDFContext \t func UIGravityBehavior -> void" , "contents": "UIGraphicsEndPDFContext(${1:})" },{ "trigger": "headerViewForSection \t func UITableView -> UITableViewHeaderFooterView?
" , "contents": "headerViewForSection(${1:Int})" },{ "trigger": "setContentPositionAdjustment \t func UISegmentedControl -> void" , "contents": "setContentPositionAdjustment(${1:UIOffset}, forSegmentType:${2:UISegmentedControlSegment}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "setItems \t func UINavigationBar -> void" , "contents": "setItems(${1:[UINavigationItem]?}, animated:${2:BOOL})" },{ "trigger": "isValidGlyphIndex \t func NSLayoutManager -> BOOL
" , "contents": "isValidGlyphIndex(${1:Int})" },{ "trigger": "documentMenuWasCancelled \t func unknown -> void" , "contents": "documentMenuWasCancelled(${1:UIDocumentMenuViewController})" },{ "trigger": "positionFromPosition \t func unknown -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, toBoundary:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "collectionView \t func UICollectionViewController -> UICollectionViewCell
" , "contents": "collectionView(${1:UICollectionView}, cellForItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "unregisterImageWithTraitCollection \t func UIImageAsset -> void" , "contents": "unregisterImageWithTraitCollection(${1:UITraitCollection})" },{ "trigger": "viewForZoomingInScrollView \t func UICollectionViewController -> UIView?
" , "contents": "viewForZoomingInScrollView(${1:UIScrollView})" },{ "trigger": "searchFieldBackgroundImageForState \t func UISearchBar -> UIImage?
" , "contents": "searchFieldBackgroundImageForState(${1:UIControlState})" },{ "trigger": "backButtonTitlePositionAdjustmentForBarMetrics \t func UIBarButtonItem -> UIOffset
" , "contents": "backButtonTitlePositionAdjustmentForBarMetrics(${1:UIBarMetrics})" },{ "trigger": "minimumTrackImageForState \t func UISlider -> UIImage?
" , "contents": "minimumTrackImageForState(${1:UIControlState})" },{ "trigger": "playInputClick \t func UIDevice -> void" , "contents": "playInputClick(${1:})" },{ "trigger": "activityViewController \t func unknown -> String
" , "contents": "activityViewController(${1:UIActivityViewController}, subjectForActivityType:${2:String?})" },{ "trigger": "setAngle \t func UIGravityBehavior -> void" , "contents": "setAngle(${1:CGFloat}, magnitude:${2:CGFloat})" },{ "trigger": "textFieldShouldClear \t func unknown -> BOOL
" , "contents": "textFieldShouldClear(${1:UITextField})" },{ "trigger": "setOn \t func UISwitch -> void" , "contents": "setOn(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "resizableSnapshotViewFromRect \t func UIView -> UIView
" , "contents": "resizableSnapshotViewFromRect(${1:CGRect}, afterScreenUpdates:${2:BOOL}, withCapInsets:${3:UIEdgeInsets})" },{ "trigger": "removeAllBoundaries \t func UICollisionBehavior -> void" , "contents": "removeAllBoundaries(${1:})" },{ "trigger": "boundingRectForGlyphRange \t func NSLayoutManager -> CGRect
" , "contents": "boundingRectForGlyphRange(${1:NSRange}, inTextContainer:${2:NSTextContainer})" },{ "trigger": "willAnimateSecondHalfOfRotationFromInterfaceOrientation \t func UIViewController -> void" , "contents": "willAnimateSecondHalfOfRotationFromInterfaceOrientation(${1:UIInterfaceOrientation}, duration:${2:NSTimeInterval})" },{ "trigger": "printToPrinter \t func UIPrintInteractionController -> BOOL
" , "contents": "printToPrinter(${1:UIPrinter}, completionHandler:${2:UIPrintInteractionCompletionHandler?})" },{ "trigger": "sizeWithFont \t func NSString -> CGSize
" , "contents": "sizeWithFont(${1:UIFont!}, constrainedToSize:${2:CGSize}, lineBreakMode:${3:NSLineBreakMode})" },{ "trigger": "contentOffsetForSegmentAtIndex \t func UISegmentedControl -> CGSize
" , "contents": "contentOffsetForSegmentAtIndex(${1:Int})" },{ "trigger": "prepareForCollectionViewUpdates \t func UICollectionViewLayout -> void" , "contents": "prepareForCollectionViewUpdates(${1:[UICollectionViewUpdateItem]})" },{ "trigger": "setBackgroundImage \t func UIButton -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "endEditing \t func UIView -> BOOL
" , "contents": "endEditing(${1:BOOL})" },{ "trigger": "updateCurrentPageDisplay \t func UIPageControl -> void" , "contents": "updateCurrentPageDisplay(${1:})" },{ "trigger": "tableView \t func UITableViewController -> BOOL
" , "contents": "tableView(${1:UITableView}, canFocusRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "setTranslation \t func UIPanGestureRecognizer -> void" , "contents": "setTranslation(${1:CGPoint}, inView:${2:UIView?})" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, performAction:${2:Selector}, forItemAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "tableView \t func UITableViewController -> Int
" , "contents": "tableView(${1:UITableView}, numberOfRowsInSection:${2:Int})" },{ "trigger": "presentPopoverFromRect \t func UIPopoverController -> void" , "contents": "presentPopoverFromRect(${1:CGRect}, inView:${2:UIView}, permittedArrowDirections:${3:UIPopoverArrowDirection}, animated:${4:BOOL})" },{ "trigger": "presentedItemDidLoseVersion \t func UIDocument -> void" , "contents": "presentedItemDidLoseVersion(${1:NSFileVersion})" },{ "trigger": "activityViewController \t func UIActivityItemProvider -> UIImage?
" , "contents": "activityViewController(${1:UIActivityViewController}, thumbnailImageForActivityType:${2:String?}, suggestedSize:${3:CGSize})" },{ "trigger": "willRemoveSubview \t func UIView -> void" , "contents": "willRemoveSubview(${1:UIView})" },{ "trigger": "reloadSectionIndexTitles \t func UITableView -> void" , "contents": "reloadSectionIndexTitles(${1:})" },{ "trigger": "performActivity \t func UIActivity -> void" , "contents": "performActivity(${1:})" },{ "trigger": "printerPickerControllerDidPresent \t func unknown -> void" , "contents": "printerPickerControllerDidPresent(${1:UIPrinterPickerController})" },{ "trigger": "removeItem \t func UIPushBehavior -> void" , "contents": "removeItem(${1:UIDynamicItem})" },{ "trigger": "documentInteractionControllerViewControllerForPreview \t func unknown -> UIViewController
" , "contents": "documentInteractionControllerViewControllerForPreview(${1:UIDocumentInteractionController})" },{ "trigger": "translationInView \t func UIPanGestureRecognizer -> CGPoint
" , "contents": "translationInView(${1:UIView?})" },{ "trigger": "fixAttributesInRange \t func NSMutableAttributedString -> void" , "contents": "fixAttributesInRange(${1:NSRange})" },{ "trigger": "encodeWithCoder \t func NSLayoutManager -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "splitViewController \t func unknown -> void" , "contents": "splitViewController(${1:UISplitViewController}, willHideViewController:${2:UIViewController}, withBarButtonItem:${3:UIBarButtonItem}, forPopoverController:${4:UIPopoverController})" },{ "trigger": "positionWithinRange \t func UITextField -> UITextPosition?
" , "contents": "positionWithinRange(${1:UITextRange}, atCharacterOffset:${2:Int})" },{ "trigger": "textFieldDidBeginEditing \t func unknown -> void" , "contents": "textFieldDidBeginEditing(${1:UITextField})" },{ "trigger": "insertSubview \t func UIView -> void" , "contents": "insertSubview(${1:UIView}, aboveSubview:${2:UIView})" },{ "trigger": "layoutManager \t func unknown -> CGFloat
" , "contents": "layoutManager(${1:NSLayoutManager}, paragraphSpacingAfterGlyphAtIndex:${2:Int}, withProposedLineFragmentRect:${3:CGRect})" },{ "trigger": "beginInteractiveMovementForItemAtIndexPath \t func UICollectionView -> BOOL
" , "contents": "beginInteractiveMovementForItemAtIndexPath(${1:NSIndexPath})" },{ "trigger": "convertPoint \t func UIView -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, fromCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "perform \t func UIStoryboardSegue -> void" , "contents": "perform(${1:})" },{ "trigger": "containerView \t func unknown -> UIView?
" , "contents": "containerView(${1:})" },{ "trigger": "toggleUnderline \t func NSObject -> void" , "contents": "toggleUnderline(${1:AnyObject?})" },{ "trigger": "videoEditorControllerDidCancel \t func unknown -> void" , "contents": "videoEditorControllerDidCancel(${1:UIVideoEditorController})" },{ "trigger": "guessesForWordRange \t func UITextChecker -> [AnyObject]?
" , "contents": "guessesForWordRange(${1:NSRange}, inString:${2:String}, language:${3:String})" },{ "trigger": "addTarget \t func UIControl -> void" , "contents": "addTarget(${1:AnyObject?}, action:${2:Selector}, forControlEvents:${3:UIControlEvents})" },{ "trigger": "accessibilityAssistiveTechnologyFocusedIdentifiers \t func NSObject -> Set String ?
" , "contents": "accessibilityAssistiveTechnologyFocusedIdentifiers(${1:})" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, openURL:${2:NSURL}, sourceApplication:${3:String?}, annotation:${4:AnyObject})" },{ "trigger": "startAnimating \t func UIActivityIndicatorView -> void" , "contents": "startAnimating(${1:})" },{ "trigger": "tableView \t func UITableViewController -> BOOL
" , "contents": "tableView(${1:UITableView}, canPerformAction:${2:Selector}, forRowAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "encodeWithCoder \t func UIBarButtonItemGroup -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "layoutSubviews \t func UIView -> void" , "contents": "layoutSubviews(${1:})" },{ "trigger": "transitionCoordinator \t func UIViewController -> UIViewControllerTransitionCoordinator?
" , "contents": "transitionCoordinator(${1:})" },{ "trigger": "textInRange \t func unknown -> String?
" , "contents": "textInRange(${1:UITextRange})" },{ "trigger": "accessibilityElementIsFocused \t func NSObject -> BOOL
" , "contents": "accessibilityElementIsFocused(${1:})" },{ "trigger": "scrollViewDidZoom \t func unknown -> void" , "contents": "scrollViewDidZoom(${1:UIScrollView})" },{ "trigger": "ensureLayoutForGlyphRange \t func NSLayoutManager -> void" , "contents": "ensureLayoutForGlyphRange(${1:NSRange})" },{ "trigger": "motionCancelled \t func UIResponder -> void" , "contents": "motionCancelled(${1:UIEventSubtype}, withEvent:${2:UIEvent?})" },{ "trigger": "UIOffsetValue \t func NSValue -> UIOffset
" , "contents": "UIOffsetValue(${1:})" },{ "trigger": "NSTextAlignmentFromCTTextAlignment \t func NSTextAttachment -> NSTextAlignment
" , "contents": "NSTextAlignmentFromCTTextAlignment(${1:CTTextAlignment})" },{ "trigger": "willTransitionToTraitCollection \t func unknown -> void" , "contents": "willTransitionToTraitCollection(${1:UITraitCollection}, withTransitionCoordinator:${2:UIViewControllerTransitionCoordinator})" },{ "trigger": "accessibilityActivate \t func NSObject -> BOOL
" , "contents": "accessibilityActivate(${1:})" },{ "trigger": "imagePickerControllerDidCancel \t func unknown -> void" , "contents": "imagePickerControllerDidCancel(${1:UIImagePickerController})" },{ "trigger": "pickerView \t func unknown -> String?
" , "contents": "pickerView(${1:UIPickerView}, accessibilityLabelForComponent:${2:Int})" },{ "trigger": "previewingContext \t func unknown -> void" , "contents": "previewingContext(${1:UIViewControllerPreviewing}, commitViewController:${2:UIViewController})" },{ "trigger": "titleRectForContentRect \t func UIButton -> CGRect
" , "contents": "titleRectForContentRect(${1:CGRect})" },{ "trigger": "dictationRecognitionFailed \t func unknown -> void" , "contents": "dictationRecognitionFailed(${1:})" },{ "trigger": "endFloatingCursor \t func unknown -> void" , "contents": "endFloatingCursor(${1:})" },{ "trigger": "UIVideoAtPathIsCompatibleWithSavedPhotosAlbum \t func UIVideoEditorController -> BOOL
" , "contents": "UIVideoAtPathIsCompatibleWithSavedPhotosAlbum(${1:String})" },{ "trigger": "tableView \t func unknown -> NSIndexPath?
" , "contents": "tableView(${1:UITableView}, willDeselectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "dictationRecordingDidEnd \t func UITextView -> void" , "contents": "dictationRecordingDidEnd(${1:})" },{ "trigger": "addKeyCommand \t func UIViewController -> void" , "contents": "addKeyCommand(${1:UIKeyCommand})" },{ "trigger": "fontDescriptor \t func UIFont -> UIFontDescriptor
" , "contents": "fontDescriptor(${1:})" },{ "trigger": "isCancelled \t func unknown -> BOOL
" , "contents": "isCancelled(${1:})" },{ "trigger": "containsAttachmentsInRange \t func NSAttributedString -> BOOL
" , "contents": "containsAttachmentsInRange(${1:NSRange})" },{ "trigger": "percentComplete \t func unknown -> CGFloat
" , "contents": "percentComplete(${1:})" },{ "trigger": "actionSheetCancel \t func UIDocumentInteractionController -> void" , "contents": "actionSheetCancel(${1:UIActionSheet})" },{ "trigger": "pasteboardTypesForItemSet \t func UIPasteboard -> [AnyObject]?
" , "contents": "pasteboardTypesForItemSet(${1:NSIndexSet?})" },{ "trigger": "alertViewCancel \t func unknown -> void" , "contents": "alertViewCancel(${1:UIAlertView})" },{ "trigger": "animationEnded \t func unknown -> void" , "contents": "animationEnded(${1:BOOL})" },{ "trigger": "registerClass \t func UICollectionViewLayout -> void" , "contents": "registerClass(${1:AnyClass?}, forDecorationViewOfKind:${2:String})" },{ "trigger": "beginBackgroundTaskWithName \t func UIApplication -> Void?" , "contents": "beginBackgroundTaskWithName(${1:String?}, expirationHandler:${2: -> Void?})" },{ "trigger": "copyWithZone \t func NSTextTab -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "setProgress \t func UIProgressView -> void" , "contents": "setProgress(${1:Float}, animated:${2:BOOL})" },{ "trigger": "insertText \t func UITextField -> void" , "contents": "insertText(${1:String})" },{ "trigger": "willMoveToParentViewController \t func UIViewController -> void" , "contents": "willMoveToParentViewController(${1:UIViewController?})" },{ "trigger": "predictedTouchesForTouch \t func UIEvent -> [UITouch]?
" , "contents": "predictedTouchesForTouch(${1:UITouch})" },{ "trigger": "registerNib \t func UICollectionView -> void" , "contents": "registerNib(${1:UINib?}, forSupplementaryViewOfKind:${2:String}, withReuseIdentifier:${3:String})" },{ "trigger": "constraintLessThanOrEqualToConstant \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintLessThanOrEqualToConstant(${1:CGFloat})" },{ "trigger": "constraintEqualToAnchor \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintEqualToAnchor(${1:NSLayoutDimension!}, multiplier:${2:CGFloat})" },{ "trigger": "setTargetOffsetFromCenter \t func UIPushBehavior -> void" , "contents": "setTargetOffsetFromCenter(${1:UIOffset}, forItem:${2:UIDynamicItem})" },{ "trigger": "invalidateAttributesInRange \t func NSTextStorage -> void" , "contents": "invalidateAttributesInRange(${1:NSRange})" },{ "trigger": "openURL \t func UIApplication -> BOOL
" , "contents": "openURL(${1:NSURL})" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, canFocusRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "encodeWithCoder \t func UIUserNotificationCategory -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "targetViewControllerForAction \t func UIViewController -> UIViewController?
" , "contents": "targetViewControllerForAction(${1:Selector}, sender:${2:AnyObject?})" },{ "trigger": "willPresentAlertView \t func unknown -> void" , "contents": "willPresentAlertView(${1:UIAlertView})" },{ "trigger": "scrollViewDidEndZooming \t func UIWebView -> void" , "contents": "scrollViewDidEndZooming(${1:UIScrollView}, withView:${2:UIView?}, atScale:${3:CGFloat})" },{ "trigger": "presentedView \t func UIPresentationController -> UIView?
" , "contents": "presentedView(${1:})" },{ "trigger": "tableView \t func UITableViewController -> NSIndexPath?
" , "contents": "tableView(${1:UITableView}, willSelectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "updateChangeCountWithToken \t func UIDocument -> void" , "contents": "updateChangeCountWithToken(${1:AnyObject}, forSaveOperation:${2:UIDocumentSaveOperation})" },{ "trigger": "addItem \t func UIFieldBehavior -> void" , "contents": "addItem(${1:UIDynamicItem})" },{ "trigger": "convertPoint \t func unknown -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, toCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "finalizeLayoutTransition \t func UICollectionViewLayout -> void" , "contents": "finalizeLayoutTransition(${1:})" },{ "trigger": "finalLayoutAttributesForDisappearingItemAtIndexPath \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "finalLayoutAttributesForDisappearingItemAtIndexPath(${1:NSIndexPath})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didChangeStatusBarOrientation:${2:UIInterfaceOrientation})" },{ "trigger": "encodeWithCoder \t func UIKeyCommand -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "textStylingAtPosition \t func UITextView -> [String" , "contents": "textStylingAtPosition(${1:UITextPosition}, inDirection:${2:UITextStorageDirection})" },{ "trigger": "glyphIndexForPoint \t func NSLayoutManager -> Int
" , "contents": "glyphIndexForPoint(${1:CGPoint}, inTextContainer:${2:NSTextContainer}, fractionOfDistanceThroughGlyph:${3:UnsafeMutablePointer<CGFloat>})" },{ "trigger": "presentAnimated \t func UIPrinterPickerController -> BOOL
" , "contents": "presentAnimated(${1:BOOL}, completionHandler:${2:UIPrinterPickerCompletionHandler?})" },{ "trigger": "drawInRect \t func NSString -> CGSize
" , "contents": "drawInRect(${1:CGRect}, withFont:${2:UIFont!}, lineBreakMode:${3:NSLineBreakMode})" },{ "trigger": "textViewShouldBeginEditing \t func unknown -> BOOL
" , "contents": "textViewShouldBeginEditing(${1:UITextView})" },{ "trigger": "prepareForDrawingPages \t func UIPrintPageRenderer -> void" , "contents": "prepareForDrawingPages(${1:NSRange})" },{ "trigger": "tableView \t func UITableViewController -> NSIndexPath
" , "contents": "tableView(${1:UITableView}, targetIndexPathForMoveFromRowAtIndexPath:${2:NSIndexPath}, toProposedIndexPath:${3:NSIndexPath})" },{ "trigger": "gestureRecognizer \t func unknown -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldBeRequiredToFailByGestureRecognizer:${2:UIGestureRecognizer})" },{ "trigger": "removeAllSegments \t func UISegmentedControl -> void" , "contents": "removeAllSegments(${1:})" },{ "trigger": "drawAtPoint \t func NSString -> CGSize
" , "contents": "drawAtPoint(${1:CGPoint}, withFont:${2:UIFont!})" },{ "trigger": "splitViewController \t func unknown -> void" , "contents": "splitViewController(${1:UISplitViewController}, willShowViewController:${2:UIViewController}, invalidatingBarButtonItem:${3:UIBarButtonItem})" },{ "trigger": "allTargets \t func UIControl -> Set NSObject 
" , "contents": "allTargets(${1:})" },{ "trigger": "setBaseWritingDirection \t func UITextField -> void" , "contents": "setBaseWritingDirection(${1:UITextWritingDirection}, forRange:${2:UITextRange})" },{ "trigger": "canBecomeFirstResponder \t func UIResponder -> BOOL
" , "contents": "canBecomeFirstResponder(${1:})" },{ "trigger": "addBehavior \t func UIDynamicAnimator -> void" , "contents": "addBehavior(${1:UIDynamicBehavior})" },{ "trigger": "touchesShouldBegin \t func UIScrollView -> BOOL
" , "contents": "touchesShouldBegin(${1:Set<UITouch>}, withEvent:${2:UIEvent?}, inContentView:${3:UIView})" },{ "trigger": "sizeWithAttributes \t func NSString -> CGSize
" , "contents": "sizeWithAttributes(${1:[String })" },{ "trigger": "gestureRecognizer \t func unknown -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldRecognizeSimultaneouslyWithGestureRecognizer:${2:UIGestureRecognizer})" },{ "trigger": "caretRectForPosition \t func UITextView -> CGRect
" , "contents": "caretRectForPosition(${1:UITextPosition})" },{ "trigger": "decodeCGRectForKey \t func NSCoder -> CGRect
" , "contents": "decodeCGRectForKey(${1:String})" },{ "trigger": "scrollViewShouldScrollToTop \t func UICollectionViewController -> BOOL
" , "contents": "scrollViewShouldScrollToTop(${1:UIScrollView})" },{ "trigger": "scrollViewDidZoom \t func UITableViewController -> void" , "contents": "scrollViewDidZoom(${1:UIScrollView})" },{ "trigger": "closestPositionToPoint \t func UITextView -> UITextPosition?
" , "contents": "closestPositionToPoint(${1:CGPoint})" },{ "trigger": "accommodatePresentedSubitemDeletionAtURL \t func UIDocument -> Void
" , "contents": "accommodatePresentedSubitemDeletionAtURL(${1:NSURL}, completionHandler:${2:NSError? -> Void})" },{ "trigger": "registerUserNotificationSettings \t func UIApplication -> void" , "contents": "registerUserNotificationSettings(${1:UIUserNotificationSettings})" },{ "trigger": "tableView \t func UITableViewController -> String?
" , "contents": "tableView(${1:UITableView}, titleForDeleteConfirmationButtonForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "sortedArrayFromArray \t func UILocalizedIndexedCollation -> [AnyObject]
" , "contents": "sortedArrayFromArray(${1:[AnyObject]}, collationStringSelector:${2:Selector})" },{ "trigger": "relinquishPresentedItemToWriter \t func UIDocument -> Void?" , "contents": "relinquishPresentedItemToWriter(${1: -> Void? -> Void})" },{ "trigger": "pageViewController \t func unknown -> void" , "contents": "pageViewController(${1:UIPageViewController}, willTransitionToViewControllers:${2:[UIViewController]})" },{ "trigger": "UIGraphicsBeginImageContext \t func UIGravityBehavior -> void" , "contents": "UIGraphicsBeginImageContext(${1:CGSize})" },{ "trigger": "endUpdates \t func UITableView -> void" , "contents": "endUpdates(${1:})" },{ "trigger": "shadowImageForToolbarPosition \t func UIToolbar -> UIImage?
" , "contents": "shadowImageForToolbarPosition(${1:UIBarPosition})" },{ "trigger": "activityViewController \t func unknown -> UIImage?
" , "contents": "activityViewController(${1:UIActivityViewController}, thumbnailImageForActivityType:${2:String?}, suggestedSize:${3:CGSize})" },{ "trigger": "glyphAtIndex \t func NSLayoutManager -> CGGlyph
" , "contents": "glyphAtIndex(${1:Int})" },{ "trigger": "shouldChangeTextInRange \t func UITextView -> BOOL
" , "contents": "shouldChangeTextInRange(${1:UITextRange}, replacementText:${2:String})" },{ "trigger": "decodeCGAffineTransformForKey \t func NSCoder -> CGAffineTransform
" , "contents": "decodeCGAffineTransformForKey(${1:String})" },{ "trigger": "dismissPopoverAnimated \t func UIPopoverController -> void" , "contents": "dismissPopoverAnimated(${1:BOOL})" },{ "trigger": "targetForAction \t func UIResponder -> AnyObject?
" , "contents": "targetForAction(${1:Selector}, withSender:${2:AnyObject?})" },{ "trigger": "willTransitionFromLayout \t func UICollectionReusableView -> void" , "contents": "willTransitionFromLayout(${1:UICollectionViewLayout}, toLayout:${2:UICollectionViewLayout})" },{ "trigger": "searchBarShouldEndEditing \t func unknown -> BOOL
" , "contents": "searchBarShouldEndEditing(${1:UISearchBar})" },{ "trigger": "CGGlyphAtIndex \t func NSLayoutManager -> CGGlyph
" , "contents": "CGGlyphAtIndex(${1:Int}, isValidIndex:${2:UnsafeMutablePointer<BOOL>})" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldHighlightRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "targetIndexPathForInteractivelyMovingItem \t func UICollectionViewLayout -> NSIndexPath
" , "contents": "targetIndexPathForInteractivelyMovingItem(${1:NSIndexPath}, withPosition:${2:CGPoint})" },{ "trigger": "documentStorageURL \t func NSFileProviderExtension -> NSURL
" , "contents": "documentStorageURL(${1:})" },{ "trigger": "imageWithRenderingMode \t func UIImage -> UIImage
" , "contents": "imageWithRenderingMode(${1:UIImageRenderingMode})" },{ "trigger": "isAnimating \t func UIImageView -> BOOL
" , "contents": "isAnimating(${1:})" },{ "trigger": "boundingRectWithSize \t func NSAttributedString -> CGRect
" , "contents": "boundingRectWithSize(${1:CGSize}, options:${2:NSStringDrawingOptions}, context:${3:NSStringDrawingContext?})" },{ "trigger": "beginIgnoringInteractionEvents \t func UIApplication -> void" , "contents": "beginIgnoringInteractionEvents(${1:})" },{ "trigger": "finishInteractiveTransition \t func UICollectionView -> void" , "contents": "finishInteractiveTransition(${1:})" },{ "trigger": "presentedItemDidGainVersion \t func UIDocument -> void" , "contents": "presentedItemDidGainVersion(${1:NSFileVersion})" },{ "trigger": "UIRectFill \t func UIReferenceLibraryViewController -> void" , "contents": "UIRectFill(${1:CGRect})" },{ "trigger": "scrollRectToVisible \t func UIScrollView -> void" , "contents": "scrollRectToVisible(${1:CGRect}, animated:${2:BOOL})" },{ "trigger": "splitViewControllerPreferredInterfaceOrientationForPresentation \t func unknown -> UIInterfaceOrientation
" , "contents": "splitViewControllerPreferredInterfaceOrientationForPresentation(${1:UISplitViewController})" },{ "trigger": "motionBegan \t func UIResponder -> void" , "contents": "motionBegan(${1:UIEventSubtype}, withEvent:${2:UIEvent?})" },{ "trigger": "drawPlaceholderInRect \t func UITextField -> void" , "contents": "drawPlaceholderInRect(${1:CGRect})" },{ "trigger": "takePicture \t func UIImagePickerController -> void" , "contents": "takePicture(${1:})" },{ "trigger": "indexPathsToInsertForDecorationViewOfKind \t func UICollectionViewLayout -> [NSIndexPath]
" , "contents": "indexPathsToInsertForDecorationViewOfKind(${1:String})" },{ "trigger": "canPerformWithActivityItems \t func UIActivity -> BOOL
" , "contents": "canPerformWithActivityItems(${1:[AnyObject]})" },{ "trigger": "CGAffineTransformFromString \t func unknown -> CGAffineTransform
" , "contents": "CGAffineTransformFromString(${1:String})" },{ "trigger": "setLineDash \t func UIBezierPath -> void" , "contents": "setLineDash(${1:UnsafePointer<CGFloat>}, count:${2:Int}, phase:${3:CGFloat})" },{ "trigger": "applicationWillResignActive \t func unknown -> void" , "contents": "applicationWillResignActive(${1:UIApplication})" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, willDisplaySupplementaryView:${2:UICollectionReusableView}, forElementKind:${3:String}, atIndexPath:${4:NSIndexPath})" },{ "trigger": "drawTextInRect \t func UILabel -> void" , "contents": "drawTextInRect(${1:CGRect})" },{ "trigger": "deselectRowAtIndexPath \t func UITableView -> void" , "contents": "deselectRowAtIndexPath(${1:NSIndexPath}, animated:${2:BOOL})" },{ "trigger": "prepareLayout \t func UICollectionViewLayout -> void" , "contents": "prepareLayout(${1:})" },{ "trigger": "stretchableImageWithLeftCapWidth \t func UIImage -> UIImage
" , "contents": "stretchableImageWithLeftCapWidth(${1:Int}, topCapHeight:${2:Int})" },{ "trigger": "separateSecondaryViewControllerForSplitViewController \t func UIViewController -> UIViewController?
" , "contents": "separateSecondaryViewControllerForSplitViewController(${1:UISplitViewController})" },{ "trigger": "propertyForGlyphAtIndex \t func NSLayoutManager -> NSGlyphProperty
" , "contents": "propertyForGlyphAtIndex(${1:Int})" },{ "trigger": "firstUnlaidCharacterIndex \t func NSLayoutManager -> Int
" , "contents": "firstUnlaidCharacterIndex(${1:})" },{ "trigger": "adaptivePresentationStyleForPresentationController \t func unknown -> UIModalPresentationStyle
" , "contents": "adaptivePresentationStyleForPresentationController(${1:UIPresentationController}, traitCollection:${2:UITraitCollection})" },{ "trigger": "UIEdgeInsetsValue \t func NSValue -> UIEdgeInsets
" , "contents": "UIEdgeInsetsValue(${1:})" },{ "trigger": "tableView \t func UITableViewController -> UIView?
" , "contents": "tableView(${1:UITableView}, viewForFooterInSection:${2:Int})" },{ "trigger": "tabBarController \t func unknown -> UIViewControllerInteractiveTransitioning?
" , "contents": "tabBarController(${1:UITabBarController}, interactionControllerForAnimationController:${2:UIViewControllerAnimatedTransitioning})" },{ "trigger": "accessibilityDecrement \t func NSObject -> void" , "contents": "accessibilityDecrement(${1:})" },{ "trigger": "overrideTraitCollectionForChildViewController \t func UIViewController -> UITraitCollection?
" , "contents": "overrideTraitCollectionForChildViewController(${1:UIViewController})" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, canPerformAction:${2:Selector}, forItemAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "textFieldShouldEndEditing \t func unknown -> BOOL
" , "contents": "textFieldShouldEndEditing(${1:UITextField})" },{ "trigger": "animationControllerForDismissedController \t func unknown -> UIViewControllerAnimatedTransitioning?
" , "contents": "animationControllerForDismissedController(${1:UIViewController})" },{ "trigger": "cancelInteractiveTransition \t func unknown -> void" , "contents": "cancelInteractiveTransition(${1:})" },{ "trigger": "finalizeCollectionViewUpdates \t func UICollectionViewLayout -> void" , "contents": "finalizeCollectionViewUpdates(${1:})" },{ "trigger": "willMoveToWindow \t func UIView -> void" , "contents": "willMoveToWindow(${1:UIWindow?})" },{ "trigger": "layoutAttributesForSupplementaryViewOfKind \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForSupplementaryViewOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, performFetchWithCompletionHandler:${2:UIBackgroundFetchResult -> Void})" },{ "trigger": "invalidateGlyphsForCharacterRange \t func NSLayoutManager -> void" , "contents": "invalidateGlyphsForCharacterRange(${1:NSRange}, changeInLength:${2:Int}, actualCharacterRange:${3:NSRangePointer})" },{ "trigger": "encodeRestorableStateWithCoder \t func UIViewController -> void" , "contents": "encodeRestorableStateWithCoder(${1:NSCoder})" },{ "trigger": "rangeOfMisspelledWordInString \t func UITextChecker -> NSRange
" , "contents": "rangeOfMisspelledWordInString(${1:String}, range:${2:NSRange}, startingAt:${3:Int}, wrap:${4:BOOL}, language:${5:String})" },{ "trigger": "fontDescriptorWithMatrix \t func UIFontDescriptor -> UIFontDescriptor
" , "contents": "fontDescriptorWithMatrix(${1:CGAffineTransform})" },{ "trigger": "collectionView \t func unknown -> CGPoint
" , "contents": "collectionView(${1:UICollectionView}, targetContentOffsetForProposedContentOffset:${2:CGPoint})" },{ "trigger": "viewWillTransitionToSize \t func unknown -> void" , "contents": "viewWillTransitionToSize(${1:CGSize}, withTransitionCoordinator:${2:UIViewControllerTransitionCoordinator})" },{ "trigger": "prepareForSegue \t func UIViewController -> void" , "contents": "prepareForSegue(${1:UIStoryboardSegue}, sender:${2:AnyObject?})" },{ "trigger": "detailTextForGuidedAccessRestrictionWithIdentifier \t func unknown -> String?
" , "contents": "detailTextForGuidedAccessRestrictionWithIdentifier(${1:String})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, willDisplayHeaderView:${2:UIView}, forSection:${3:Int})" },{ "trigger": "systemLayoutFittingSizeDidChangeForChildContentContainer \t func UIViewController -> void" , "contents": "systemLayoutFittingSizeDidChangeForChildContentContainer(${1:UIContentContainer})" },{ "trigger": "setDrawsOutsideLineFragment \t func NSLayoutManager -> void" , "contents": "setDrawsOutsideLineFragment(${1:BOOL}, forGlyphAtIndex:${2:Int})" },{ "trigger": "revertToContentsOfURL \t func UIDocument -> Void?
" , "contents": "revertToContentsOfURL(${1:NSURL}, completionHandler:${2:BOOL -> Void?})" },{ "trigger": "scrollViewWillBeginDecelerating \t func UITableViewController -> void" , "contents": "scrollViewWillBeginDecelerating(${1:UIScrollView})" },{ "trigger": "baseWritingDirectionForPosition \t func UITextView -> UITextWritingDirection
" , "contents": "baseWritingDirectionForPosition(${1:UITextPosition}, inDirection:${2:UITextStorageDirection})" },{ "trigger": "dismissPreviewAnimated \t func UIDocumentInteractionController -> void" , "contents": "dismissPreviewAnimated(${1:BOOL})" },{ "trigger": "pickerView \t func unknown -> void" , "contents": "pickerView(${1:UIPickerView}, didSelectRow:${2:Int}, inComponent:${3:Int})" },{ "trigger": "traitCollectionDidChange \t func unknown -> void" , "contents": "traitCollectionDidChange(${1:UITraitCollection?})" },{ "trigger": "removeFromPrintPageRenderer \t func UIPrintFormatter -> void" , "contents": "removeFromPrintPageRenderer(${1:})" },{ "trigger": "scrollViewWillBeginZooming \t func UITableViewController -> void" , "contents": "scrollViewWillBeginZooming(${1:UIScrollView}, withView:${2:UIView?})" },{ "trigger": "showFromTabBar \t func UIActionSheet -> void" , "contents": "showFromTabBar(${1:UITabBar})" },{ "trigger": "canResignFirstResponder \t func UIResponder -> BOOL
" , "contents": "canResignFirstResponder(${1:})" },{ "trigger": "encodeWithCoder \t func UIBarItem -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "stroke \t func UIBezierPath -> void" , "contents": "stroke(${1:})" },{ "trigger": "insertRowsAtIndexPaths \t func UITableView -> void" , "contents": "insertRowsAtIndexPaths(${1:[NSIndexPath]}, withRowAnimation:${2:UITableViewRowAnimation})" },{ "trigger": "didPresentAlertView \t func unknown -> void" , "contents": "didPresentAlertView(${1:UIAlertView})" },{ "trigger": "activityViewController \t func UIActivityItemProvider -> String
" , "contents": "activityViewController(${1:UIActivityViewController}, subjectForActivityType:${2:String?})" },{ "trigger": "scrollViewWillEndDragging \t func UITableViewController -> void" , "contents": "scrollViewWillEndDragging(${1:UIScrollView}, withVelocity:${2:CGPoint}, targetContentOffset:${3:UnsafeMutablePointer<CGPoint>})" },{ "trigger": "numberOfSectionsInCollectionView \t func unknown -> Int
" , "contents": "numberOfSectionsInCollectionView(${1:UICollectionView})" },{ "trigger": "systemLayoutFittingSizeDidChangeForChildContentContainer \t func UIPresentationController -> void" , "contents": "systemLayoutFittingSizeDidChangeForChildContentContainer(${1:UIContentContainer})" },{ "trigger": "backgroundImageForBarPosition \t func UINavigationBar -> UIImage?
" , "contents": "backgroundImageForBarPosition(${1:UIBarPosition}, barMetrics:${2:UIBarMetrics})" },{ "trigger": "layoutAttributesForCellAtIndexPath \t func UIDynamicAnimator -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForCellAtIndexPath(${1:NSIndexPath})" },{ "trigger": "addClip \t func UIBezierPath -> void" , "contents": "addClip(${1:})" },{ "trigger": "scrollToNearestSelectedRowAtScrollPosition \t func UITableView -> void" , "contents": "scrollToNearestSelectedRowAtScrollPosition(${1:UITableViewScrollPosition}, animated:${2:BOOL})" },{ "trigger": "printInteractionControllerParentViewController \t func unknown -> UIViewController
" , "contents": "printInteractionControllerParentViewController(${1:UIPrintInteractionController})" },{ "trigger": "registerClass \t func UITableView -> void" , "contents": "registerClass(${1:AnyClass?}, forCellReuseIdentifier:${2:String})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, commitEditingStyle:${2:UITableViewCellEditingStyle}, forRowAtIndexPath:${3:NSIndexPath})" },{ "trigger": "sizeToFit \t func UIView -> void" , "contents": "sizeToFit(${1:})" },{ "trigger": "loadData \t func UIWebView -> void" , "contents": "loadData(${1:NSData}, MIMEType:${2:String}, textEncodingName:${3:String}, baseURL:${4:NSURL})" },{ "trigger": "trackRectForBounds \t func UISlider -> CGRect
" , "contents": "trackRectForBounds(${1:CGRect})" },{ "trigger": "splitViewController \t func unknown -> void" , "contents": "splitViewController(${1:UISplitViewController}, popoverController:${2:UIPopoverController}, willPresentViewController:${3:UIViewController})" },{ "trigger": "indexPathForRowAtPoint \t func UITableView -> NSIndexPath?
" , "contents": "indexPathForRowAtPoint(${1:CGPoint})" },{ "trigger": "setHighlighted \t func UITableViewCell -> void" , "contents": "setHighlighted(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "tabBar \t func unknown -> void" , "contents": "tabBar(${1:UITabBar}, willEndCustomizingItems:${2:[UITabBarItem]}, changed:${3:BOOL})" },{ "trigger": "setTargetRect \t func UIMenuController -> void" , "contents": "setTargetRect(${1:CGRect}, inView:${2:UIView})" },{ "trigger": "rotatingFooterView \t func UIViewController -> UIView?
" , "contents": "rotatingFooterView(${1:})" },{ "trigger": "indexPathsForSelectedItems \t func UICollectionView -> [NSIndexPath]?
" , "contents": "indexPathsForSelectedItems(${1:})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didChangeStatusBarFrame:${2:CGRect})" },{ "trigger": "stopLoading \t func UIWebView -> void" , "contents": "stopLoading(${1:})" },{ "trigger": "hitTest \t func UIView -> UIView?
" , "contents": "hitTest(${1:CGPoint}, withEvent:${2:UIEvent?})" },{ "trigger": "lineFragmentUsedRectForGlyphAtIndex \t func NSLayoutManager -> CGRect
" , "contents": "lineFragmentUsedRectForGlyphAtIndex(${1:Int}, effectiveRange:${2:NSRangePointer}, withoutAdditionalLayout:${3:BOOL})" },{ "trigger": "popoverController \t func unknown -> void" , "contents": "popoverController(${1:UIPopoverController}, willRepositionPopoverToRect:${2:UnsafeMutablePointer<CGRect>}, inView:${3:AutoreleasingUnsafeMutablePointer<UIView?>})" },{ "trigger": "pageViewControllerPreferredInterfaceOrientationForPresentation \t func unknown -> UIInterfaceOrientation
" , "contents": "pageViewControllerPreferredInterfaceOrientationForPresentation(${1:UIPageViewController})" },{ "trigger": "gestureRecognizer \t func UITableViewCell -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldRequireFailureOfGestureRecognizer:${2:UIGestureRecognizer})" },{ "trigger": "convertRect \t func UIView -> CGRect
" , "contents": "convertRect(${1:CGRect}, toCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "guidedAccessRestrictionIdentifiers \t func unknown -> [String]?
" , "contents": "guidedAccessRestrictionIdentifiers(${1:})" },{ "trigger": "editingRectForBounds \t func UITextField -> CGRect
" , "contents": "editingRectForBounds(${1:CGRect})" },{ "trigger": "readAdditionalContentFromURL \t func UIManagedDocument -> void" , "contents": "readAdditionalContentFromURL(${1:NSURL})" },{ "trigger": "loadView \t func UIViewController -> void" , "contents": "loadView(${1:})" },{ "trigger": "textInRange \t func UITextField -> String?
" , "contents": "textInRange(${1:UITextRange})" },{ "trigger": "tabBar \t func UITabBarController -> void" , "contents": "tabBar(${1:UITabBar}, willBeginCustomizingItems:${2:[UITabBarItem]})" },{ "trigger": "copyWithZone \t func UIPreviewAction -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "applicationWillTerminate \t func unknown -> void" , "contents": "applicationWillTerminate(${1:UIApplication})" },{ "trigger": "scrollViewDidEndScrollingAnimation \t func unknown -> void" , "contents": "scrollViewDidEndScrollingAnimation(${1:UIScrollView})" },{ "trigger": "viewForKey \t func unknown -> UIView?
" , "contents": "viewForKey(${1:String})" },{ "trigger": "childViewControllerForStatusBarHidden \t func UIViewController -> UIViewController?
" , "contents": "childViewControllerForStatusBarHidden(${1:})" },{ "trigger": "alertView \t func unknown -> void" , "contents": "alertView(${1:UIAlertView}, didDismissWithButtonIndex:${2:Int})" },{ "trigger": "accessibilityIncrement \t func NSObject -> void" , "contents": "accessibilityIncrement(${1:})" },{ "trigger": "incrementImageForState \t func UIStepper -> UIImage?
" , "contents": "incrementImageForState(${1:UIControlState})" },{ "trigger": "tableView \t func UITableViewController -> UITableViewCellAccessoryType
" , "contents": "tableView(${1:UITableView}, accessoryTypeForRowWithIndexPath:${2:NSIndexPath})" },{ "trigger": "isCustomizing \t func UITabBar -> BOOL
" , "contents": "isCustomizing(${1:})" },{ "trigger": "collectionView \t func unknown -> UICollectionViewTransitionLayout
" , "contents": "collectionView(${1:UICollectionView}, transitionLayoutForOldLayout:${2:UICollectionViewLayout}, newLayout:${3:UICollectionViewLayout})" },{ "trigger": "drawInRect \t func NSString -> CGSize
" , "contents": "drawInRect(${1:CGRect}, withFont:${2:UIFont!})" },{ "trigger": "mutableCopyWithZone \t func UIUserNotificationCategory -> AnyObject
" , "contents": "mutableCopyWithZone(${1:NSZone})" },{ "trigger": "insertSections \t func UITableView -> void" , "contents": "insertSections(${1:NSIndexSet}, withRowAnimation:${2:UITableViewRowAnimation})" },{ "trigger": "constraintGreaterThanOrEqualToConstant \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintGreaterThanOrEqualToConstant(${1:CGFloat})" },{ "trigger": "textStylingAtPosition \t func UITextField -> [String" , "contents": "textStylingAtPosition(${1:UITextPosition}, inDirection:${2:UITextStorageDirection})" },{ "trigger": "loadNibNamed \t func NSBundle -> [AnyObject]!
" , "contents": "loadNibNamed(${1:String!}, owner:${2:AnyObject!}, options:${3:[NSObject })" },{ "trigger": "buttonTitleAtIndex \t func UIActionSheet -> String?
" , "contents": "buttonTitleAtIndex(${1:Int})" },{ "trigger": "beginCustomizingItems \t func UITabBar -> void" , "contents": "beginCustomizingItems(${1:[UITabBarItem]})" },{ "trigger": "removeTextContainerAtIndex \t func NSLayoutManager -> void" , "contents": "removeTextContainerAtIndex(${1:Int})" },{ "trigger": "reloadComponent \t func UIPickerView -> void" , "contents": "reloadComponent(${1:Int})" },{ "trigger": "beginReceivingRemoteControlEvents \t func UIApplication -> void" , "contents": "beginReceivingRemoteControlEvents(${1:})" },{ "trigger": "textWillChange \t func unknown -> void" , "contents": "textWillChange(${1:UITextInput?})" },{ "trigger": "popToRootViewControllerAnimated \t func UINavigationController -> [UIViewController]?
" , "contents": "popToRootViewControllerAnimated(${1:BOOL})" },{ "trigger": "gestureRecognizer \t func unknown -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldRequireFailureOfGestureRecognizer:${2:UIGestureRecognizer})" },{ "trigger": "UIGraphicsPopContext \t func UIGravityBehavior -> void" , "contents": "UIGraphicsPopContext(${1:})" },{ "trigger": "backgroundRectForBounds \t func UIButton -> CGRect
" , "contents": "backgroundRectForBounds(${1:CGRect})" },{ "trigger": "nextResponder \t func UIResponder -> UIResponder?
" , "contents": "nextResponder(${1:})" },{ "trigger": "characterRangeByExtendingPosition \t func UITextField -> UITextRange?
" , "contents": "characterRangeByExtendingPosition(${1:UITextPosition}, inDirection:${2:UITextLayoutDirection})" },{ "trigger": "setNeedsFocusUpdate \t func unknown -> void" , "contents": "setNeedsFocusUpdate(${1:})" },{ "trigger": "positionWithinRange \t func unknown -> UITextPosition?
" , "contents": "positionWithinRange(${1:UITextRange}, atCharacterOffset:${2:Int})" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, canPerformAction:${2:Selector}, forItemAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "hasText \t func unknown -> BOOL
" , "contents": "hasText(${1:})" },{ "trigger": "deleteBackward \t func UITextField -> void" , "contents": "deleteBackward(${1:})" },{ "trigger": "invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths \t func UICollectionViewLayout -> UICollectionViewLayoutInvalidationContext
" , "contents": "invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths(${1:[NSIndexPath]}, previousIndexPaths:${2:[NSIndexPath]}, movementCancelled:${3:BOOL})" },{ "trigger": "editButtonItem \t func UIViewController -> UIBarButtonItem
" , "contents": "editButtonItem(${1:})" },{ "trigger": "willTransitionToTraitCollection \t func UIViewController -> void" , "contents": "willTransitionToTraitCollection(${1:UITraitCollection}, withTransitionCoordinator:${2:UIViewControllerTransitionCoordinator})" },{ "trigger": "navigationController \t func unknown -> UIViewControllerAnimatedTransitioning?
" , "contents": "navigationController(${1:UINavigationController}, animationControllerForOperation:${2:UINavigationControllerOperation}, fromViewController:${3:UIViewController}, toViewController:${4:UIViewController})" },{ "trigger": "tableView \t func unknown -> Int
" , "contents": "tableView(${1:UITableView}, numberOfRowsInSection:${2:Int})" },{ "trigger": "showViewController \t func UIViewController -> void" , "contents": "showViewController(${1:UIViewController}, sender:${2:AnyObject?})" },{ "trigger": "addTarget \t func UIGestureRecognizer -> void" , "contents": "addTarget(${1:AnyObject}, action:${2:Selector})" },{ "trigger": "removeFromSuperview \t func UIView -> void" , "contents": "removeFromSuperview(${1:})" },{ "trigger": "drawFooterForPageAtIndex \t func UIPrintPageRenderer -> void" , "contents": "drawFooterForPageAtIndex(${1:Int}, inRect:${2:CGRect})" },{ "trigger": "indexPathsForVisibleSupplementaryElementsOfKind \t func UICollectionView -> [NSIndexPath]
" , "contents": "indexPathsForVisibleSupplementaryElementsOfKind(${1:String})" },{ "trigger": "scrollRangeToVisible \t func UITextView -> void" , "contents": "scrollRangeToVisible(${1:NSRange})" },{ "trigger": "presentOpenInMenuFromRect \t func UIDocumentInteractionController -> BOOL
" , "contents": "presentOpenInMenuFromRect(${1:CGRect}, inView:${2:UIView}, animated:${3:BOOL})" },{ "trigger": "characterRangeAtPoint \t func UITextView -> UITextRange?
" , "contents": "characterRangeAtPoint(${1:CGPoint})" },{ "trigger": "strikethroughGlyphRange \t func NSLayoutManager -> void" , "contents": "strikethroughGlyphRange(${1:NSRange}, strikethroughType:${2:NSUnderlineStyle}, lineFragmentRect:${3:CGRect}, lineFragmentGlyphRange:${4:NSRange}, containerOrigin:${5:CGPoint})" },{ "trigger": "UISaveVideoAtPathToSavedPhotosAlbum \t func UIScreen -> void" , "contents": "UISaveVideoAtPathToSavedPhotosAlbum(${1:String}, _:${2:AnyObject?}, _:${3:Selector}, _:${4:UnsafeMutablePointer<Void>})" },{ "trigger": "prepareForReuse \t func UITableViewHeaderFooterView -> void" , "contents": "prepareForReuse(${1:})" },{ "trigger": "endGeneratingDeviceOrientationNotifications \t func UIDevice -> void" , "contents": "endGeneratingDeviceOrientationNotifications(${1:})" },{ "trigger": "willTransitionToTraitCollection \t func UIPresentationController -> void" , "contents": "willTransitionToTraitCollection(${1:UITraitCollection}, withTransitionCoordinator:${2:UIViewControllerTransitionCoordinator})" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldHighlightItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "deleteSections \t func UITableView -> void" , "contents": "deleteSections(${1:NSIndexSet}, withRowAnimation:${2:UITableViewRowAnimation})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didEndDisplayingHeaderView:${2:UIView}, forSection:${3:Int})" },{ "trigger": "searchDisplayControllerWillBeginSearch \t func unknown -> void" , "contents": "searchDisplayControllerWillBeginSearch(${1:UISearchDisplayController})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, performAction:${2:Selector}, forRowAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "alignmentRectForFrame \t func UIView -> CGRect
" , "contents": "alignmentRectForFrame(${1:CGRect})" },{ "trigger": "closePath \t func UIBezierPath -> void" , "contents": "closePath(${1:})" },{ "trigger": "UIAccessibilityIsShakeToUndoEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsShakeToUndoEnabled(${1:})" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, willFinishLaunchingWithOptions:${2:[NSObject })" },{ "trigger": "getHue \t func UIColor -> BOOL
" , "contents": "getHue(${1:UnsafeMutablePointer<CGFloat>}, saturation:${2:UnsafeMutablePointer<CGFloat>}, brightness:${3:UnsafeMutablePointer<CGFloat>}, alpha:${4:UnsafeMutablePointer<CGFloat>})" },{ "trigger": "numberOfComponentsInPickerView \t func unknown -> Int
" , "contents": "numberOfComponentsInPickerView(${1:UIPickerView})" },{ "trigger": "viewControllerForUnwindSegueAction \t func UIViewController -> UIViewController?
" , "contents": "viewControllerForUnwindSegueAction(${1:Selector}, fromViewController:${2:UIViewController}, withSender:${3:AnyObject?})" },{ "trigger": "show \t func UIAlertView -> void" , "contents": "show(${1:})" },{ "trigger": "UIOffsetMake \t func UIPageControl -> UIOffset
" , "contents": "UIOffsetMake(${1:CGFloat}, _:${2:CGFloat})" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, didSelectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "positionFromPosition \t func UITextInputStringTokenizer -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, toBoundary:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "presentationStyle \t func unknown -> UIModalPresentationStyle
" , "contents": "presentationStyle(${1:})" },{ "trigger": "updateFloatingCursorAtPoint \t func unknown -> void" , "contents": "updateFloatingCursorAtPoint(${1:CGPoint})" },{ "trigger": "isPosition \t func unknown -> BOOL
" , "contents": "isPosition(${1:UITextPosition}, atBoundary:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "registerForRemoteNotifications \t func UIApplication -> void" , "contents": "registerForRemoteNotifications(${1:})" },{ "trigger": "encodeWithCoder \t func UITextInputMode -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "goBack \t func UIWebView -> void" , "contents": "goBack(${1:})" },{ "trigger": "layoutManagerDidInvalidateLayout \t func unknown -> void" , "contents": "layoutManagerDidInvalidateLayout(${1:NSLayoutManager})" },{ "trigger": "textStorage \t func unknown -> void" , "contents": "textStorage(${1:NSTextStorage}, didProcessEditing:${2:NSTextStorageEditActions}, range:${3:NSRange}, changeInLength:${4:Int})" },{ "trigger": "searchBarBookmarkButtonClicked \t func unknown -> void" , "contents": "searchBarBookmarkButtonClicked(${1:UISearchBar})" },{ "trigger": "setContentCompressionResistancePriority \t func UIView -> void" , "contents": "setContentCompressionResistancePriority(${1:UILayoutPriority}, forAxis:${2:UILayoutConstraintAxis})" },{ "trigger": "replaceLayoutManager \t func NSTextContainer -> void" , "contents": "replaceLayoutManager(${1:NSLayoutManager})" },{ "trigger": "presentSearchController \t func unknown -> void" , "contents": "presentSearchController(${1:UISearchController})" },{ "trigger": "ensureLayoutForCharacterRange \t func NSLayoutManager -> void" , "contents": "ensureLayoutForCharacterRange(${1:NSRange})" },{ "trigger": "CGVectorValue \t func NSValue -> CGVector
" , "contents": "CGVectorValue(${1:})" },{ "trigger": "processEditing \t func NSTextStorage -> void" , "contents": "processEditing(${1:})" },{ "trigger": "exchangeSubviewAtIndex \t func UIView -> void" , "contents": "exchangeSubviewAtIndex(${1:Int}, withSubviewAtIndex:${2:Int})" },{ "trigger": "collapseSecondaryViewController \t func UIViewController -> void" , "contents": "collapseSecondaryViewController(${1:UIViewController}, forSplitViewController:${2:UISplitViewController})" },{ "trigger": "setShadowImage \t func UIToolbar -> void" , "contents": "setShadowImage(${1:UIImage?}, forToolbarPosition:${2:UIBarPosition})" },{ "trigger": "shouldChangeTextInRange \t func unknown -> BOOL
" , "contents": "shouldChangeTextInRange(${1:UITextRange}, replacementText:${2:String})" },{ "trigger": "searchDisplayController \t func unknown -> void" , "contents": "searchDisplayController(${1:UISearchDisplayController}, didHideSearchResultsTableView:${2:UITableView})" },{ "trigger": "layoutAttributesForDecorationViewOfKind \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForDecorationViewOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "addItem \t func UICollisionBehavior -> void" , "contents": "addItem(${1:UIDynamicItem})" },{ "trigger": "imageRectForContentRect \t func UIButton -> CGRect
" , "contents": "imageRectForContentRect(${1:CGRect})" },{ "trigger": "beginUpdates \t func UITableView -> void" , "contents": "beginUpdates(${1:})" },{ "trigger": "gestureRecognizerShouldBegin \t func unknown -> BOOL
" , "contents": "gestureRecognizerShouldBegin(${1:UIGestureRecognizer})" },{ "trigger": "scrollViewDidEndDragging \t func UIWebView -> void" , "contents": "scrollViewDidEndDragging(${1:UIScrollView}, willDecelerate:${2:BOOL})" },{ "trigger": "viewWillDisappear \t func UIViewController -> void" , "contents": "viewWillDisappear(${1:BOOL})" },{ "trigger": "UIDeviceOrientationIsPortrait \t func UIDictationPhrase -> BOOL
" , "contents": "UIDeviceOrientationIsPortrait(${1:UIDeviceOrientation})" },{ "trigger": "textContainerForGlyphAtIndex \t func NSLayoutManager -> NSTextContainer?
" , "contents": "textContainerForGlyphAtIndex(${1:Int}, effectiveRange:${2:NSRangePointer}, withoutAdditionalLayout:${3:BOOL})" },{ "trigger": "documentPicker \t func unknown -> void" , "contents": "documentPicker(${1:UIDocumentPickerViewController}, didPickDocumentAtURL:${2:NSURL})" },{ "trigger": "insertText \t func unknown -> void" , "contents": "insertText(${1:String})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, accessoryButtonTappedForRowWithIndexPath:${2:NSIndexPath})" },{ "trigger": "presentFromBarButtonItem \t func UIPrinterPickerController -> BOOL
" , "contents": "presentFromBarButtonItem(${1:UIBarButtonItem}, animated:${2:BOOL}, completionHandler:${3:UIPrinterPickerCompletionHandler?})" },{ "trigger": "encodeWithCoder \t func NSTextContainer -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "registerForPreviewingWithDelegate \t func UIViewController -> UIViewControllerPreviewing
" , "contents": "registerForPreviewingWithDelegate(${1:UIViewControllerPreviewingDelegate}, sourceView:${2:UIView})" },{ "trigger": "positionFromPosition \t func UITextView -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, inDirection:${2:UITextLayoutDirection}, offset:${3:Int})" },{ "trigger": "touchesBegan \t func UIResponder -> void" , "contents": "touchesBegan(${1:Set<UITouch>}, withEvent:${2:UIEvent?})" },{ "trigger": "splitViewController \t func unknown -> UIViewController?
" , "contents": "splitViewController(${1:UISplitViewController}, separateSecondaryViewControllerFromPrimaryViewController:${2:UIViewController})" },{ "trigger": "encodeRestorableStateWithCoder \t func unknown -> void" , "contents": "encodeRestorableStateWithCoder(${1:NSCoder})" },{ "trigger": "scrollViewWillBeginDecelerating \t func UIWebView -> void" , "contents": "scrollViewWillBeginDecelerating(${1:UIScrollView})" },{ "trigger": "characterRangeByExtendingPosition \t func UITextView -> UITextRange?
" , "contents": "characterRangeByExtendingPosition(${1:UITextPosition}, inDirection:${2:UITextLayoutDirection})" },{ "trigger": "documentInteractionControllerWillBeginPreview \t func unknown -> void" , "contents": "documentInteractionControllerWillBeginPreview(${1:UIDocumentInteractionController})" },{ "trigger": "imagePickerController \t func unknown -> void" , "contents": "imagePickerController(${1:UIImagePickerController}, didFinishPickingMediaWithInfo:${2:[String })" },{ "trigger": "UIRectFrameUsingBlendMode \t func UIReferenceLibraryViewController -> void" , "contents": "UIRectFrameUsingBlendMode(${1:CGRect}, _:${2:CGBlendMode})" },{ "trigger": "copyWithZone \t func UITraitCollection -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "exerciseAmbiguityInLayout \t func UIView -> void" , "contents": "exerciseAmbiguityInLayout(${1:})" },{ "trigger": "constraintLessThanOrEqualToAnchor \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintLessThanOrEqualToAnchor(${1:NSLayoutDimension!}, multiplier:${2:CGFloat})" },{ "trigger": "UIGraphicsGetImageFromCurrentImageContext \t func UIGravityBehavior -> UIImage!
" , "contents": "UIGraphicsGetImageFromCurrentImageContext(${1:})" },{ "trigger": "accessibilityContentForLineNumber \t func unknown -> String?
" , "contents": "accessibilityContentForLineNumber(${1:Int})" },{ "trigger": "backButtonBackgroundVerticalPositionAdjustmentForBarMetrics \t func UIBarButtonItem -> CGFloat
" , "contents": "backButtonBackgroundVerticalPositionAdjustmentForBarMetrics(${1:UIBarMetrics})" },{ "trigger": "addConstraints \t func UIView -> void" , "contents": "addConstraints(${1:[NSLayoutConstraint]})" },{ "trigger": "insertDictationResult \t func unknown -> void" , "contents": "insertDictationResult(${1:[UIDictationPhrase]})" },{ "trigger": "preferredLayoutAttributesFittingAttributes \t func UICollectionReusableView -> UICollectionViewLayoutAttributes
" , "contents": "preferredLayoutAttributesFittingAttributes(${1:UICollectionViewLayoutAttributes})" },{ "trigger": "fontDescriptorWithFamily \t func UIFontDescriptor -> UIFontDescriptor
" , "contents": "fontDescriptorWithFamily(${1:String})" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, canEditRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "prepareForReuse \t func UICollectionReusableView -> void" , "contents": "prepareForReuse(${1:})" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldUpdateFocusInContext:${2:UICollectionViewFocusUpdateContext})" },{ "trigger": "accessibilityLineNumberForPoint \t func unknown -> Int
" , "contents": "accessibilityLineNumberForPoint(${1:CGPoint})" },{ "trigger": "tabBar \t func unknown -> void" , "contents": "tabBar(${1:UITabBar}, didBeginCustomizingItems:${2:[UITabBarItem]})" },{ "trigger": "numberOfTouches \t func UIGestureRecognizer -> Int
" , "contents": "numberOfTouches(${1:})" },{ "trigger": "navigationBar \t func unknown -> BOOL
" , "contents": "navigationBar(${1:UINavigationBar}, shouldPopItem:${2:UINavigationItem})" },{ "trigger": "setNeedsDisplayInRect \t func UIView -> void" , "contents": "setNeedsDisplayInRect(${1:CGRect})" },{ "trigger": "providePlaceholderAtURL \t func NSFileProviderExtension -> Void
" , "contents": "providePlaceholderAtURL(${1:NSURL}, completionHandler:${2:NSError? -> Void})" },{ "trigger": "characterIndexForPoint \t func NSLayoutManager -> Int
" , "contents": "characterIndexForPoint(${1:CGPoint}, inTextContainer:${2:NSTextContainer}, fractionOfDistanceBetweenInsertionPoints:${3:UnsafeMutablePointer<CGFloat>})" },{ "trigger": "removeAllBehaviors \t func UIDynamicAnimator -> void" , "contents": "removeAllBehaviors(${1:})" },{ "trigger": "preciseLocationInView \t func UITouch -> CGPoint
" , "contents": "preciseLocationInView(${1:UIView?})" },{ "trigger": "setMinimumTrackImage \t func UISlider -> void" , "contents": "setMinimumTrackImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "encodeWithCoder \t func UIBezierPath -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "presentedSubitemDidChangeAtURL \t func UIDocument -> void" , "contents": "presentedSubitemDidChangeAtURL(${1:NSURL})" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, shouldAllowExtensionPointIdentifier:${2:String})" },{ "trigger": "setBackgroundImage \t func UIStepper -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "comparePosition \t func UITextView -> NSComparisonResult
" , "contents": "comparePosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "makeTextWritingDirectionRightToLeft \t func NSObject -> void" , "contents": "makeTextWritingDirectionRightToLeft(${1:AnyObject?})" },{ "trigger": "convertRect \t func UIView -> CGRect
" , "contents": "convertRect(${1:CGRect}, fromCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "setViewControllers \t func UIPageViewController -> Void?
" , "contents": "setViewControllers(${1:[UIViewController]?}, direction:${2:UIPageViewControllerNavigationDirection}, animated:${3:BOOL}, completion:${4:BOOL -> Void?})" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, willContinueUserActivityWithType:${2:String})" },{ "trigger": "gestureRecognizer \t func unknown -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldReceivePress:${2:UIPress})" },{ "trigger": "initialFrameForViewController \t func unknown -> CGRect
" , "contents": "initialFrameForViewController(${1:UIViewController})" },{ "trigger": "collectionView \t func UICollectionViewController -> UICollectionViewTransitionLayout
" , "contents": "collectionView(${1:UICollectionView}, transitionLayoutForOldLayout:${2:UICollectionViewLayout}, newLayout:${3:UICollectionViewLayout})" },{ "trigger": "UIGraphicsSetPDFContextURLForRect \t func UIGravityBehavior -> void" , "contents": "UIGraphicsSetPDFContextURLForRect(${1:NSURL}, _:${2:CGRect})" },{ "trigger": "preferredStatusBarUpdateAnimation \t func UIViewController -> UIStatusBarAnimation
" , "contents": "preferredStatusBarUpdateAnimation(${1:})" },{ "trigger": "baseWritingDirectionForPosition \t func UITextField -> UITextWritingDirection
" , "contents": "baseWritingDirectionForPosition(${1:UITextPosition}, inDirection:${2:UITextStorageDirection})" },{ "trigger": "encodeWithCoder \t func NSShadow -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "setRightBarButtonItems \t func UINavigationItem -> void" , "contents": "setRightBarButtonItems(${1:[UIBarButtonItem]?}, animated:${2:BOOL})" },{ "trigger": "insertSegmentWithTitle \t func UISegmentedControl -> void" , "contents": "insertSegmentWithTitle(${1:String?}, atIndex:${2:Int}, animated:${3:BOOL})" },{ "trigger": "positionFromPosition \t func unknown -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, offset:${2:Int})" },{ "trigger": "viewDidAppear \t func UIViewController -> void" , "contents": "viewDidAppear(${1:BOOL})" },{ "trigger": "popViewControllerAnimated \t func UINavigationController -> UIViewController?
" , "contents": "popViewControllerAnimated(${1:BOOL})" },{ "trigger": "UIAccessibilityRequestGuidedAccessSession \t func UIAccessibilityScrollDirection -> Void
" , "contents": "UIAccessibilityRequestGuidedAccessSession(${1:BOOL}, _:${2:BOOL -> Void})" },{ "trigger": "allPresses \t func UIPressesEvent -> Set UIPress 
" , "contents": "allPresses(${1:})" },{ "trigger": "shouldChangeTextInRange \t func UITextField -> BOOL
" , "contents": "shouldChangeTextInRange(${1:UITextRange}, replacementText:${2:String})" },{ "trigger": "replaceRange \t func UITextView -> void" , "contents": "replaceRange(${1:UITextRange}, withText:${2:String})" },{ "trigger": "dismissMenuAnimated \t func UIDocumentInteractionController -> void" , "contents": "dismissMenuAnimated(${1:BOOL})" },{ "trigger": "didTransitionFromLayout \t func UICollectionReusableView -> void" , "contents": "didTransitionFromLayout(${1:UICollectionViewLayout}, toLayout:${2:UICollectionViewLayout})" },{ "trigger": "scrollViewDidEndScrollingAnimation \t func UIWebView -> void" , "contents": "scrollViewDidEndScrollingAnimation(${1:UIScrollView})" },{ "trigger": "stopProvidingItemAtURL \t func NSFileProviderExtension -> void" , "contents": "stopProvidingItemAtURL(${1:NSURL})" },{ "trigger": "moveItemAtIndexPath \t func UICollectionView -> void" , "contents": "moveItemAtIndexPath(${1:NSIndexPath}, toIndexPath:${2:NSIndexPath})" },{ "trigger": "backgroundImageForBarPosition \t func UISearchBar -> UIImage?
" , "contents": "backgroundImageForBarPosition(${1:UIBarPosition}, barMetrics:${2:UIBarMetrics})" },{ "trigger": "activityViewController \t func UIActivityItemProvider -> AnyObject?
" , "contents": "activityViewController(${1:UIActivityViewController}, itemForActivityType:${2:String})" },{ "trigger": "contentCompressionResistancePriorityForAxis \t func UIView -> UILayoutPriority
" , "contents": "contentCompressionResistancePriorityForAxis(${1:UILayoutConstraintAxis})" },{ "trigger": "indexPathForPreferredFocusedViewInCollectionView \t func UICollectionViewController -> NSIndexPath?
" , "contents": "indexPathForPreferredFocusedViewInCollectionView(${1:UICollectionView})" },{ "trigger": "beginTrackingWithTouch \t func UIControl -> BOOL
" , "contents": "beginTrackingWithTouch(${1:UITouch}, withEvent:${2:UIEvent?})" },{ "trigger": "documentInteractionController \t func unknown -> void" , "contents": "documentInteractionController(${1:UIDocumentInteractionController}, didEndSendingToApplication:${2:String?})" },{ "trigger": "reloadRowsAtIndexPaths \t func UITableView -> void" , "contents": "reloadRowsAtIndexPaths(${1:[NSIndexPath]}, withRowAnimation:${2:UITableViewRowAnimation})" },{ "trigger": "endFloatingCursor \t func UITextField -> void" , "contents": "endFloatingCursor(${1:})" },{ "trigger": "textStorage \t func unknown -> void" , "contents": "textStorage(${1:NSTextStorage}, willProcessEditing:${2:NSTextStorageEditActions}, range:${3:NSRange}, changeInLength:${4:Int})" },{ "trigger": "flashScrollIndicators \t func UIScrollView -> void" , "contents": "flashScrollIndicators(${1:})" },{ "trigger": "endTrackingWithTouch \t func UIControl -> void" , "contents": "endTrackingWithTouch(${1:UITouch?}, withEvent:${2:UIEvent?})" },{ "trigger": "tableView \t func UITableViewController -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldShowMenuForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "edited \t func NSTextStorage -> void" , "contents": "edited(${1:NSTextStorageEditActions}, range:${2:NSRange}, changeInLength:${3:Int})" },{ "trigger": "tabBar \t func unknown -> void" , "contents": "tabBar(${1:UITabBar}, willBeginCustomizingItems:${2:[UITabBarItem]})" },{ "trigger": "scrollViewDidScrollToTop \t func UICollectionViewController -> void" , "contents": "scrollViewDidScrollToTop(${1:UIScrollView})" },{ "trigger": "writeContents \t func UIDocument -> void" , "contents": "writeContents(${1:AnyObject}, toURL:${2:NSURL}, forSaveOperation:${3:UIDocumentSaveOperation}, originalContentsURL:${4:NSURL?})" },{ "trigger": "goForward \t func UIWebView -> void" , "contents": "goForward(${1:})" },{ "trigger": "selectionDidChange \t func unknown -> void" , "contents": "selectionDidChange(${1:UITextInput?})" },{ "trigger": "pageViewController \t func unknown -> UIPageViewControllerSpineLocation
" , "contents": "pageViewController(${1:UIPageViewController}, spineLocationForInterfaceOrientation:${2:UIInterfaceOrientation})" },{ "trigger": "presentationIndexForPageViewController \t func unknown -> Int
" , "contents": "presentationIndexForPageViewController(${1:UIPageViewController})" },{ "trigger": "closestPositionToPoint \t func unknown -> UITextPosition?
" , "contents": "closestPositionToPoint(${1:CGPoint}, withinRange:${2:UITextRange})" },{ "trigger": "tableView \t func UITableViewController -> CGFloat
" , "contents": "tableView(${1:UITableView}, estimatedHeightForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "reloadData \t func UICollectionView -> void" , "contents": "reloadData(${1:})" },{ "trigger": "scrollViewDidScroll \t func UIWebView -> void" , "contents": "scrollViewDidScroll(${1:UIScrollView})" },{ "trigger": "thumbImageForState \t func UISlider -> UIImage?
" , "contents": "thumbImageForState(${1:UIControlState})" },{ "trigger": "insertText \t func UITextView -> void" , "contents": "insertText(${1:String})" },{ "trigger": "sizeWithFont \t func NSString -> CGSize
" , "contents": "sizeWithFont(${1:UIFont!}, constrainedToSize:${2:CGSize})" },{ "trigger": "setMarkedText \t func unknown -> void" , "contents": "setMarkedText(${1:String?}, selectedRange:${2:NSRange})" },{ "trigger": "backgroundImageForState \t func UIStepper -> UIImage?
" , "contents": "backgroundImageForState(${1:UIControlState})" },{ "trigger": "textView \t func unknown -> BOOL
" , "contents": "textView(${1:UITextView}, shouldInteractWithTextAttachment:${2:NSTextAttachment}, inRange:${3:NSRange})" },{ "trigger": "CGRectValue \t func NSValue -> CGRect
" , "contents": "CGRectValue(${1:})" },{ "trigger": "motionEnded \t func UIResponder -> void" , "contents": "motionEnded(${1:UIEventSubtype}, withEvent:${2:UIEvent?})" },{ "trigger": "contentRectForBounds \t func UIButton -> CGRect
" , "contents": "contentRectForBounds(${1:CGRect})" },{ "trigger": "dynamicAnimatorDidPause \t func unknown -> void" , "contents": "dynamicAnimatorDidPause(${1:UIDynamicAnimator})" },{ "trigger": "moveToPoint \t func UIBezierPath -> void" , "contents": "moveToPoint(${1:CGPoint})" },{ "trigger": "setScopeBarButtonTitleTextAttributes \t func UISearchBar -> void" , "contents": "setScopeBarButtonTitleTextAttributes(${1:[String }, forState:${2:UIControlState})" },{ "trigger": "setNeedsFocusUpdate \t func UIViewController -> void" , "contents": "setNeedsFocusUpdate(${1:})" },{ "trigger": "convertPoint \t func UIView -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, toCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "documentInteractionControllerWillPresentOptionsMenu \t func unknown -> void" , "contents": "documentInteractionControllerWillPresentOptionsMenu(${1:UIDocumentInteractionController})" },{ "trigger": "restoreUserActivityState \t func UIDocument -> void" , "contents": "restoreUserActivityState(${1:NSUserActivity})" },{ "trigger": "removeMotionEffect \t func UIView -> void" , "contents": "removeMotionEffect(${1:UIMotionEffect})" },{ "trigger": "dequeueReusableCellWithIdentifier \t func UITableView -> UITableViewCell?
" , "contents": "dequeueReusableCellWithIdentifier(${1:String})" },{ "trigger": "UIGraphicsSetPDFContextDestinationForRect \t func UIGravityBehavior -> void" , "contents": "UIGraphicsSetPDFContextDestinationForRect(${1:String}, _:${2:CGRect})" },{ "trigger": "setLeftBarButtonItem \t func UINavigationItem -> void" , "contents": "setLeftBarButtonItem(${1:UIBarButtonItem?}, animated:${2:BOOL})" },{ "trigger": "openWithCompletionHandler \t func UIDocument -> Void?
" , "contents": "openWithCompletionHandler(${1:BOOL -> Void?})" },{ "trigger": "tableView \t func UITableViewController -> UITableViewCellEditingStyle
" , "contents": "tableView(${1:UITableView}, editingStyleForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "presentFromRect \t func UIPrintInteractionController -> BOOL
" , "contents": "presentFromRect(${1:CGRect}, inView:${2:UIView}, animated:${3:BOOL}, completionHandler:${4:UIPrintInteractionCompletionHandler?})" },{ "trigger": "resizableImageWithCapInsets \t func UIImage -> UIImage
" , "contents": "resizableImageWithCapInsets(${1:UIEdgeInsets}, resizingMode:${2:UIImageResizingMode})" },{ "trigger": "UI_USER_INTERFACE_IDIOM \t func CIColor -> UIUserInterfaceIdiom
" , "contents": "UI_USER_INTERFACE_IDIOM(${1:})" },{ "trigger": "setThumbImage \t func UISlider -> void" , "contents": "setThumbImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "accessibilityScroll \t func NSObject -> BOOL
" , "contents": "accessibilityScroll(${1:UIAccessibilityScrollDirection})" },{ "trigger": "gestureRecognizer \t func unknown -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldReceiveTouch:${2:UITouch})" },{ "trigger": "completionSpeed \t func unknown -> CGFloat
" , "contents": "completionSpeed(${1:})" },{ "trigger": "printInteractionController \t func unknown -> UIPrinterCutterBehavior
" , "contents": "printInteractionController(${1:UIPrintInteractionController}, chooseCutterBehavior:${2:[AnyObject]})" },{ "trigger": "convertRect \t func UIView -> CGRect
" , "contents": "convertRect(${1:CGRect}, toView:${2:UIView?})" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, canMoveRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "invalidationContextForPreferredLayoutAttributes \t func UICollectionViewLayout -> UICollectionViewLayoutInvalidationContext
" , "contents": "invalidationContextForPreferredLayoutAttributes(${1:UICollectionViewLayoutAttributes}, withOriginalAttributes:${2:UICollectionViewLayoutAttributes})" },{ "trigger": "drawBackgroundForGlyphRange \t func NSLayoutManager -> void" , "contents": "drawBackgroundForGlyphRange(${1:NSRange}, atPoint:${2:CGPoint})" },{ "trigger": "fontAttributes \t func UIFontDescriptor -> [String" , "contents": "fontAttributes(${1:})" },{ "trigger": "getFirstUnlaidCharacterIndex \t func NSLayoutManager -> void" , "contents": "getFirstUnlaidCharacterIndex(${1:UnsafeMutablePointer<Int>}, glyphIndex:${2:UnsafeMutablePointer<Int>})" },{ "trigger": "imageForBounds \t func unknown -> UIImage?
" , "contents": "imageForBounds(${1:CGRect}, textContainer:${2:NSTextContainer?}, characterIndex:${3:Int})" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, didUpdateFocusInContext:${2:UICollectionViewFocusUpdateContext}, withAnimationCoordinator:${3:UIFocusAnimationCoordinator})" },{ "trigger": "dismissWithClickedButtonIndex \t func UIAlertView -> void" , "contents": "dismissWithClickedButtonIndex(${1:Int}, animated:${2:BOOL})" },{ "trigger": "tableView \t func unknown -> String?
" , "contents": "tableView(${1:UITableView}, titleForHeaderInSection:${2:Int})" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldSelectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "documentInteractionControllerDidEndPreview \t func unknown -> void" , "contents": "documentInteractionControllerDidEndPreview(${1:UIDocumentInteractionController})" },{ "trigger": "lineFragmentUsedRectForGlyphAtIndex \t func NSLayoutManager -> CGRect
" , "contents": "lineFragmentUsedRectForGlyphAtIndex(${1:Int}, effectiveRange:${2:NSRangePointer})" },{ "trigger": "removeTarget \t func UIGestureRecognizer -> void" , "contents": "removeTarget(${1:AnyObject?}, action:${2:Selector})" },{ "trigger": "activityTitle \t func UIActivity -> String?
" , "contents": "activityTitle(${1:})" },{ "trigger": "collectionView \t func UICollectionViewController -> NSIndexPath
" , "contents": "collectionView(${1:UICollectionView}, targetIndexPathForMoveFromItemAtIndexPath:${2:NSIndexPath}, toProposedIndexPath:${3:NSIndexPath})" },{ "trigger": "showCGGlyphs \t func NSLayoutManager -> void" , "contents": "showCGGlyphs(${1:UnsafePointer<CGGlyph>}, positions:${2:UnsafePointer<CGPoint>}, count:${3:Int}, font:${4:UIFont}, matrix:${5:CGAffineTransform}, attributes:${6:[String }, inContext:${7:CGContext})" },{ "trigger": "drawRect \t func UIView -> void" , "contents": "drawRect(${1:CGRect})" },{ "trigger": "scrollViewDidEndZooming \t func UICollectionViewController -> void" , "contents": "scrollViewDidEndZooming(${1:UIScrollView}, withView:${2:UIView?}, atScale:${3:CGFloat})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didEndEditingRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, didHighlightItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "NSStringFromCGRect \t func NSTextAlignment -> String
" , "contents": "NSStringFromCGRect(${1:CGRect})" },{ "trigger": "setDividerImage \t func UIStepper -> void" , "contents": "setDividerImage(${1:UIImage?}, forLeftSegmentState:${2:UIControlState}, rightSegmentState:${3:UIControlState})" },{ "trigger": "beginRequestWithExtensionContext \t func UIViewController -> void" , "contents": "beginRequestWithExtensionContext(${1:NSExtensionContext})" },{ "trigger": "UIRectFillUsingBlendMode \t func UIReferenceLibraryViewController -> void" , "contents": "UIRectFillUsingBlendMode(${1:CGRect}, _:${2:CGBlendMode})" },{ "trigger": "disablesAutomaticKeyboardDismissal \t func UIViewController -> BOOL
" , "contents": "disablesAutomaticKeyboardDismissal(${1:})" },{ "trigger": "sizeThatFits \t func UIView -> CGSize
" , "contents": "sizeThatFits(${1:CGSize})" },{ "trigger": "autosaveWithCompletionHandler \t func UIDocument -> Void?
" , "contents": "autosaveWithCompletionHandler(${1:BOOL -> Void?})" },{ "trigger": "textView \t func unknown -> BOOL
" , "contents": "textView(${1:UITextView}, shouldInteractWithURL:${2:NSURL}, inRange:${3:NSRange})" },{ "trigger": "didRotateFromInterfaceOrientation \t func UIViewController -> void" , "contents": "didRotateFromInterfaceOrientation(${1:UIInterfaceOrientation})" },{ "trigger": "searchBar \t func unknown -> void" , "contents": "searchBar(${1:UISearchBar}, selectedScopeButtonIndexDidChange:${2:Int})" },{ "trigger": "fileWrapperFromRange \t func NSAttributedString -> NSFileWrapper
" , "contents": "fileWrapperFromRange(${1:NSRange}, documentAttributes:${2:[String })" },{ "trigger": "showDetailViewController \t func UIViewController -> void" , "contents": "showDetailViewController(${1:UIViewController}, sender:${2:AnyObject?})" },{ "trigger": "searchBarResultsListButtonClicked \t func unknown -> void" , "contents": "searchBarResultsListButtonClicked(${1:UISearchBar})" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, didReceiveRemoteNotification:${2:[NSObject }, fetchCompletionHandler:${3:UIBackgroundFetchResult -> Void})" },{ "trigger": "shouldUpdateFocusInContext \t func UIViewController -> BOOL
" , "contents": "shouldUpdateFocusInContext(${1:UIFocusUpdateContext})" },{ "trigger": "adaptivePresentationStyle \t func UIPresentationController -> UIModalPresentationStyle
" , "contents": "adaptivePresentationStyle(${1:})" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, canMoveItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "frameForDictationResultPlaceholder \t func UITextView -> CGRect
" , "contents": "frameForDictationResultPlaceholder(${1:AnyObject})" },{ "trigger": "endInteractiveMovement \t func UICollectionView -> void" , "contents": "endInteractiveMovement(${1:})" },{ "trigger": "isFirstResponder \t func UIResponder -> BOOL
" , "contents": "isFirstResponder(${1:})" },{ "trigger": "didDismissSearchController \t func unknown -> void" , "contents": "didDismissSearchController(${1:UISearchController})" },{ "trigger": "gestureRecognizerShouldBegin \t func UIView -> BOOL
" , "contents": "gestureRecognizerShouldBegin(${1:UIGestureRecognizer})" },{ "trigger": "deleteItemsAtIndexPaths \t func UICollectionView -> void" , "contents": "deleteItemsAtIndexPaths(${1:[NSIndexPath]})" },{ "trigger": "encodeWithCoder \t func UIColor -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "writeAdditionalContent \t func UIManagedDocument -> void" , "contents": "writeAdditionalContent(${1:AnyObject}, toURL:${2:NSURL}, originalContentsURL:${3:NSURL?})" },{ "trigger": "setZoomScale \t func UIScrollView -> void" , "contents": "setZoomScale(${1:CGFloat}, animated:${2:BOOL})" },{ "trigger": "actionSheetCancel \t func unknown -> void" , "contents": "actionSheetCancel(${1:UIActionSheet})" },{ "trigger": "UIGraphicsEndImageContext \t func UIGravityBehavior -> void" , "contents": "UIGraphicsEndImageContext(${1:})" },{ "trigger": "getRed \t func UIColor -> BOOL
" , "contents": "getRed(${1:UnsafeMutablePointer<CGFloat>}, green:${2:UnsafeMutablePointer<CGFloat>}, blue:${3:UnsafeMutablePointer<CGFloat>}, alpha:${4:UnsafeMutablePointer<CGFloat>})" },{ "trigger": "adaptivePresentationStyleForTraitCollection \t func UIPresentationController -> UIModalPresentationStyle
" , "contents": "adaptivePresentationStyleForTraitCollection(${1:UITraitCollection})" },{ "trigger": "dividerImageForLeftSegmentState \t func UISegmentedControl -> UIImage?
" , "contents": "dividerImageForLeftSegmentState(${1:UIControlState}, rightSegmentState:${2:UIControlState}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "actionSheet \t func UIDocumentInteractionController -> void" , "contents": "actionSheet(${1:UIActionSheet}, clickedButtonAtIndex:${2:Int})" },{ "trigger": "cancelLocalNotification \t func UIApplication -> void" , "contents": "cancelLocalNotification(${1:UILocalNotification})" },{ "trigger": "fillBackgroundRectArray \t func NSLayoutManager -> void" , "contents": "fillBackgroundRectArray(${1:UnsafePointer<CGRect>}, count:${2:Int}, forCharacterRange:${3:NSRange}, color:${4:UIColor})" },{ "trigger": "glyphRangeForBoundingRectWithoutAdditionalLayout \t func NSLayoutManager -> NSRange
" , "contents": "glyphRangeForBoundingRectWithoutAdditionalLayout(${1:CGRect}, inTextContainer:${2:NSTextContainer})" },{ "trigger": "registerNib \t func UITableView -> void" , "contents": "registerNib(${1:UINib?}, forCellReuseIdentifier:${2:String})" },{ "trigger": "textWillChange \t func UIInputViewController -> void" , "contents": "textWillChange(${1:UITextInput?})" },{ "trigger": "setTitle \t func UISegmentedControl -> void" , "contents": "setTitle(${1:String?}, forSegmentAtIndex:${2:Int})" },{ "trigger": "requireGestureRecognizerToFail \t func UIGestureRecognizer -> void" , "contents": "requireGestureRecognizerToFail(${1:UIGestureRecognizer})" },{ "trigger": "collectionView \t func UICollectionViewController -> Int
" , "contents": "collectionView(${1:UICollectionView}, numberOfItemsInSection:${2:Int})" },{ "trigger": "invalidateLayoutWithContext \t func UICollectionViewLayout -> void" , "contents": "invalidateLayoutWithContext(${1:UICollectionViewLayoutInvalidationContext})" },{ "trigger": "tableView \t func UIPickerView -> BOOL
" , "contents": "tableView(${1:UITableView}, canMoveRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "removeItem \t func UICollisionBehavior -> void" , "contents": "removeItem(${1:UIDynamicItem})" },{ "trigger": "accessibilityElementDidBecomeFocused \t func NSObject -> void" , "contents": "accessibilityElementDidBecomeFocused(${1:})" },{ "trigger": "drawStrikethroughForGlyphRange \t func NSLayoutManager -> void" , "contents": "drawStrikethroughForGlyphRange(${1:NSRange}, strikethroughType:${2:NSUnderlineStyle}, baselineOffset:${3:CGFloat}, lineFragmentRect:${4:CGRect}, lineFragmentGlyphRange:${5:NSRange}, containerOrigin:${6:CGPoint})" },{ "trigger": "setNewsstandIconImage \t func UIApplication -> void" , "contents": "setNewsstandIconImage(${1:UIImage?})" },{ "trigger": "contentHuggingPriorityForAxis \t func UIView -> UILayoutPriority
" , "contents": "contentHuggingPriorityForAxis(${1:UILayoutConstraintAxis})" },{ "trigger": "itemsInRect \t func UIDynamicAnimator -> [UIDynamicItem]
" , "contents": "itemsInRect(${1:CGRect})" },{ "trigger": "drawInRect \t func NSString -> CGSize
" , "contents": "drawInRect(${1:CGRect}, withFont:${2:UIFont!}, lineBreakMode:${3:NSLineBreakMode}, alignment:${4:NSTextAlignment})" },{ "trigger": "setValue \t func UIPasteboard -> void" , "contents": "setValue(${1:AnyObject}, forPasteboardType:${2:String})" },{ "trigger": "glyphRangeForTextContainer \t func NSLayoutManager -> NSRange
" , "contents": "glyphRangeForTextContainer(${1:NSTextContainer})" },{ "trigger": "attributedTitleForState \t func UIButton -> NSAttributedString?
" , "contents": "attributedTitleForState(${1:UIControlState})" },{ "trigger": "presentAnimated \t func UIPrintInteractionController -> BOOL
" , "contents": "presentAnimated(${1:BOOL}, completionHandler:${2:UIPrintInteractionCompletionHandler?})" },{ "trigger": "scrollViewShouldScrollToTop \t func unknown -> BOOL
" , "contents": "scrollViewShouldScrollToTop(${1:UIScrollView})" },{ "trigger": "selectionWillChange \t func unknown -> void" , "contents": "selectionWillChange(${1:UITextInput?})" },{ "trigger": "stopAnimating \t func UIActivityIndicatorView -> void" , "contents": "stopAnimating(${1:})" },{ "trigger": "scrollViewDidEndScrollingAnimation \t func UITableViewController -> void" , "contents": "scrollViewDidEndScrollingAnimation(${1:UIScrollView})" },{ "trigger": "printFormattersForPageAtIndex \t func UIPrintPageRenderer -> [UIPrintFormatter]?
" , "contents": "printFormattersForPageAtIndex(${1:Int})" },{ "trigger": "characterRangeAtPoint \t func unknown -> UITextRange?
" , "contents": "characterRangeAtPoint(${1:CGPoint})" },{ "trigger": "finalLayoutAttributesForDisappearingSupplementaryElementOfKind \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "finalLayoutAttributesForDisappearingSupplementaryElementOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "textDidChange \t func unknown -> void" , "contents": "textDidChange(${1:UITextInput?})" },{ "trigger": "scheduleLocalNotification \t func UIApplication -> void" , "contents": "scheduleLocalNotification(${1:UILocalNotification})" },{ "trigger": "tabBarControllerSupportedInterfaceOrientations \t func unknown -> UIInterfaceOrientationMask
" , "contents": "tabBarControllerSupportedInterfaceOrientations(${1:UITabBarController})" },{ "trigger": "UIEdgeInsetsEqualToEdgeInsets \t func UIEvent -> BOOL
" , "contents": "UIEdgeInsetsEqualToEdgeInsets(${1:UIEdgeInsets}, _:${2:UIEdgeInsets})" },{ "trigger": "preferredContentSizeDidChangeForChildContentContainer \t func UIViewController -> void" , "contents": "preferredContentSizeDidChangeForChildContentContainer(${1:UIContentContainer})" },{ "trigger": "UIAccessibilityConvertFrameToScreenCoordinates \t func UIAccessibilityCustomAction -> CGRect
" , "contents": "UIAccessibilityConvertFrameToScreenCoordinates(${1:CGRect}, _:${2:UIView})" },{ "trigger": "addChildViewController \t func UIViewController -> void" , "contents": "addChildViewController(${1:UIViewController})" },{ "trigger": "deleteBackward \t func unknown -> void" , "contents": "deleteBackward(${1:})" },{ "trigger": "prepareForTransitionFromLayout \t func UICollectionViewLayout -> void" , "contents": "prepareForTransitionFromLayout(${1:UICollectionViewLayout})" },{ "trigger": "textRangeFromPosition \t func unknown -> UITextRange?
" , "contents": "textRangeFromPosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "layoutAttributesForItemAtIndexPath \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForItemAtIndexPath(${1:NSIndexPath})" },{ "trigger": "containsPoint \t func UIBezierPath -> BOOL
" , "contents": "containsPoint(${1:CGPoint})" },{ "trigger": "copyWithZone \t func UIApplicationShortcutItem -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "dismissGrantingAccessToURL \t func UIDocumentPickerExtensionViewController -> void" , "contents": "dismissGrantingAccessToURL(${1:NSURL?})" },{ "trigger": "moveRowAtIndexPath \t func UITableView -> void" , "contents": "moveRowAtIndexPath(${1:NSIndexPath}, toIndexPath:${2:NSIndexPath})" },{ "trigger": "tableView \t func unknown -> CGFloat
" , "contents": "tableView(${1:UITableView}, estimatedHeightForFooterInSection:${2:Int})" },{ "trigger": "setContentOffset \t func UIScrollView -> void" , "contents": "setContentOffset(${1:CGPoint}, animated:${2:BOOL})" },{ "trigger": "setBackgroundVerticalPositionAdjustment \t func UIBarButtonItem -> void" , "contents": "setBackgroundVerticalPositionAdjustment(${1:CGFloat}, forBarMetrics:${2:UIBarMetrics})" },{ "trigger": "layoutManager \t func unknown -> BOOL
" , "contents": "layoutManager(${1:NSLayoutManager}, shouldSetLineFragmentRect:${2:UnsafeMutablePointer<CGRect>}, lineFragmentUsedRect:${3:UnsafeMutablePointer<CGRect>}, baselineOffset:${4:UnsafeMutablePointer<CGFloat>}, inTextContainer:${5:NSTextContainer}, forGlyphRange:${6:NSRange})" },{ "trigger": "addItem \t func UIPushBehavior -> void" , "contents": "addItem(${1:UIDynamicItem})" },{ "trigger": "removeKeyCommand \t func UIViewController -> void" , "contents": "removeKeyCommand(${1:UIKeyCommand})" },{ "trigger": "adaptivePresentationStyleForPresentationController \t func unknown -> UIModalPresentationStyle
" , "contents": "adaptivePresentationStyleForPresentationController(${1:UIPresentationController})" },{ "trigger": "searchBar \t func unknown -> void" , "contents": "searchBar(${1:UISearchBar}, textDidChange:${2:String})" },{ "trigger": "copyWithZone \t func UIColor -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "startInteractiveTransition \t func unknown -> void" , "contents": "startInteractiveTransition(${1:UIViewControllerContextTransitioning})" },{ "trigger": "removeChildBehavior \t func UIDynamicBehavior -> void" , "contents": "removeChildBehavior(${1:UIDynamicBehavior})" },{ "trigger": "sendAction \t func UIApplication -> BOOL
" , "contents": "sendAction(${1:Selector}, to:${2:AnyObject?}, from:${3:AnyObject?}, forEvent:${4:UIEvent?})" },{ "trigger": "addLayoutGuide \t func UIView -> void" , "contents": "addLayoutGuide(${1:UILayoutGuide})" },{ "trigger": "showFromToolbar \t func UIActionSheet -> void" , "contents": "showFromToolbar(${1:UIToolbar})" },{ "trigger": "setStroke \t func UIColor -> void" , "contents": "setStroke(${1:})" },{ "trigger": "presentOpenInMenuFromBarButtonItem \t func UIDocumentInteractionController -> BOOL
" , "contents": "presentOpenInMenuFromBarButtonItem(${1:UIBarButtonItem}, animated:${2:BOOL})" },{ "trigger": "alertViewShouldEnableFirstOtherButton \t func unknown -> BOOL
" , "contents": "alertViewShouldEnableFirstOtherButton(${1:UIAlertView})" },{ "trigger": "stopVideoCapture \t func UIImagePickerController -> void" , "contents": "stopVideoCapture(${1:})" },{ "trigger": "rectForHeaderInSection \t func UITableView -> CGRect
" , "contents": "rectForHeaderInSection(${1:Int})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, willBeginEditingRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didRegisterForRemoteNotificationsWithDeviceToken:${2:NSData})" },{ "trigger": "applyLayoutAttributes \t func UICollectionReusableView -> void" , "contents": "applyLayoutAttributes(${1:UICollectionViewLayoutAttributes})" },{ "trigger": "showFromRect \t func UIActionSheet -> void" , "contents": "showFromRect(${1:CGRect}, inView:${2:UIView}, animated:${3:BOOL})" },{ "trigger": "addLayoutManager \t func NSTextStorage -> void" , "contents": "addLayoutManager(${1:NSLayoutManager})" },{ "trigger": "beginFloatingCursorAtPoint \t func unknown -> void" , "contents": "beginFloatingCursorAtPoint(${1:CGPoint})" },{ "trigger": "setNeedsFocusUpdate \t func UIView -> void" , "contents": "setNeedsFocusUpdate(${1:})" },{ "trigger": "encodeCGPoint \t func NSCoder -> void" , "contents": "encodeCGPoint(${1:CGPoint}, forKey:${2:String})" },{ "trigger": "encodeCGRect \t func NSCoder -> void" , "contents": "encodeCGRect(${1:CGRect}, forKey:${2:String})" },{ "trigger": "closestPositionToPoint \t func UITextField -> UITextPosition?
" , "contents": "closestPositionToPoint(${1:CGPoint})" },{ "trigger": "splitViewController \t func unknown -> void" , "contents": "splitViewController(${1:UISplitViewController}, willChangeToDisplayMode:${2:UISplitViewControllerDisplayMode})" },{ "trigger": "removeBehavior \t func UIDynamicAnimator -> void" , "contents": "removeBehavior(${1:UIDynamicBehavior})" },{ "trigger": "tabBar \t func unknown -> void" , "contents": "tabBar(${1:UITabBar}, didEndCustomizingItems:${2:[UITabBarItem]}, changed:${3:BOOL})" },{ "trigger": "performBatchUpdates \t func UICollectionView -> Void?" , "contents": "performBatchUpdates(${1: -> Void?}, completion:${2:BOOL -> Void?})" },{ "trigger": "positionForBar \t func unknown -> UIBarPosition
" , "contents": "positionForBar(${1:UIBarPositioning})" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, canFocusItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "completionVelocity \t func unknown -> CGFloat
" , "contents": "completionVelocity(${1:})" },{ "trigger": "didPresentActionSheet \t func UIDocumentInteractionController -> void" , "contents": "didPresentActionSheet(${1:UIActionSheet})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didUnhighlightRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "boundaryWithIdentifier \t func UICollisionBehavior -> UIBezierPath?
" , "contents": "boundaryWithIdentifier(${1:NSCopying})" },{ "trigger": "copyWithZone \t func NSDataAsset -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "completionsForPartialWordRange \t func UITextChecker -> [AnyObject]?
" , "contents": "completionsForPartialWordRange(${1:NSRange}, inString:${2:String?}, language:${3:String})" },{ "trigger": "rectForRowAtIndexPath \t func UITableView -> CGRect
" , "contents": "rectForRowAtIndexPath(${1:NSIndexPath})" },{ "trigger": "tableView \t func unknown -> String?
" , "contents": "tableView(${1:UITableView}, titleForFooterInSection:${2:Int})" },{ "trigger": "persistentIdentifierForItemAtURL \t func NSFileProviderExtension -> String?
" , "contents": "persistentIdentifierForItemAtURL(${1:NSURL})" },{ "trigger": "notShownAttributeForGlyphAtIndex \t func NSLayoutManager -> BOOL
" , "contents": "notShownAttributeForGlyphAtIndex(${1:Int})" },{ "trigger": "insertTextContainer \t func NSLayoutManager -> void" , "contents": "insertTextContainer(${1:NSTextContainer}, atIndex:${2:Int})" },{ "trigger": "setBackButtonBackgroundVerticalPositionAdjustment \t func UIBarButtonItem -> void" , "contents": "setBackButtonBackgroundVerticalPositionAdjustment(${1:CGFloat}, forBarMetrics:${2:UIBarMetrics})" },{ "trigger": "transitionWasCancelled \t func unknown -> BOOL
" , "contents": "transitionWasCancelled(${1:})" },{ "trigger": "copyWithZone \t func UILocalNotification -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "actionSheet \t func unknown -> void" , "contents": "actionSheet(${1:UIActionSheet}, willDismissWithButtonIndex:${2:Int})" },{ "trigger": "numberOfSections \t func UICollectionView -> Int
" , "contents": "numberOfSections(${1:})" },{ "trigger": "allowedChildViewControllersForUnwindingFromSource \t func UIViewController -> [UIViewController]
" , "contents": "allowedChildViewControllersForUnwindingFromSource(${1:UIStoryboardUnwindSegueSource})" },{ "trigger": "addButtonWithTitle \t func UIActionSheet -> Int
" , "contents": "addButtonWithTitle(${1:String?})" },{ "trigger": "ignoreWord \t func UITextChecker -> void" , "contents": "ignoreWord(${1:String})" },{ "trigger": "encodeWithCoder \t func UITraitCollection -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "splitViewControllerSupportedInterfaceOrientations \t func unknown -> UIInterfaceOrientationMask
" , "contents": "splitViewControllerSupportedInterfaceOrientations(${1:UISplitViewController})" },{ "trigger": "finalFrameForViewController \t func unknown -> CGRect
" , "contents": "finalFrameForViewController(${1:UIViewController})" },{ "trigger": "addMotionEffect \t func UIView -> void" , "contents": "addMotionEffect(${1:UIMotionEffect})" },{ "trigger": "activityViewController \t func unknown -> String
" , "contents": "activityViewController(${1:UIActivityViewController}, dataTypeIdentifierForActivityType:${2:String?})" },{ "trigger": "UIAccessibilityIsGuidedAccessEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsGuidedAccessEnabled(${1:})" },{ "trigger": "persistentStoreTypeForFileType \t func UIManagedDocument -> String
" , "contents": "persistentStoreTypeForFileType(${1:String})" },{ "trigger": "didPresentSearchController \t func unknown -> void" , "contents": "didPresentSearchController(${1:UISearchController})" },{ "trigger": "presentViewController \t func UIViewController -> Void?
" , "contents": "presentViewController(${1:UIViewController}, animated:${2:BOOL}, completion:${3: -> Void?})" },{ "trigger": "tableView \t func unknown -> UITableViewCellEditingStyle
" , "contents": "tableView(${1:UITableView}, editingStyleForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "intrinsicContentSize \t func UIView -> CGSize
" , "contents": "intrinsicContentSize(${1:})" },{ "trigger": "didAnimateFirstHalfOfRotationToInterfaceOrientation \t func UIViewController -> void" , "contents": "didAnimateFirstHalfOfRotationToInterfaceOrientation(${1:UIInterfaceOrientation})" },{ "trigger": "backgroundImageForState \t func UISegmentedControl -> UIImage?
" , "contents": "backgroundImageForState(${1:UIControlState}, barMetrics:${2:UIBarMetrics})" },{ "trigger": "setViewControllers \t func UITabBarController -> void" , "contents": "setViewControllers(${1:[UIViewController]?}, animated:${2:BOOL})" },{ "trigger": "setTitleShadowColor \t func UIButton -> void" , "contents": "setTitleShadowColor(${1:UIColor?}, forState:${2:UIControlState})" },{ "trigger": "indexPathsForVisibleItems \t func UICollectionView -> [NSIndexPath]
" , "contents": "indexPathsForVisibleItems(${1:})" },{ "trigger": "modelIdentifierForElementAtIndexPath \t func unknown -> String?
" , "contents": "modelIdentifierForElementAtIndexPath(${1:NSIndexPath}, inView:${2:UIView})" },{ "trigger": "accommodatePresentedItemDeletionWithCompletionHandler \t func UIDocument -> Void
" , "contents": "accommodatePresentedItemDeletionWithCompletionHandler(${1:NSError? -> Void})" },{ "trigger": "numberOfSectionsInTableView \t func unknown -> Int
" , "contents": "numberOfSectionsInTableView(${1:UITableView})" },{ "trigger": "restoreUserActivityState \t func UIResponder -> void" , "contents": "restoreUserActivityState(${1:NSUserActivity})" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, shouldSaveApplicationState:${2:NSCoder})" },{ "trigger": "setEditing \t func UITableView -> void" , "contents": "setEditing(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "setActions \t func UIMutableUserNotificationCategory -> void" , "contents": "setActions(${1:[UIUserNotificationAction]?}, forContext:${2:UIUserNotificationActionContext})" },{ "trigger": "collectionView \t func unknown -> CGFloat
" , "contents": "collectionView(${1:UICollectionView}, layout:${2:UICollectionViewLayout}, minimumLineSpacingForSectionAtIndex:${3:Int})" },{ "trigger": "comparePosition \t func unknown -> NSComparisonResult
" , "contents": "comparePosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "tableView \t func UITableViewController -> String?
" , "contents": "tableView(${1:UITableView}, titleForFooterInSection:${2:Int})" },{ "trigger": "didUpdateFocusInContext \t func UIViewController -> void" , "contents": "didUpdateFocusInContext(${1:UIFocusUpdateContext}, withAnimationCoordinator:${2:UIFocusAnimationCoordinator})" },{ "trigger": "scopeBarButtonTitleTextAttributesForState \t func UISearchBar -> [String" , "contents": "scopeBarButtonTitleTextAttributesForState(${1:UIControlState})" },{ "trigger": "numberOfRowsInSection \t func UITableView -> Int
" , "contents": "numberOfRowsInSection(${1:Int})" },{ "trigger": "applicationFinishedRestoringState \t func unknown -> void" , "contents": "applicationFinishedRestoringState(${1:})" },{ "trigger": "UIInterfaceOrientationIsLandscape \t func UIInterfaceOrientationMask -> BOOL
" , "contents": "UIInterfaceOrientationIsLandscape(${1:UIInterfaceOrientation})" },{ "trigger": "selectionWillChange \t func UIInputViewController -> void" , "contents": "selectionWillChange(${1:UITextInput?})" },{ "trigger": "angularVelocityForItem \t func UIDynamicItemBehavior -> CGFloat
" , "contents": "angularVelocityForItem(${1:UIDynamicItem})" },{ "trigger": "UIFloatRangeMake \t func UIFocusAnimationCoordinator -> UIFloatRange
" , "contents": "UIFloatRangeMake(${1:CGFloat}, _:${2:CGFloat})" },{ "trigger": "backgroundImageForState \t func UIBarButtonItem -> UIImage?
" , "contents": "backgroundImageForState(${1:UIControlState}, barMetrics:${2:UIBarMetrics})" },{ "trigger": "imageWithAlignmentRectInsets \t func UIImage -> UIImage
" , "contents": "imageWithAlignmentRectInsets(${1:UIEdgeInsets})" },{ "trigger": "pushViewController \t func UINavigationController -> void" , "contents": "pushViewController(${1:UIViewController}, animated:${2:BOOL})" },{ "trigger": "pressesCancelled \t func UIResponder -> void" , "contents": "pressesCancelled(${1:Set<UIPress>}, withEvent:${2:UIPressesEvent?})" },{ "trigger": "tableView \t func UITableViewController -> CGFloat
" , "contents": "tableView(${1:UITableView}, heightForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "constraintGreaterThanOrEqualToAnchor \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintGreaterThanOrEqualToAnchor(${1:NSLayoutDimension!}, multiplier:${2:CGFloat}, constant:${3:CGFloat})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didUpdateUserActivity:${2:NSUserActivity})" },{ "trigger": "setStatusBarStyle \t func UIApplication -> void" , "contents": "setStatusBarStyle(${1:UIStatusBarStyle}, animated:${2:BOOL})" },{ "trigger": "updateFocusIfNeeded \t func UIViewController -> void" , "contents": "updateFocusIfNeeded(${1:})" },{ "trigger": "setWidth \t func UISegmentedControl -> void" , "contents": "setWidth(${1:CGFloat}, forSegmentAtIndex:${2:Int})" },{ "trigger": "shouldRemovePresentersView \t func UIPresentationController -> BOOL
" , "contents": "shouldRemovePresentersView(${1:})" },{ "trigger": "encodeWithCoder \t func UILocalNotification -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "printerPickerControllerDidDismiss \t func unknown -> void" , "contents": "printerPickerControllerDidDismiss(${1:UIPrinterPickerController})" },{ "trigger": "searchBarSearchButtonClicked \t func unknown -> void" , "contents": "searchBarSearchButtonClicked(${1:UISearchBar})" },{ "trigger": "tableView \t func UITableViewController -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldIndentWhileEditingRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "loadRequest \t func UIWebView -> void" , "contents": "loadRequest(${1:NSURLRequest})" },{ "trigger": "addTextContainer \t func NSLayoutManager -> void" , "contents": "addTextContainer(${1:NSTextContainer})" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, openURL:${2:NSURL}, options:${3:[String })" },{ "trigger": "updateUserActivityState \t func UIDocument -> void" , "contents": "updateUserActivityState(${1:NSUserActivity})" },{ "trigger": "setCollectionViewLayout \t func UICollectionView -> void" , "contents": "setCollectionViewLayout(${1:UICollectionViewLayout}, animated:${2:BOOL})" },{ "trigger": "actionsForContext \t func UIUserNotificationCategory -> [UIUserNotificationAction]?
" , "contents": "actionsForContext(${1:UIUserNotificationActionContext})" },{ "trigger": "attachmentBoundsForTextContainer \t func NSTextAttachment -> CGRect
" , "contents": "attachmentBoundsForTextContainer(${1:NSTextContainer?}, proposedLineFragment:${2:CGRect}, glyphPosition:${3:CGPoint}, characterIndex:${4:Int})" },{ "trigger": "locationInView \t func UITouch -> CGPoint
" , "contents": "locationInView(${1:UIView?})" },{ "trigger": "decreaseSize \t func NSObject -> void" , "contents": "decreaseSize(${1:AnyObject?})" },{ "trigger": "removeTarget \t func UIControl -> void" , "contents": "removeTarget(${1:AnyObject?}, action:${2:Selector}, forControlEvents:${3:UIControlEvents})" },{ "trigger": "valuesForPasteboardType \t func UIPasteboard -> [AnyObject]?
" , "contents": "valuesForPasteboardType(${1:String}, inItemSet:${2:NSIndexSet?})" },{ "trigger": "updateFocusIfNeeded \t func unknown -> void" , "contents": "updateFocusIfNeeded(${1:})" },{ "trigger": "initialLayoutAttributesForAppearingItemAtIndexPath \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "initialLayoutAttributesForAppearingItemAtIndexPath(${1:NSIndexPath})" },{ "trigger": "relinquishPresentedItemToReader \t func UIDocument -> Void?" , "contents": "relinquishPresentedItemToReader(${1: -> Void? -> Void})" },{ "trigger": "copyWithZone \t func NSParagraphStyle -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "actionSheet \t func UIDocumentInteractionController -> void" , "contents": "actionSheet(${1:UIActionSheet}, willDismissWithButtonIndex:${2:Int})" },{ "trigger": "searchBar \t func unknown -> BOOL
" , "contents": "searchBar(${1:UISearchBar}, shouldChangeTextInRange:${2:NSRange}, replacementText:${3:String})" },{ "trigger": "presentPreviewAnimated \t func UIDocumentInteractionController -> BOOL
" , "contents": "presentPreviewAnimated(${1:BOOL})" },{ "trigger": "shouldPerformSegueWithIdentifier \t func UIViewController -> BOOL
" , "contents": "shouldPerformSegueWithIdentifier(${1:String}, sender:${2:AnyObject?})" },{ "trigger": "didReceiveMemoryWarning \t func UIViewController -> void" , "contents": "didReceiveMemoryWarning(${1:})" },{ "trigger": "UIAccessibilityIsMonoAudioEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsMonoAudioEnabled(${1:})" },{ "trigger": "constraintGreaterThanOrEqualToAnchor \t func NSLayoutAnchor -> NSLayoutConstraint!
" , "contents": "constraintGreaterThanOrEqualToAnchor(${1:NSLayoutAnchor!}, constant:${2:CGFloat})" },{ "trigger": "dismissalTransitionDidEnd \t func UIPresentationController -> void" , "contents": "dismissalTransitionDidEnd(${1:BOOL})" },{ "trigger": "numberOfItemsInSection \t func UICollectionView -> Int
" , "contents": "numberOfItemsInSection(${1:Int})" },{ "trigger": "imagePickerController \t func unknown -> void" , "contents": "imagePickerController(${1:UIImagePickerController}, didFinishPickingImage:${2:UIImage}, editingInfo:${3:[String })" },{ "trigger": "locationInView \t func UIGestureRecognizer -> CGPoint
" , "contents": "locationInView(${1:UIView?})" },{ "trigger": "indexPathForCell \t func UITableView -> NSIndexPath?
" , "contents": "indexPathForCell(${1:UITableViewCell})" },{ "trigger": "insertDictationResultPlaceholder \t func UITextView -> AnyObject
" , "contents": "insertDictationResultPlaceholder(${1:})" },{ "trigger": "shouldUpdateFocusInContext \t func UIView -> BOOL
" , "contents": "shouldUpdateFocusInContext(${1:UIFocusUpdateContext})" },{ "trigger": "textRangeFromPosition \t func UITextField -> UITextRange?
" , "contents": "textRangeFromPosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "insertDictationResult \t func UITextView -> void" , "contents": "insertDictationResult(${1:[UIDictationPhrase]})" },{ "trigger": "searchDisplayController \t func unknown -> BOOL
" , "contents": "searchDisplayController(${1:UISearchDisplayController}, shouldReloadTableForSearchString:${2:String?})" },{ "trigger": "setNavigationBarHidden \t func UINavigationController -> void" , "contents": "setNavigationBarHidden(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "itemSetWithPasteboardTypes \t func UIPasteboard -> NSIndexSet?
" , "contents": "itemSetWithPasteboardTypes(${1:[AnyObject]})" },{ "trigger": "UIDeviceOrientationIsLandscape \t func UIDictationPhrase -> BOOL
" , "contents": "UIDeviceOrientationIsLandscape(${1:UIDeviceOrientation})" },{ "trigger": "usedRectForTextContainer \t func NSLayoutManager -> CGRect
" , "contents": "usedRectForTextContainer(${1:NSTextContainer})" },{ "trigger": "backgroundVerticalPositionAdjustmentForBarMetrics \t func UIBarButtonItem -> CGFloat
" , "contents": "backgroundVerticalPositionAdjustmentForBarMetrics(${1:UIBarMetrics})" },{ "trigger": "registerImage \t func UIImageAsset -> void" , "contents": "registerImage(${1:UIImage}, withTraitCollection:${2:UITraitCollection})" },{ "trigger": "registerClass \t func UITableView -> void" , "contents": "registerClass(${1:AnyClass?}, forHeaderFooterViewReuseIdentifier:${2:String})" },{ "trigger": "completeTransition \t func unknown -> void" , "contents": "completeTransition(${1:BOOL})" },{ "trigger": "printerPickerControllerParentViewController \t func unknown -> UIViewController?
" , "contents": "printerPickerControllerParentViewController(${1:UIPrinterPickerController})" },{ "trigger": "dismissAnimated \t func UIPrinterPickerController -> void" , "contents": "dismissAnimated(${1:BOOL})" },{ "trigger": "tabBarController \t func unknown -> void" , "contents": "tabBarController(${1:UITabBarController}, didSelectViewController:${2:UIViewController})" },{ "trigger": "setViewControllers \t func UINavigationController -> void" , "contents": "setViewControllers(${1:[UIViewController]}, animated:${2:BOOL})" },{ "trigger": "UIImagePNGRepresentation \t func UIImagePickerController -> NSData?
" , "contents": "UIImagePNGRepresentation(${1:UIImage})" },{ "trigger": "UIOffsetFromString \t func UIPageControl -> UIOffset
" , "contents": "UIOffsetFromString(${1:String})" },{ "trigger": "scrollViewWillBeginDecelerating \t func unknown -> void" , "contents": "scrollViewWillBeginDecelerating(${1:UIScrollView})" },{ "trigger": "handleError \t func UIDocument -> void" , "contents": "handleError(${1:NSError}, userInteractionPermitted:${2:BOOL})" },{ "trigger": "titleTextAttributesForState \t func UISegmentedControl -> [NSObject" , "contents": "titleTextAttributesForState(${1:UIControlState})" },{ "trigger": "clearButtonRectForBounds \t func UITextField -> CGRect
" , "contents": "clearButtonRectForBounds(${1:CGRect})" },{ "trigger": "characterRangeByExtendingPosition \t func unknown -> UITextRange?
" , "contents": "characterRangeByExtendingPosition(${1:UITextPosition}, inDirection:${2:UITextLayoutDirection})" },{ "trigger": "sendEvent \t func UIWindow -> void" , "contents": "sendEvent(${1:UIEvent})" },{ "trigger": "update \t func UIMenuController -> void" , "contents": "update(${1:})" },{ "trigger": "loadFromContents \t func UIDocument -> void" , "contents": "loadFromContents(${1:AnyObject}, ofType:${2:String?})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didFailToContinueUserActivityWithType:${2:String}, error:${3:NSError})" },{ "trigger": "isIgnoringInteractionEvents \t func UIApplication -> BOOL
" , "contents": "isIgnoringInteractionEvents(${1:})" },{ "trigger": "searchDisplayControllerDidBeginSearch \t func unknown -> void" , "contents": "searchDisplayControllerDidBeginSearch(${1:UISearchDisplayController})" },{ "trigger": "adjustTextPositionByCharacterOffset \t func unknown -> void" , "contents": "adjustTextPositionByCharacterOffset(${1:Int})" },{ "trigger": "ignoreSnapshotOnNextApplicationLaunch \t func UIApplication -> void" , "contents": "ignoreSnapshotOnNextApplicationLaunch(${1:})" },{ "trigger": "constraintsAffectingLayoutForAxis \t func UIView -> [NSLayoutConstraint]
" , "contents": "constraintsAffectingLayoutForAxis(${1:UILayoutConstraintAxis})" },{ "trigger": "scrollViewDidScrollToTop \t func UITableViewController -> void" , "contents": "scrollViewDidScrollToTop(${1:UIScrollView})" },{ "trigger": "enumerateLineFragmentsForGlyphRange \t func NSLayoutManager -> Void
" , "contents": "enumerateLineFragmentsForGlyphRange(${1:NSRange}, usingBlock:${2:CGRect}, CGRect:${3:}, NSTextContainer:${4:}, NSRange:${5:}, UnsafeMutablePointer<BOOL>:${6:})" },{ "trigger": "willPresentActionSheet \t func unknown -> void" , "contents": "willPresentActionSheet(${1:UIActionSheet})" },{ "trigger": "tableView \t func unknown -> CGFloat
" , "contents": "tableView(${1:UITableView}, heightForFooterInSection:${2:Int})" },{ "trigger": "setBackButtonBackgroundImage \t func UIBarButtonItem -> void" , "contents": "setBackButtonBackgroundImage(${1:UIImage?}, forState:${2:UIControlState}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "setMinimumBackgroundFetchInterval \t func UIApplication -> void" , "contents": "setMinimumBackgroundFetchInterval(${1:NSTimeInterval})" },{ "trigger": "applicationSignificantTimeChange \t func unknown -> void" , "contents": "applicationSignificantTimeChange(${1:UIApplication})" },{ "trigger": "viewWillAppear \t func UIViewController -> void" , "contents": "viewWillAppear(${1:BOOL})" },{ "trigger": "registerForRemoteNotificationTypes \t func UIApplication -> void" , "contents": "registerForRemoteNotificationTypes(${1:UIRemoteNotificationType})" },{ "trigger": "addChildBehavior \t func UIDynamicBehavior -> void" , "contents": "addChildBehavior(${1:UIDynamicBehavior})" },{ "trigger": "objectForKey \t func UIFontDescriptor -> AnyObject?
" , "contents": "objectForKey(${1:String})" },{ "trigger": "scrollViewDidEndDragging \t func UICollectionViewController -> void" , "contents": "scrollViewDidEndDragging(${1:UIScrollView}, willDecelerate:${2:BOOL})" },{ "trigger": "drawInRect \t func UIImage -> void" , "contents": "drawInRect(${1:CGRect}, blendMode:${2:CGBlendMode}, alpha:${3:CGFloat})" },{ "trigger": "maximumValueImageRectForBounds \t func UISlider -> CGRect
" , "contents": "maximumValueImageRectForBounds(${1:CGRect})" },{ "trigger": "containsPasteboardTypes \t func UIPasteboard -> BOOL
" , "contents": "containsPasteboardTypes(${1:[String]}, inItemSet:${2:NSIndexSet?})" },{ "trigger": "prepareForAnimatedBoundsChange \t func UICollectionViewLayout -> void" , "contents": "prepareForAnimatedBoundsChange(${1:CGRect})" },{ "trigger": "UIGuidedAccessRestrictionStateForIdentifier \t func UIImage -> UIGuidedAccessRestrictionState
" , "contents": "UIGuidedAccessRestrictionStateForIdentifier(${1:String})" },{ "trigger": "ensureGlyphsForCharacterRange \t func NSLayoutManager -> void" , "contents": "ensureGlyphsForCharacterRange(${1:NSRange})" },{ "trigger": "imageForBounds \t func NSTextAttachment -> UIImage?
" , "contents": "imageForBounds(${1:CGRect}, textContainer:${2:NSTextContainer?}, characterIndex:${3:Int})" },{ "trigger": "scopeBarButtonBackgroundImageForState \t func UISearchBar -> UIImage?
" , "contents": "scopeBarButtonBackgroundImageForState(${1:UIControlState})" },{ "trigger": "textFieldDidEndEditing \t func unknown -> void" , "contents": "textFieldDidEndEditing(${1:UITextField})" },{ "trigger": "addItem \t func UIGravityBehavior -> void" , "contents": "addItem(${1:UIDynamicItem})" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, handleWatchKitExtensionRequest:${2:[NSObject }, reply:${3:[NSObject })" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didEndEditingRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "CGGlyphAtIndex \t func NSLayoutManager -> CGGlyph
" , "contents": "CGGlyphAtIndex(${1:Int})" },{ "trigger": "scrollViewDidEndZooming \t func unknown -> void" , "contents": "scrollViewDidEndZooming(${1:UIScrollView}, withView:${2:UIView?}, atScale:${3:CGFloat})" },{ "trigger": "addCurveToPoint \t func UIBezierPath -> void" , "contents": "addCurveToPoint(${1:CGPoint}, controlPoint1:${2:CGPoint}, controlPoint2:${3:CGPoint})" },{ "trigger": "convertPoint \t func UIView -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, toView:${2:UIView?})" },{ "trigger": "documentPickerWasCancelled \t func unknown -> void" , "contents": "documentPickerWasCancelled(${1:UIDocumentPickerViewController})" },{ "trigger": "pressesForGestureRecognizer \t func UIPressesEvent -> Set UIPress 
" , "contents": "pressesForGestureRecognizer(${1:UIGestureRecognizer})" },{ "trigger": "popoverControllerDidDismissPopover \t func unknown -> void" , "contents": "popoverControllerDidDismissPopover(${1:UIPopoverController})" },{ "trigger": "gestureRecognizer \t func UITableViewCell -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldBeRequiredToFailByGestureRecognizer:${2:UIGestureRecognizer})" },{ "trigger": "coalescedTouchesForTouch \t func UIEvent -> [UITouch]?
" , "contents": "coalescedTouchesForTouch(${1:UITouch})" },{ "trigger": "transitionFromViewController \t func UIViewController -> Void?" , "contents": "transitionFromViewController(${1:UIViewController}, toViewController:${2:UIViewController}, duration:${3:NSTimeInterval}, options:${4:UIViewAnimationOptions}, animations:${5: -> Void?}, completion:${6:BOOL -> Void?})" },{ "trigger": "animationControllerForPresentedController \t func unknown -> UIViewControllerAnimatedTransitioning?
" , "contents": "animationControllerForPresentedController(${1:UIViewController}, presentingController:${2:UIViewController}, sourceController:${3:UIViewController})" },{ "trigger": "isViewLoaded \t func UIViewController -> BOOL
" , "contents": "isViewLoaded(${1:})" },{ "trigger": "numberOfSectionsInTableView \t func UITableViewController -> Int
" , "contents": "numberOfSectionsInTableView(${1:UITableView})" },{ "trigger": "UIGraphicsAddPDFContextDestinationAtPoint \t func UIGravityBehavior -> void" , "contents": "UIGraphicsAddPDFContextDestinationAtPoint(${1:String}, _:${2:CGPoint})" },{ "trigger": "updateUserActivityState \t func UIResponder -> void" , "contents": "updateUserActivityState(${1:NSUserActivity})" },{ "trigger": "viewForZoomingInScrollView \t func unknown -> UIView?
" , "contents": "viewForZoomingInScrollView(${1:UIScrollView})" },{ "trigger": "targetOffsetFromCenterForItem \t func UIPushBehavior -> UIOffset
" , "contents": "targetOffsetFromCenterForItem(${1:UIDynamicItem})" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, didEndDisplayingCell:${2:UICollectionViewCell}, forItemAtIndexPath:${3:NSIndexPath})" },{ "trigger": "gestureRecognizer \t func UITableViewCell -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldRecognizeSimultaneouslyWithGestureRecognizer:${2:UIGestureRecognizer})" },{ "trigger": "scrollToRowAtIndexPath \t func UITableView -> void" , "contents": "scrollToRowAtIndexPath(${1:NSIndexPath}, atScrollPosition:${2:UITableViewScrollPosition}, animated:${3:BOOL})" },{ "trigger": "canOpenURL \t func UIApplication -> BOOL
" , "contents": "canOpenURL(${1:NSURL})" },{ "trigger": "presentedItemDidMoveToURL \t func UIDocument -> void" , "contents": "presentedItemDidMoveToURL(${1:NSURL})" },{ "trigger": "setItems \t func UIToolbar -> void" , "contents": "setItems(${1:[UIBarButtonItem]?}, animated:${2:BOOL})" },{ "trigger": "pageViewControllerSupportedInterfaceOrientations \t func unknown -> UIInterfaceOrientationMask
" , "contents": "pageViewControllerSupportedInterfaceOrientations(${1:UIPageViewController})" },{ "trigger": "scrollViewDidZoom \t func UIWebView -> void" , "contents": "scrollViewDidZoom(${1:UIScrollView})" },{ "trigger": "cancelAllLocalNotifications \t func UIApplication -> void" , "contents": "cancelAllLocalNotifications(${1:})" },{ "trigger": "removeLayoutGuide \t func UIView -> void" , "contents": "removeLayoutGuide(${1:UILayoutGuide})" },{ "trigger": "presentModalViewController \t func UIViewController -> void" , "contents": "presentModalViewController(${1:UIViewController}, animated:${2:BOOL})" },{ "trigger": "buttonTitleAtIndex \t func UIAlertView -> String?
" , "contents": "buttonTitleAtIndex(${1:Int})" },{ "trigger": "animationControllerForPresentedController \t func UISearchController -> UIViewControllerAnimatedTransitioning?
" , "contents": "animationControllerForPresentedController(${1:UIViewController}, presentingController:${2:UIViewController}, sourceController:${3:UIViewController})" },{ "trigger": "sizeWithFont \t func NSString -> CGSize
" , "contents": "sizeWithFont(${1:UIFont!}, forWidth:${2:CGFloat}, lineBreakMode:${3:NSLineBreakMode})" },{ "trigger": "loadViewIfNeeded \t func UIViewController -> void" , "contents": "loadViewIfNeeded(${1:})" },{ "trigger": "UIEdgeInsetsInsetRect \t func UIEvent -> CGRect
" , "contents": "UIEdgeInsetsInsetRect(${1:CGRect}, _:${2:UIEdgeInsets})" },{ "trigger": "setBackgroundImage \t func UIBarButtonItem -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forState:${2:UIControlState}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "setBackgroundImage \t func UISegmentedControl -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forState:${2:UIControlState}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "textViewShouldEndEditing \t func unknown -> BOOL
" , "contents": "textViewShouldEndEditing(${1:UITextView})" },{ "trigger": "insertDictationResult \t func UITextField -> void" , "contents": "insertDictationResult(${1:[UIDictationPhrase]})" },{ "trigger": "documentInteractionControllerDidDismissOpenInMenu \t func unknown -> void" , "contents": "documentInteractionControllerDidDismissOpenInMenu(${1:UIDocumentInteractionController})" },{ "trigger": "backgroundImageForState \t func UIButton -> UIImage?
" , "contents": "backgroundImageForState(${1:UIControlState})" },{ "trigger": "insertSubview \t func UIView -> void" , "contents": "insertSubview(${1:UIView}, belowSubview:${2:UIView})" },{ "trigger": "invalidateDecorationElementsOfKind \t func UICollectionViewLayoutInvalidationContext -> void" , "contents": "invalidateDecorationElementsOfKind(${1:String}, atIndexPaths:${2:[NSIndexPath]})" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, canPerformAction:${2:Selector}, forRowAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "reloadItemsAtIndexPaths \t func UICollectionView -> void" , "contents": "reloadItemsAtIndexPaths(${1:[NSIndexPath]})" },{ "trigger": "collectionView \t func unknown -> Int
" , "contents": "collectionView(${1:UICollectionView}, numberOfItemsInSection:${2:Int})" },{ "trigger": "needsUpdateConstraints \t func UIView -> BOOL
" , "contents": "needsUpdateConstraints(${1:})" },{ "trigger": "prepareForPresentationInMode \t func UIDocumentPickerExtensionViewController -> void" , "contents": "prepareForPresentationInMode(${1:UIDocumentPickerMode})" },{ "trigger": "setNeedsFocusUpdate \t func UIPresentationController -> void" , "contents": "setNeedsFocusUpdate(${1:})" },{ "trigger": "setItems \t func UITabBar -> void" , "contents": "setItems(${1:[UITabBarItem]?}, animated:${2:BOOL})" },{ "trigger": "copyWithZone \t func UICollectionViewLayoutAttributes -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "NSStringFromUIOffset \t func NSTextAlignment -> String
" , "contents": "NSStringFromUIOffset(${1:UIOffset})" },{ "trigger": "titleForSegmentAtIndex \t func UISegmentedControl -> String?
" , "contents": "titleForSegmentAtIndex(${1:Int})" },{ "trigger": "application \t func unknown -> UIInterfaceOrientationMask
" , "contents": "application(${1:UIApplication}, supportedInterfaceOrientationsForWindow:${2:UIWindow?})" },{ "trigger": "saveToURL \t func UIDocument -> Void?
" , "contents": "saveToURL(${1:NSURL}, forSaveOperation:${2:UIDocumentSaveOperation}, completionHandler:${3:BOOL -> Void?})" },{ "trigger": "layoutManager \t func unknown -> void" , "contents": "layoutManager(${1:NSLayoutManager}, didCompleteLayoutForTextContainer:${2:NSTextContainer?}, atEnd:${3:BOOL})" },{ "trigger": "shouldAutomaticallyForwardAppearanceMethods \t func UIViewController -> BOOL
" , "contents": "shouldAutomaticallyForwardAppearanceMethods(${1:})" },{ "trigger": "setPositionAdjustment \t func UISearchBar -> void" , "contents": "setPositionAdjustment(${1:UIOffset}, forSearchBarIcon:${2:UISearchBarIcon})" },{ "trigger": "animateAlongsideTransitionInView \t func unknown -> Void?" , "contents": "animateAlongsideTransitionInView(${1:UIView?}, animation:${2:UIViewControllerTransitionCoordinatorContext -> Void?}, completion:${3:UIViewControllerTransitionCoordinatorContext -> Void?})" },{ "trigger": "documentInteractionControllerRectForPreview \t func unknown -> CGRect
" , "contents": "documentInteractionControllerRectForPreview(${1:UIDocumentInteractionController})" },{ "trigger": "UIAccessibilityIsInvertColorsEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsInvertColorsEnabled(${1:})" },{ "trigger": "updateViewConstraints \t func UIViewController -> void" , "contents": "updateViewConstraints(${1:})" },{ "trigger": "readFromURL \t func UIDocument -> void" , "contents": "readFromURL(${1:NSURL})" },{ "trigger": "remoteControlReceivedWithEvent \t func UIResponder -> void" , "contents": "remoteControlReceivedWithEvent(${1:UIEvent?})" },{ "trigger": "drawTextInRect \t func UITextField -> void" , "contents": "drawTextInRect(${1:CGRect})" },{ "trigger": "invalidateDisplayForCharacterRange \t func NSLayoutManager -> void" , "contents": "invalidateDisplayForCharacterRange(${1:NSRange})" },{ "trigger": "sectionIndexTitlesForTableView \t func UIPickerView -> [String]?
" , "contents": "sectionIndexTitlesForTableView(${1:UITableView})" },{ "trigger": "layoutAttributesForSupplementaryViewOfKind \t func UIDynamicAnimator -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForSupplementaryViewOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "searchDisplayController \t func unknown -> void" , "contents": "searchDisplayController(${1:UISearchDisplayController}, willUnloadSearchResultsTableView:${2:UITableView})" },{ "trigger": "CGRectFromString \t func unknown -> CGRect
" , "contents": "CGRectFromString(${1:String})" },{ "trigger": "splitViewController \t func unknown -> BOOL
" , "contents": "splitViewController(${1:UISplitViewController}, shouldHideViewController:${2:UIViewController}, inOrientation:${3:UIInterfaceOrientation})" },{ "trigger": "copyWithZone \t func UIPrintFormatter -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "encodeWithCoder \t func NSTextTab -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "CGSizeFromString \t func unknown -> CGSize
" , "contents": "CGSizeFromString(${1:String})" },{ "trigger": "backButtonBackgroundImageForState \t func UIBarButtonItem -> UIImage?
" , "contents": "backButtonBackgroundImageForState(${1:UIControlState}, barMetrics:${2:UIBarMetrics})" },{ "trigger": "accessibilityElementCount \t func NSObject -> Int
" , "contents": "accessibilityElementCount(${1:})" },{ "trigger": "UIAccessibilityRegisterGestureConflictWithZoom \t func UIAccessibilityScrollDirection -> void" , "contents": "UIAccessibilityRegisterGestureConflictWithZoom(${1:})" },{ "trigger": "printInteractionControllerWillPresentPrinterOptions \t func unknown -> void" , "contents": "printInteractionControllerWillPresentPrinterOptions(${1:UIPrintInteractionController})" },{ "trigger": "positionWithinRange \t func UITextField -> UITextPosition?
" , "contents": "positionWithinRange(${1:UITextRange}, farthestInDirection:${2:UITextLayoutDirection})" },{ "trigger": "unwindForSegue \t func UIViewController -> void" , "contents": "unwindForSegue(${1:UIStoryboardSegue}, towardsViewController:${2:UIViewController})" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldIndentWhileEditingRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "viewForRow \t func UIPickerView -> UIView?
" , "contents": "viewForRow(${1:Int}, forComponent:${2:Int})" },{ "trigger": "constraintEqualToAnchor \t func NSLayoutAnchor -> NSLayoutConstraint!
" , "contents": "constraintEqualToAnchor(${1:NSLayoutAnchor!})" },{ "trigger": "drawGlyphsForGlyphRange \t func NSLayoutManager -> void" , "contents": "drawGlyphsForGlyphRange(${1:NSRange}, atPoint:${2:CGPoint})" },{ "trigger": "scrollViewWillBeginZooming \t func unknown -> void" , "contents": "scrollViewWillBeginZooming(${1:UIScrollView}, withView:${2:UIView?})" },{ "trigger": "beginGeneratingDeviceOrientationNotifications \t func UIDevice -> void" , "contents": "beginGeneratingDeviceOrientationNotifications(${1:})" },{ "trigger": "setHidesBackButton \t func UINavigationItem -> void" , "contents": "setHidesBackButton(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "attachmentBoundsForTextContainer \t func unknown -> CGRect
" , "contents": "attachmentBoundsForTextContainer(${1:NSTextContainer?}, proposedLineFragment:${2:CGRect}, glyphPosition:${3:CGPoint}, characterIndex:${4:Int})" },{ "trigger": "numberOfSectionsInCollectionView \t func UICollectionViewController -> Int
" , "contents": "numberOfSectionsInCollectionView(${1:UICollectionView})" },{ "trigger": "transitionDuration \t func unknown -> NSTimeInterval
" , "contents": "transitionDuration(${1:UIViewControllerContextTransitioning?})" },{ "trigger": "sizeForChildContentContainer \t func UIPresentationController -> CGSize
" , "contents": "sizeForChildContentContainer(${1:UIContentContainer}, withParentContainerSize:${2:CGSize})" },{ "trigger": "resignKeyWindow \t func UIWindow -> void" , "contents": "resignKeyWindow(${1:})" },{ "trigger": "tintColorDidChange \t func UIView -> void" , "contents": "tintColorDidChange(${1:})" },{ "trigger": "addItem \t func UIDynamicItemBehavior -> void" , "contents": "addItem(${1:UIDynamicItem})" },{ "trigger": "layoutAttributesForSupplementaryElementOfKind \t func UICollectionView -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForSupplementaryElementOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "popoverControllerShouldDismissPopover \t func unknown -> BOOL
" , "contents": "popoverControllerShouldDismissPopover(${1:UIPopoverController})" },{ "trigger": "gestureRecognizer \t func UITableViewCell -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldReceivePress:${2:UIPress})" },{ "trigger": "traitCollectionDidChange \t func UIScreen -> void" , "contents": "traitCollectionDidChange(${1:UITraitCollection?})" },{ "trigger": "rightViewRectForBounds \t func UITextField -> CGRect
" , "contents": "rightViewRectForBounds(${1:CGRect})" },{ "trigger": "firstRectForRange \t func unknown -> CGRect
" , "contents": "firstRectForRange(${1:UITextRange})" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, didEndDisplayingSupplementaryView:${2:UICollectionReusableView}, forElementOfKind:${3:String}, atIndexPath:${4:NSIndexPath})" }]
 }
