{
"scope": "source.swift",
"completions":
 [ 
{ "trigger": "edgesForExtendedLayout \t UIRectEdge", "contents": "edgesForExtendedLayout" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldDeselectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "invalidationContextForBoundsChange \t func UICollectionViewLayout -> UICollectionViewLayoutInvalidationContext
" , "contents": "invalidationContextForBoundsChange(${1:CGRect})" },{ "trigger": "pointSize \t CGFloat", "contents": "pointSize" },{ "trigger": "removeItem \t func UIGravityBehavior -> void" , "contents": "removeItem(${1:UIDynamicItem})" },{ "trigger": "unmarkText \t func UITextView -> void" , "contents": "unmarkText(${1:})" },{ "trigger": "isAccessibilityElement \t BOOL", "contents": "isAccessibilityElement" },{ "trigger": "tableView \t func UITableViewController -> CGFloat
" , "contents": "tableView(${1:UITableView}, heightForHeaderInSection:${2:Int})" },{ "trigger": "borderRectForBounds \t func UITextField -> CGRect
" , "contents": "borderRectForBounds(${1:CGRect})" },{ "trigger": "NSObject.cut \t class NSObject -> void" , "contents": "NSObject.cut(${1:AnyObject?})" },{ "trigger": "exclusiveTouch \t BOOL", "contents": "exclusiveTouch" },{ "trigger": "UIKeyboardCenterEndUserInfoKey \t String", "contents": "UIKeyboardCenterEndUserInfoKey" },{ "trigger": "backgroundTimeRemaining \t NSTimeInterval", "contents": "backgroundTimeRemaining" },{ "trigger": "offsetFromPosition \t func unknown -> Int
" , "contents": "offsetFromPosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "EditedAttributes \t NSTextStorageEditActions", "contents": "EditedAttributes" },{ "trigger": "pinchGestureRecognizer \t UIPinchGestureRecognizer", "contents": "pinchGestureRecognizer" },{ "trigger": "UIProgressViewStyle \t UIProgressViewStyle", "contents": "UIProgressViewStyle" },{ "trigger": "containsPoint \t func UIRegion -> BOOL
" , "contents": "containsPoint(${1:CGPoint})" },{ "trigger": "rangeOfNominallySpacedGlyphsContainingIndex \t func NSLayoutManager -> NSRange
" , "contents": "rangeOfNominallySpacedGlyphsContainingIndex(${1:Int})" },{ "trigger": "setMarkedText \t func UITextField -> void" , "contents": "setMarkedText(${1:String?}, selectedRange:${2:NSRange})" },{ "trigger": "isBeingPresented \t func UIViewController -> BOOL
" , "contents": "isBeingPresented(${1:})" },{ "trigger": "UIKeyboardBoundsUserInfoKey \t String", "contents": "UIKeyboardBoundsUserInfoKey" },{ "trigger": "indexPathForItemAtPoint \t func UICollectionView -> NSIndexPath?
" , "contents": "indexPathForItemAtPoint(${1:CGPoint})" },{ "trigger": "scrollViewDidEndDragging \t func unknown -> void" , "contents": "scrollViewDidEndDragging(${1:UIScrollView}, willDecelerate:${2:BOOL})" },{ "trigger": "scrollDirection \t UICollectionViewScrollDirection", "contents": "scrollDirection" },{ "trigger": "UIGraphicsGetPDFContextBounds \t func UIGravityBehavior -> CGRect
" , "contents": "UIGraphicsGetPDFContextBounds(${1:})" },{ "trigger": "sectionHeadersPinToVisibleBounds \t BOOL", "contents": "sectionHeadersPinToVisibleBounds" },{ "trigger": "collectionView \t func UICollectionViewController -> UICollectionReusableView
" , "contents": "collectionView(${1:UICollectionView}, viewForSupplementaryElementOfKind:${2:String}, atIndexPath:${3:NSIndexPath})" },{ "trigger": "setTitleColor \t func UIButton -> void" , "contents": "setTitleColor(${1:UIColor?}, forState:${2:UIControlState})" },{ "trigger": "removeConstraint \t func UIView -> void" , "contents": "removeConstraint(${1:NSLayoutConstraint})" },{ "trigger": "maximumValue \t Double", "contents": "maximumValue" },{ "trigger": "mutableCopyWithZone \t func NSParagraphStyle -> AnyObject
" , "contents": "mutableCopyWithZone(${1:NSZone})" },{ "trigger": "removeAllPoints \t func UIBezierPath -> void" , "contents": "removeAllPoints(${1:})" },{ "trigger": "UIViewTintAdjustmentMode \t UIViewTintAdjustmentMode", "contents": "UIViewTintAdjustmentMode" },{ "trigger": "progress \t Float", "contents": "progress" },{ "trigger": "presentationController \t func unknown -> void" , "contents": "presentationController(${1:UIPresentationController}, willPresentWithAdaptiveStyle:${2:UIModalPresentationStyle}, transitionCoordinator:${3:UIViewControllerTransitionCoordinator?})" },{ "trigger": "setBackButtonTitlePositionAdjustment \t func UIBarButtonItem -> void" , "contents": "setBackButtonTitlePositionAdjustment(${1:UIOffset}, forBarMetrics:${2:UIBarMetrics})" },{ "trigger": "UIView.animateWithDuration \t class UIView -> Void
" , "contents": "UIView.animateWithDuration(${1:NSTimeInterval}, animations:${2: -> Void})" },{ "trigger": "viewForLastBaselineLayout \t UIView", "contents": "viewForLastBaselineLayout" },{ "trigger": "UIDocumentPickerExtensionViewController \t UIDocumentPickerExtensionViewController", "contents": "UIDocumentPickerExtensionViewController" },{ "trigger": "copyWithZone \t func UIAlertAction -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "ProgressAvailable \t UIDocumentState", "contents": "ProgressAvailable" },{ "trigger": "UIApplicationLaunchOptionsBluetoothPeripheralsKey \t String", "contents": "UIApplicationLaunchOptionsBluetoothPeripheralsKey" },{ "trigger": "removeTabStop \t func NSMutableParagraphStyle -> void" , "contents": "removeTabStop(${1:NSTextTab})" },{ "trigger": "performAsynchronousFileAccessUsingBlock \t func UIDocument -> Void
" , "contents": "performAsynchronousFileAccessUsingBlock(${1: -> Void})" },{ "trigger": "direction \t UISwipeGestureRecognizerDirection", "contents": "direction" },{ "trigger": "UIPasteboard.generalPasteboard \t class UIPasteboard -> UIPasteboard
" , "contents": "UIPasteboard.generalPasteboard(${1:})" },{ "trigger": "UIApplicationWillChangeStatusBarFrameNotification \t String", "contents": "UIApplicationWillChangeStatusBarFrameNotification" },{ "trigger": "readFromURL \t func NSMutableAttributedString -> void" , "contents": "readFromURL(${1:NSURL}, options:${2:[String }, documentAttributes:${3:AutoreleasingUnsafeMutablePointer<NSDictionary?>})" },{ "trigger": "UIScreenDidDisconnectNotification \t String", "contents": "UIScreenDidDisconnectNotification" },{ "trigger": "tabBar \t func UITabBarController -> void" , "contents": "tabBar(${1:UITabBar}, willEndCustomizingItems:${2:[UITabBarItem]}, changed:${3:BOOL})" },{ "trigger": "direction \t CGVector", "contents": "direction" },{ "trigger": "drawInRect \t func NSString -> void" , "contents": "drawInRect(${1:CGRect}, withAttributes:${2:[String })" },{ "trigger": "activityIndicatorViewStyle \t UIActivityIndicatorViewStyle", "contents": "activityIndicatorViewStyle" },{ "trigger": "viewPrintFormatter \t func UIView -> UIViewPrintFormatter
" , "contents": "viewPrintFormatter(${1:})" },{ "trigger": "NSReadOnlyDocumentAttribute \t String", "contents": "NSReadOnlyDocumentAttribute" },{ "trigger": "footerViewForSection \t func UITableView -> UITableViewHeaderFooterView?
" , "contents": "footerViewForSection(${1:Int})" },{ "trigger": "Autoreverse \t UIViewKeyframeAnimationOptions", "contents": "Autoreverse" },{ "trigger": "presentOptionsMenuFromRect \t func UIDocumentInteractionController -> BOOL
" , "contents": "presentOptionsMenuFromRect(${1:CGRect}, inView:${2:UIView}, animated:${3:BOOL})" },{ "trigger": "writeContents \t func UIDocument -> void" , "contents": "writeContents(${1:AnyObject}, andAttributes:${2:[NSObject }, safelyToURL:${3:NSURL}, forSaveOperation:${4:UIDocumentSaveOperation})" },{ "trigger": "selectedScopeButtonIndex \t Int", "contents": "selectedScopeButtonIndex" },{ "trigger": "tableView \t func UIPickerView -> void" , "contents": "tableView(${1:UITableView}, commitEditingStyle:${2:UITableViewCellEditingStyle}, forRowAtIndexPath:${3:NSIndexPath})" },{ "trigger": "popoverPresentationControllerShouldDismissPopover \t func unknown -> BOOL
" , "contents": "popoverPresentationControllerShouldDismissPopover(${1:UIPopoverPresentationController})" },{ "trigger": "convertPoint \t func UIWindow -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, toWindow:${2:UIWindow?})" },{ "trigger": "willAnimateRotationToInterfaceOrientation \t func UIViewController -> void" , "contents": "willAnimateRotationToInterfaceOrientation(${1:UIInterfaceOrientation}, duration:${2:NSTimeInterval})" },{ "trigger": "traitCollectionDidChange \t func UIView -> void" , "contents": "traitCollectionDidChange(${1:UITraitCollection?})" },{ "trigger": "matrix \t CGAffineTransform", "contents": "matrix" },{ "trigger": "ClassOldStyleSerifs \t UIFontDescriptorSymbolicTraits", "contents": "ClassOldStyleSerifs" },{ "trigger": "NSBackgroundColorDocumentAttribute \t String", "contents": "NSBackgroundColorDocumentAttribute" },{ "trigger": "cancelInteractiveTransition \t func UICollectionView -> void" , "contents": "cancelInteractiveTransition(${1:})" },{ "trigger": "UIFontSymbolicTrait \t String", "contents": "UIFontSymbolicTrait" },{ "trigger": "scrollViewDidScrollToTop \t func unknown -> void" , "contents": "scrollViewDidScrollToTop(${1:UIScrollView})" },{ "trigger": "presentationCountForPageViewController \t func unknown -> Int
" , "contents": "presentationCountForPageViewController(${1:UIPageViewController})" },{ "trigger": "DefaultMask \t UITableViewCellStateMask", "contents": "DefaultMask" },{ "trigger": "ClassFreeformSerifs \t UIFontDescriptorSymbolicTraits", "contents": "ClassFreeformSerifs" },{ "trigger": "textFieldShouldReturn \t func unknown -> BOOL
" , "contents": "textFieldShouldReturn(${1:UITextField})" },{ "trigger": "UIStoryboardPopoverSegue \t UIStoryboardPopoverSegue", "contents": "UIStoryboardPopoverSegue" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldShowMenuForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "drawViewHierarchyInRect \t func UIView -> BOOL
" , "contents": "drawViewHierarchyInRect(${1:CGRect}, afterScreenUpdates:${2:BOOL})" },{ "trigger": "LargeFormat \t UIPrinterJobTypes", "contents": "LargeFormat" },{ "trigger": "constraintGreaterThanOrEqualToAnchor \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintGreaterThanOrEqualToAnchor(${1:NSLayoutDimension!}, multiplier:${2:CGFloat})" },{ "trigger": "UIKeyCommand.keyCommandWithInput \t class UIKeyCommand -> UIKeyCommand
" , "contents": "UIKeyCommand.keyCommandWithInput(${1:String}, modifierFlags:${2:UIKeyModifierFlags}, action:${3:Selector}, discoverabilityTitle:${4:String})" },{ "trigger": "cancelTrackingWithEvent \t func UIControl -> void" , "contents": "cancelTrackingWithEvent(${1:UIEvent?})" },{ "trigger": "setEditing \t func UITableViewCell -> void" , "contents": "setEditing(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "viewWithTag \t func UIView -> UIView?
" , "contents": "viewWithTag(${1:Int})" },{ "trigger": "UIAlertViewStyle \t UIAlertViewStyle", "contents": "UIAlertViewStyle" },{ "trigger": "keyWindow \t UIWindow", "contents": "keyWindow" },{ "trigger": "action \t Selector", "contents": "action" },{ "trigger": "keyPath \t String", "contents": "keyPath" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, willDisplayFooterView:${2:UIView}, forSection:${3:Int})" },{ "trigger": "segueForUnwindingToViewController \t func UIViewController -> UIStoryboardSegue?
" , "contents": "segueForUnwindingToViewController(${1:UIViewController}, fromViewController:${2:UIViewController}, identifier:${3:String?})" },{ "trigger": "endReceivingRemoteControlEvents \t func UIApplication -> void" , "contents": "endReceivingRemoteControlEvents(${1:})" },{ "trigger": "alertTitle \t String", "contents": "alertTitle" },{ "trigger": "addAngularVelocity \t func UIDynamicItemBehavior -> void" , "contents": "addAngularVelocity(${1:CGFloat}, forItem:${2:UIDynamicItem})" },{ "trigger": "presentedItemDidResolveConflictVersion \t func UIDocument -> void" , "contents": "presentedItemDidResolveConflictVersion(${1:NSFileVersion})" },{ "trigger": "UIEdgeInsetsFromString \t func UIEvent -> UIEdgeInsets
" , "contents": "UIEdgeInsetsFromString(${1:String})" },{ "trigger": "positionFromPosition \t func UITextView -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, offset:${2:Int})" },{ "trigger": "contentHorizontalAlignment \t UIControlContentHorizontalAlignment", "contents": "contentHorizontalAlignment" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, handleActionWithIdentifier:${2:String?}, forRemoteNotification:${3:[NSObject }, completionHandler:${4: -> Void})" },{ "trigger": "footerReferenceSize \t CGSize", "contents": "footerReferenceSize" },{ "trigger": "topCapHeight \t Int", "contents": "topCapHeight" },{ "trigger": "textInputMode \t UITextInputMode", "contents": "textInputMode" },{ "trigger": "collectionView \t func unknown -> UIEdgeInsets
" , "contents": "collectionView(${1:UICollectionView}, layout:${2:UICollectionViewLayout}, insetForSectionAtIndex:${3:Int})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, commitEditingStyle:${2:UITableViewCellEditingStyle}, forRowAtIndexPath:${3:NSIndexPath})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didUnhighlightRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "setContentOffset \t func UISegmentedControl -> void" , "contents": "setContentOffset(${1:CGSize}, forSegmentAtIndex:${2:Int})" },{ "trigger": "UILongPressGestureRecognizer \t UILongPressGestureRecognizer", "contents": "UILongPressGestureRecognizer" },{ "trigger": "spineLocation \t UIPageViewControllerSpineLocation", "contents": "spineLocation" },{ "trigger": "UIAccessibilityScrollDirection \t UIAccessibilityScrollDirection", "contents": "UIAccessibilityScrollDirection" },{ "trigger": "CenteredVertically \t UICollectionViewScrollPosition", "contents": "CenteredVertically" },{ "trigger": "didAddSubview \t func UIView -> void" , "contents": "didAddSubview(${1:UIView})" },{ "trigger": "collectionView \t func unknown -> CGSize
" , "contents": "collectionView(${1:UICollectionView}, layout:${2:UICollectionViewLayout}, referenceSizeForHeaderInSection:${3:Int})" },{ "trigger": "UIAccessibilityAnnouncementKeyWasSuccessful \t String", "contents": "UIAccessibilityAnnouncementKeyWasSuccessful" },{ "trigger": "landscapeImagePhoneInsets \t UIEdgeInsets", "contents": "landscapeImagePhoneInsets" },{ "trigger": "actionSheetStyle \t UIActionSheetStyle", "contents": "actionSheetStyle" },{ "trigger": "reloadInputViews \t func UIResponder -> void" , "contents": "reloadInputViews(${1:})" },{ "trigger": "activityType \t func UIActivity -> String?
" , "contents": "activityType(${1:})" },{ "trigger": "copyWithZone \t func UIVisualEffect -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "UIAttachmentBehavior.slidingAttachmentWithItem \t class UIAttachmentBehavior -> Self
" , "contents": "UIAttachmentBehavior.slidingAttachmentWithItem(${1:UIDynamicItem}, attachedToItem:${2:UIDynamicItem}, attachmentAnchor:${3:CGPoint}, axisOfTranslation:${4:CGVector})" },{ "trigger": "UIRectFrame \t func UIReferenceLibraryViewController -> void" , "contents": "UIRectFrame(${1:CGRect})" },{ "trigger": "splitViewController \t func unknown -> BOOL
" , "contents": "splitViewController(${1:UISplitViewController}, showViewController:${2:UIViewController}, sender:${3:AnyObject?})" },{ "trigger": "damping \t CGFloat", "contents": "damping" },{ "trigger": "NSLayoutConstraint.constraintsWithVisualFormat \t class NSLayoutConstraint -> [NSLayoutConstraint]
" , "contents": "NSLayoutConstraint.constraintsWithVisualFormat(${1:String}, options:${2:NSLayoutFormatOptions}, metrics:${3:[String }, views:${4:[String })" },{ "trigger": "backgroundImageForBarMetrics \t func UINavigationBar -> UIImage?
" , "contents": "backgroundImageForBarMetrics(${1:UIBarMetrics})" },{ "trigger": "animateTransition \t func UISearchController -> void" , "contents": "animateTransition(${1:UIViewControllerContextTransitioning})" },{ "trigger": "contentView \t UIView", "contents": "contentView" },{ "trigger": "imageForSegmentAtIndex \t func UISegmentedControl -> UIImage?
" , "contents": "imageForSegmentAtIndex(${1:Int})" },{ "trigger": "rowSizeForComponent \t func UIPickerView -> CGSize
" , "contents": "rowSizeForComponent(${1:Int})" },{ "trigger": "UIBarItem.appearance \t class UIBarItem -> Self
" , "contents": "UIBarItem.appearance(${1:})" },{ "trigger": "becomeKeyWindow \t func UIWindow -> void" , "contents": "becomeKeyWindow(${1:})" },{ "trigger": "accessibilityPerformMagicTap \t func NSObject -> BOOL
" , "contents": "accessibilityPerformMagicTap(${1:})" },{ "trigger": "UIMinimumKeepAliveTimeout \t NSTimeInterval", "contents": "UIMinimumKeepAliveTimeout" },{ "trigger": "indexPathForPreferredFocusedViewInCollectionView \t func unknown -> NSIndexPath?
" , "contents": "indexPathForPreferredFocusedViewInCollectionView(${1:UICollectionView})" },{ "trigger": "animateAlongsideTransition \t func unknown -> Void?," , "contents": "animateAlongsideTransition(${1:UIViewControllerTransitionCoordinatorContext -> Void?}, completion:${2:UIViewControllerTransitionCoordinatorContext -> Void?})" },{ "trigger": "showDetailViewController \t func UISplitViewController -> void" , "contents": "showDetailViewController(${1:UIViewController}, sender:${2:AnyObject?})" },{ "trigger": "UIViewKeyframeAnimationOptions \t UIViewKeyframeAnimationOptions", "contents": "UIViewKeyframeAnimationOptions" },{ "trigger": "removeDictationResultPlaceholder \t func UITextView -> void" , "contents": "removeDictationResultPlaceholder(${1:AnyObject}, willInsertResult:${2:BOOL})" },{ "trigger": "delegate \t UIPageViewControllerDelegate", "contents": "delegate" },{ "trigger": "printerPickerControllerDidSelectPrinter \t func unknown -> void" , "contents": "printerPickerControllerDidSelectPrinter(${1:UIPrinterPickerController})" },{ "trigger": "alertAction \t String", "contents": "alertAction" },{ "trigger": "showsCancelButton \t BOOL", "contents": "showsCancelButton" },{ "trigger": "UIPasteboardTypeListImage \t NSArray", "contents": "UIPasteboardTypeListImage" },{ "trigger": "activityViewControllerPlaceholderItem \t func UIActivityItemProvider -> AnyObject
" , "contents": "activityViewControllerPlaceholderItem(${1:UIActivityViewController})" },{ "trigger": "momentary \t BOOL", "contents": "momentary" },{ "trigger": "bouncesZoom \t BOOL", "contents": "bouncesZoom" },{ "trigger": "value \t Float", "contents": "value" },{ "trigger": "encodeCGAffineTransform \t func NSCoder -> void" , "contents": "encodeCGAffineTransform(${1:CGAffineTransform}, forKey:${2:String})" },{ "trigger": "bottom \t CGFloat", "contents": "bottom" },{ "trigger": "offsetFromPosition \t func UITextView -> Int
" , "contents": "offsetFromPosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "convertPoint \t func UIView -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, fromView:${2:UIView?})" },{ "trigger": "resizableImageWithCapInsets \t func UIImage -> UIImage
" , "contents": "resizableImageWithCapInsets(${1:UIEdgeInsets})" },{ "trigger": "UIKeyboardCenterBeginUserInfoKey \t String", "contents": "UIKeyboardCenterBeginUserInfoKey" },{ "trigger": "tintColor \t UIColor", "contents": "tintColor" },{ "trigger": "UIScreenMode \t UIScreenMode", "contents": "UIScreenMode" },{ "trigger": "sizeForChildContentContainer \t func unknown -> CGSize
" , "contents": "sizeForChildContentContainer(${1:UIContentContainer}, withParentContainerSize:${2:CGSize})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didEndDisplayingFooterView:${2:UIView}, forSection:${3:Int})" },{ "trigger": "UIScrollViewIndicatorStyle \t UIScrollViewIndicatorStyle", "contents": "UIScrollViewIndicatorStyle" },{ "trigger": "CurveLinear \t UIViewAnimationOptions", "contents": "CurveLinear" },{ "trigger": "rectForPageAtIndex \t func UIPrintFormatter -> CGRect
" , "contents": "rectForPageAtIndex(${1:Int})" },{ "trigger": "UIView.userInterfaceLayoutDirectionForSemanticContentAttribute \t class UIView -> UIUserInterfaceLayoutDirection
" , "contents": "UIView.userInterfaceLayoutDirectionForSemanticContentAttribute(${1:UISemanticContentAttribute})" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldShowMenuForItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "containerViewWillLayoutSubviews \t func UIPresentationController -> void" , "contents": "containerViewWillLayoutSubviews(${1:})" },{ "trigger": "UICollectionViewLayout.invalidationContextClass \t class UICollectionViewLayout -> AnyClass
" , "contents": "UICollectionViewLayout.invalidationContextClass(${1:})" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, handleEventsForBackgroundURLSession:${2:String}, completionHandler:${3: -> Void})" },{ "trigger": "popoverPresentationControllerDidDismissPopover \t func unknown -> void" , "contents": "popoverPresentationControllerDidDismissPopover(${1:UIPopoverPresentationController})" },{ "trigger": "section \t Int", "contents": "section" },{ "trigger": "UITextSpellCheckingType \t UITextSpellCheckingType", "contents": "UITextSpellCheckingType" },{ "trigger": "strokeWithBlendMode \t func UIBezierPath -> void" , "contents": "strokeWithBlendMode(${1:CGBlendMode}, alpha:${2:CGFloat})" },{ "trigger": "identifier \t String", "contents": "identifier" },{ "trigger": "setEditing \t func UIViewController -> void" , "contents": "setEditing(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "semanticContentAttribute \t UISemanticContentAttribute", "contents": "semanticContentAttribute" },{ "trigger": "splitViewController \t func unknown -> BOOL
" , "contents": "splitViewController(${1:UISplitViewController}, showDetailViewController:${2:UIViewController}, sender:${3:AnyObject?})" },{ "trigger": "Alternate \t UIKeyModifierFlags", "contents": "Alternate" },{ "trigger": "setParagraphStyle \t func NSMutableParagraphStyle -> void" , "contents": "setParagraphStyle(${1:NSParagraphStyle})" },{ "trigger": "drawHeaderForPageAtIndex \t func UIPrintPageRenderer -> void" , "contents": "drawHeaderForPageAtIndex(${1:Int}, inRect:${2:CGRect})" },{ "trigger": "alignment \t NSTextAlignment", "contents": "alignment" },{ "trigger": "UIAccessibilityLayoutChangedNotification \t UIAccessibilityNotifications", "contents": "UIAccessibilityLayoutChangedNotification" },{ "trigger": "UITableViewController \t UITableViewController", "contents": "UITableViewController" },{ "trigger": "deleteSections \t func UICollectionView -> void" , "contents": "deleteSections(${1:NSIndexSet})" },{ "trigger": "sectionForObject \t func UILocalizedIndexedCollation -> Int
" , "contents": "sectionForObject(${1:AnyObject}, collationStringSelector:${2:Selector})" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldUpdateFocusInContext:${2:UITableViewFocusUpdateContext})" },{ "trigger": "UINibProxiedObjectsKey \t String", "contents": "UINibProxiedObjectsKey" },{ "trigger": "tableView \t func UITableViewController -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldUpdateFocusInContext:${2:UITableViewFocusUpdateContext})" },{ "trigger": "encodeWithCoder \t func UINavigationItem -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "preferredPrimaryColumnWidthFraction \t CGFloat", "contents": "preferredPrimaryColumnWidthFraction" },{ "trigger": "UICollectionViewUpdateItem \t UICollectionViewUpdateItem", "contents": "UICollectionViewUpdateItem" },{ "trigger": "primaryColumnWidth \t CGFloat", "contents": "primaryColumnWidth" },{ "trigger": "UIKeyInputRightArrow \t String", "contents": "UIKeyInputRightArrow" },{ "trigger": "gravityDirection \t CGVector", "contents": "gravityDirection" },{ "trigger": "presentationControllerForPresentedViewController \t func unknown -> UIPresentationController?
" , "contents": "presentationControllerForPresentedViewController(${1:UIViewController}, presentingViewController:${2:UIViewController}, sourceViewController:${3:UIViewController})" },{ "trigger": "UIGraphicsGetCurrentContext \t func UIGravityBehavior -> CGContext?
" , "contents": "UIGraphicsGetCurrentContext(${1:})" },{ "trigger": "UIFieldBehavior.radialGravityFieldWithPosition \t class UIFieldBehavior -> Self
" , "contents": "UIFieldBehavior.radialGravityFieldWithPosition(${1:CGPoint})" },{ "trigger": "UIFontDescriptorCascadeListAttribute \t String", "contents": "UIFontDescriptorCascadeListAttribute" },{ "trigger": "angularResistance \t CGFloat", "contents": "angularResistance" },{ "trigger": "finishedSelectedImage \t func UITabBarItem -> UIImage?
" , "contents": "finishedSelectedImage(${1:})" },{ "trigger": "setNeedsUpdateConstraints \t func UIView -> void" , "contents": "setNeedsUpdateConstraints(${1:})" },{ "trigger": "encodeWithCoder \t func UIPrintInfo -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "AllowAnimatedContent \t UIViewAnimationOptions", "contents": "AllowAnimatedContent" },{ "trigger": "UIDocumentSaveOperation \t UIDocumentSaveOperation", "contents": "UIDocumentSaveOperation" },{ "trigger": "widthForSegmentAtIndex \t func UISegmentedControl -> CGFloat
" , "contents": "widthForSegmentAtIndex(${1:Int})" },{ "trigger": "dismissAnimated \t func UIPrintInteractionController -> void" , "contents": "dismissAnimated(${1:BOOL})" },{ "trigger": "decodeUIEdgeInsetsForKey \t func NSCoder -> UIEdgeInsets
" , "contents": "decodeUIEdgeInsetsForKey(${1:String})" },{ "trigger": "NSObject.setAccessibilityActivationPoint \t class NSObject -> void" , "contents": "NSObject.setAccessibilityActivationPoint(${1:CGPoint})" },{ "trigger": "ascender \t CGFloat", "contents": "ascender" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, performAction:${2:Selector}, forItemAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "tableView \t func UIPickerView -> String?
" , "contents": "tableView(${1:UITableView}, titleForFooterInSection:${2:Int})" },{ "trigger": "presentedItemDidChange \t func UIDocument -> void" , "contents": "presentedItemDidChange(${1:})" },{ "trigger": "makeTextWritingDirectionLeftToRight \t func NSObject -> void" , "contents": "makeTextWritingDirectionLeftToRight(${1:AnyObject?})" },{ "trigger": "destructiveButtonIndex \t Int", "contents": "destructiveButtonIndex" },{ "trigger": "selected \t BOOL", "contents": "selected" },{ "trigger": "transitionFromViewController \t func UIViewController -> Void?," , "contents": "transitionFromViewController(${1:UIViewController}, toViewController:${2:UIViewController}, duration:${3:NSTimeInterval}, options:${4:UIViewAnimationOptions}, animations:${5: -> Void?}, completion:${6:BOOL -> Void?})" },{ "trigger": "nextFocusedIndexPath \t NSIndexPath", "contents": "nextFocusedIndexPath" },{ "trigger": "phase \t UIPressPhase", "contents": "phase" },{ "trigger": "sectionIndexMinimumDisplayRowCount \t Int", "contents": "sectionIndexMinimumDisplayRowCount" },{ "trigger": "UIContentSizeCategoryExtraExtraLarge \t String", "contents": "UIContentSizeCategoryExtraExtraLarge" },{ "trigger": "setToolbarHidden \t func UINavigationController -> void" , "contents": "setToolbarHidden(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "displayLinkWithTarget \t func UIScreen -> CADisplayLink?
" , "contents": "displayLinkWithTarget(${1:AnyObject}, selector:${2:Selector})" },{ "trigger": "textViewDidChange \t func unknown -> void" , "contents": "textViewDidChange(${1:UITextView})" },{ "trigger": "UIPercentDrivenInteractiveTransition \t UIPercentDrivenInteractiveTransition", "contents": "UIPercentDrivenInteractiveTransition" },{ "trigger": "xHeight \t CGFloat", "contents": "xHeight" },{ "trigger": "UIImagePickerController.isCameraDeviceAvailable \t class UIImagePickerController -> BOOL
" , "contents": "UIImagePickerController.isCameraDeviceAvailable(${1:UIImagePickerControllerCameraDevice})" },{ "trigger": "containsStart \t BOOL", "contents": "containsStart" },{ "trigger": "UIMarkupTextPrintFormatter \t UIMarkupTextPrintFormatter", "contents": "UIMarkupTextPrintFormatter" },{ "trigger": "shouldIndentWhileEditing \t BOOL", "contents": "shouldIndentWhileEditing" },{ "trigger": "fileAttributesToWriteToURL \t func UIDocument -> [NSObject" , "contents": "fileAttributesToWriteToURL(${1:NSURL}, forSaveOperation:${2:UIDocumentSaveOperation})" },{ "trigger": "annotation \t AnyObject", "contents": "annotation" },{ "trigger": "UIStateRestorationViewControllerStoryboardKey \t String", "contents": "UIStateRestorationViewControllerStoryboardKey" },{ "trigger": "printInteractionController \t func unknown -> CGFloat
" , "contents": "printInteractionController(${1:UIPrintInteractionController}, cutLengthForPaper:${2:UIPrintPaper})" },{ "trigger": "printerPickerControllerWillDismiss \t func unknown -> void" , "contents": "printerPickerControllerWillDismiss(${1:UIPrinterPickerController})" },{ "trigger": "rectForFooterInSection \t func UITableView -> CGRect
" , "contents": "rectForFooterInSection(${1:Int})" },{ "trigger": "UIView.setAnimationDuration \t class UIView -> void" , "contents": "UIView.setAnimationDuration(${1:NSTimeInterval})" },{ "trigger": "fireDate \t NSDate", "contents": "fireDate" },{ "trigger": "NSStringFromCGAffineTransform \t func NSTextAlignment -> String
" , "contents": "NSStringFromCGAffineTransform(${1:CGAffineTransform})" },{ "trigger": "preferredContentSizeDidChangeForChildContentContainer \t func UIPresentationController -> void" , "contents": "preferredContentSizeDidChangeForChildContentContainer(${1:UIContentContainer})" },{ "trigger": "regionByDifferenceFromRegion \t func UIRegion -> Self
" , "contents": "regionByDifferenceFromRegion(${1:UIRegion})" },{ "trigger": "UIDatePickerMode \t UIDatePickerMode", "contents": "UIDatePickerMode" },{ "trigger": "contentSizeForViewInPopover \t CGSize", "contents": "contentSizeForViewInPopover" },{ "trigger": "UIApplicationLaunchOptionsURLKey \t String", "contents": "UIApplicationLaunchOptionsURLKey" },{ "trigger": "willMoveToAnimator \t func UIDynamicBehavior -> void" , "contents": "willMoveToAnimator(${1:UIDynamicAnimator?})" },{ "trigger": "UIImageOrientation \t UIImageOrientation", "contents": "UIImageOrientation" },{ "trigger": "UIFont.labelFontSize \t class UIFont -> CGFloat
" , "contents": "UIFont.labelFontSize(${1:})" },{ "trigger": "searchBarStyle \t UISearchBarStyle", "contents": "searchBarStyle" },{ "trigger": "NSObject.setAccessibilityLanguage \t class NSObject -> void" , "contents": "NSObject.setAccessibilityLanguage(${1:String?})" },{ "trigger": "scrollViewDidEndDragging \t func UITableViewController -> void" , "contents": "scrollViewDidEndDragging(${1:UIScrollView}, willDecelerate:${2:BOOL})" },{ "trigger": "shadowColor \t UIColor", "contents": "shadowColor" },{ "trigger": "NSLineBreakMode \t NSLineBreakMode", "contents": "NSLineBreakMode" },{ "trigger": "UITextLayoutDirection \t UITextLayoutDirection", "contents": "UITextLayoutDirection" },{ "trigger": "TransitionFlipFromLeft \t UIViewAnimationOptions", "contents": "TransitionFlipFromLeft" },{ "trigger": "setLeftBarButtonItems \t func UINavigationItem -> void" , "contents": "setLeftBarButtonItems(${1:[UIBarButtonItem]?}, animated:${2:BOOL})" },{ "trigger": "invalidateSupplementaryElementsOfKind \t func UICollectionViewLayoutInvalidationContext -> void" , "contents": "invalidateSupplementaryElementsOfKind(${1:String}, atIndexPaths:${2:[NSIndexPath]})" },{ "trigger": "gestureRecognizerShouldBegin \t func UITableViewCell -> BOOL
" , "contents": "gestureRecognizerShouldBegin(${1:UIGestureRecognizer})" },{ "trigger": "UIView.setAnimationRepeatCount \t class UIView -> void" , "contents": "UIView.setAnimationRepeatCount(${1:Float})" },{ "trigger": "Command \t UIKeyModifierFlags", "contents": "Command" },{ "trigger": "collectionView \t func unknown -> NSIndexPath
" , "contents": "collectionView(${1:UICollectionView}, targetIndexPathForMoveFromItemAtIndexPath:${2:NSIndexPath}, toProposedIndexPath:${3:NSIndexPath})" },{ "trigger": "shouldBeArchived \t BOOL", "contents": "shouldBeArchived" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, willChangeStatusBarOrientation:${2:UIInterfaceOrientation}, duration:${3:NSTimeInterval})" },{ "trigger": "UIGuidedAccessRestrictionState \t UIGuidedAccessRestrictionState", "contents": "UIGuidedAccessRestrictionState" },{ "trigger": "Alert \t UIUserNotificationType", "contents": "Alert" },{ "trigger": "UIImageWriteToSavedPhotosAlbum \t func UIInputView -> void" , "contents": "UIImageWriteToSavedPhotosAlbum(${1:UIImage}, _:${2:AnyObject?}, _:${3:Selector}, _:${4:UnsafeMutablePointer<Void>})" },{ "trigger": "Left \t UISwipeGestureRecognizerDirection", "contents": "Left" },{ "trigger": "x \t UIAccelerationValue", "contents": "x" },{ "trigger": "selectRowAtIndexPath \t func UITableView -> void" , "contents": "selectRowAtIndexPath(${1:NSIndexPath?}, animated:${2:BOOL}, scrollPosition:${3:UITableViewScrollPosition})" },{ "trigger": "drawsOutsideLineFragmentForGlyphAtIndex \t func NSLayoutManager -> BOOL
" , "contents": "drawsOutsideLineFragmentForGlyphAtIndex(${1:Int})" },{ "trigger": "UIView.animateWithDuration \t class UIView -> Void," , "contents": "UIView.animateWithDuration(${1:NSTimeInterval}, delay:${2:NSTimeInterval}, options:${3:UIViewAnimationOptions}, animations:${4: -> Void}, completion:${5:BOOL -> Void?})" },{ "trigger": "hasText \t func UITextView -> BOOL
" , "contents": "hasText(${1:})" },{ "trigger": "UIFont.buttonFontSize \t class UIFont -> CGFloat
" , "contents": "UIFont.buttonFontSize(${1:})" },{ "trigger": "UIStoryboard \t UIStoryboard", "contents": "UIStoryboard" },{ "trigger": "extraLineFragmentRect \t CGRect", "contents": "extraLineFragmentRect" },{ "trigger": "OverrideInheritedOptions \t UIViewKeyframeAnimationOptions", "contents": "OverrideInheritedOptions" },{ "trigger": "endIgnoringInteractionEvents \t func UIApplication -> void" , "contents": "endIgnoringInteractionEvents(${1:})" },{ "trigger": "scrollViewWillEndDragging \t func UICollectionViewController -> void" , "contents": "scrollViewWillEndDragging(${1:UIScrollView}, withVelocity:${2:CGPoint}, targetContentOffset:${3:UnsafeMutablePointer<CGPoint>})" },{ "trigger": "imageEdgeInsets \t UIEdgeInsets", "contents": "imageEdgeInsets" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didUpdateFocusInContext:${2:UITableViewFocusUpdateContext}, withAnimationCoordinator:${3:UIFocusAnimationCoordinator})" },{ "trigger": "TouchDown \t UIControlEvents", "contents": "TouchDown" },{ "trigger": "updateInteractiveTransition \t func unknown -> void" , "contents": "updateInteractiveTransition(${1:CGFloat})" },{ "trigger": "UINavigationControllerOperation \t UINavigationControllerOperation", "contents": "UINavigationControllerOperation" },{ "trigger": "containerViewDidLayoutSubviews \t func UIPresentationController -> void" , "contents": "containerViewDidLayoutSubviews(${1:})" },{ "trigger": "UICollectionViewCell \t UICollectionViewCell", "contents": "UICollectionViewCell" },{ "trigger": "maximumValue \t Float", "contents": "maximumValue" },{ "trigger": "accessoryType \t UITableViewCellAccessoryType", "contents": "accessoryType" },{ "trigger": "UIPageViewControllerNavigationDirection \t UIPageViewControllerNavigationDirection", "contents": "UIPageViewControllerNavigationDirection" },{ "trigger": "indentationLevel \t Int", "contents": "indentationLevel" },{ "trigger": "AllButUpsideDown \t UIInterfaceOrientationMask", "contents": "AllButUpsideDown" },{ "trigger": "childViewControllerContainingSegueSource \t func UIViewController -> UIViewController?
" , "contents": "childViewControllerContainingSegueSource(${1:UIStoryboardUnwindSegueSource})" },{ "trigger": "UIAccessibilityTraitSearchField \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitSearchField" },{ "trigger": "markedTextRange \t UITextRange", "contents": "markedTextRange" },{ "trigger": "currentMinimumTrackImage \t UIImage", "contents": "currentMinimumTrackImage" },{ "trigger": "NSObject.accessibilityHeaderElements \t class NSObject -> [AnyObject]?
" , "contents": "NSObject.accessibilityHeaderElements(${1:})" },{ "trigger": "UIApplicationShortcutIcon.iconWithType \t class UIApplicationShortcutIcon -> Self
" , "contents": "UIApplicationShortcutIcon.iconWithType(${1:UIApplicationShortcutIconType})" },{ "trigger": "UIActivityItemProvider \t UIActivityItemProvider", "contents": "UIActivityItemProvider" },{ "trigger": "fontWithSize \t func UIFont -> UIFont
" , "contents": "fontWithSize(${1:CGFloat})" },{ "trigger": "delegate \t UIPickerViewDelegate", "contents": "delegate" },{ "trigger": "Up \t UIPopoverArrowDirection", "contents": "Up" },{ "trigger": "setToolbarItems \t func UIViewController -> void" , "contents": "setToolbarItems(${1:[UIBarButtonItem]?}, animated:${2:BOOL})" },{ "trigger": "accessibilityValue \t String", "contents": "accessibilityValue" },{ "trigger": "firstOtherButtonIndex \t Int", "contents": "firstOtherButtonIndex" },{ "trigger": "UIWindowLevelNormal \t UIWindowLevel", "contents": "UIWindowLevelNormal" },{ "trigger": "LayoutSubviews \t UIViewAnimationOptions", "contents": "LayoutSubviews" },{ "trigger": "tableView \t func UIPickerView -> Int
" , "contents": "tableView(${1:UITableView}, numberOfRowsInSection:${2:Int})" },{ "trigger": "selectedRowInComponent \t func UIPickerView -> Int
" , "contents": "selectedRowInComponent(${1:Int})" },{ "trigger": "appendPath \t func UIBezierPath -> void" , "contents": "appendPath(${1:UIBezierPath})" },{ "trigger": "targetContentOffsetForProposedContentOffset \t func UICollectionViewLayout -> CGPoint
" , "contents": "targetContentOffsetForProposedContentOffset(${1:CGPoint}, withScrollingVelocity:${2:CGPoint})" },{ "trigger": "alertView \t func unknown -> void" , "contents": "alertView(${1:UIAlertView}, willDismissWithButtonIndex:${2:Int})" },{ "trigger": "sectionFooterHeight \t CGFloat", "contents": "sectionFooterHeight" },{ "trigger": "currentTitleShadowColor \t UIColor", "contents": "currentTitleShadowColor" },{ "trigger": "maskView \t UIView", "contents": "maskView" },{ "trigger": "textColor \t UIColor", "contents": "textColor" },{ "trigger": "Destructive \t UITableViewRowActionStyle", "contents": "Destructive" },{ "trigger": "drawPageAtIndex \t func UIPrintPageRenderer -> void" , "contents": "drawPageAtIndex(${1:Int}, inRect:${2:CGRect})" },{ "trigger": "UIAccessibilityTraitNone \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitNone" },{ "trigger": "UIImagePickerControllerCameraDevice \t UIImagePickerControllerCameraDevice", "contents": "UIImagePickerControllerCameraDevice" },{ "trigger": "AllowUserInteraction \t UIViewKeyframeAnimationOptions", "contents": "AllowUserInteraction" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, moveRowAtIndexPath:${2:NSIndexPath}, toIndexPath:${3:NSIndexPath})" },{ "trigger": "textField \t func unknown -> BOOL
" , "contents": "textField(${1:UITextField}, shouldChangeCharactersInRange:${2:NSRange}, replacementString:${3:String})" },{ "trigger": "alignmentRectInsets \t func UIView -> UIEdgeInsets
" , "contents": "alignmentRectInsets(${1:})" },{ "trigger": "applicationDidFinishLaunching \t func unknown -> void" , "contents": "applicationDidFinishLaunching(${1:UIApplication})" },{ "trigger": "UIAccessibilityZoomFocusChanged \t func UIAccessibilityZoomType -> void" , "contents": "UIAccessibilityZoomFocusChanged(${1:UIAccessibilityZoomType}, _:${2:CGRect}, _:${3:UIView})" },{ "trigger": "dictationRecognitionFailed \t func UITextField -> void" , "contents": "dictationRecognitionFailed(${1:})" },{ "trigger": "CalculationModeCubicPaced \t UIViewKeyframeAnimationOptions", "contents": "CalculationModeCubicPaced" },{ "trigger": "currentTitleColor \t UIColor", "contents": "currentTitleColor" },{ "trigger": "toolbar \t UIToolbar", "contents": "toolbar" },{ "trigger": "collisionBehavior \t func unknown -> void" , "contents": "collisionBehavior(${1:UICollisionBehavior}, endedContactForItem:${2:UIDynamicItem}, withItem:${3:UIDynamicItem})" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, performActionForShortcutItem:${2:UIApplicationShortcutItem}, completionHandler:${3:BOOL -> Void})" },{ "trigger": "zoomToRect \t func UIScrollView -> void" , "contents": "zoomToRect(${1:CGRect}, animated:${2:BOOL})" },{ "trigger": "decrementImageForState \t func UIStepper -> UIImage?
" , "contents": "decrementImageForState(${1:UIControlState})" },{ "trigger": "userInteractionNoLongerPermittedForError \t func UIDocument -> void" , "contents": "userInteractionNoLongerPermittedForError(${1:NSError})" },{ "trigger": "UITextChecker.learnWord \t class UITextChecker -> void" , "contents": "UITextChecker.learnWord(${1:String})" },{ "trigger": "allControlEvents \t func UIControl -> UIControlEvents
" , "contents": "allControlEvents(${1:})" },{ "trigger": "setDate \t func UIDatePicker -> void" , "contents": "setDate(${1:NSDate}, animated:${2:BOOL})" },{ "trigger": "velocity \t CGFloat", "contents": "velocity" },{ "trigger": "underlineGlyphRange \t func NSLayoutManager -> void" , "contents": "underlineGlyphRange(${1:NSRange}, underlineType:${2:NSUnderlineStyle}, lineFragmentRect:${3:CGRect}, lineFragmentGlyphRange:${4:NSRange}, containerOrigin:${5:CGPoint})" },{ "trigger": "titleTextAttributesForState \t func UIBarItem -> [String" , "contents": "titleTextAttributesForState(${1:UIControlState})" },{ "trigger": "encodeWithCoder \t func UIFontDescriptor -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "application \t func unknown -> UIViewController?
" , "contents": "application(${1:UIApplication}, viewControllerWithRestorationIdentifierPath:${2:[AnyObject]}, coder:${3:NSCoder})" },{ "trigger": "updateFloatingCursorAtPoint \t func UITextField -> void" , "contents": "updateFloatingCursorAtPoint(${1:CGPoint})" },{ "trigger": "canBecomeFocused \t func UIView -> BOOL
" , "contents": "canBecomeFocused(${1:})" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, didHighlightItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIDocumentState \t UIDocumentState", "contents": "UIDocumentState" },{ "trigger": "drawWithRect \t func NSAttributedString -> void" , "contents": "drawWithRect(${1:CGRect}, options:${2:NSStringDrawingOptions}, context:${3:NSStringDrawingContext?})" },{ "trigger": "inputView \t UIView", "contents": "inputView" },{ "trigger": "fill \t func UIBezierPath -> void" , "contents": "fill(${1:})" },{ "trigger": "UIBarButtonItem \t UIBarButtonItem", "contents": "UIBarButtonItem" },{ "trigger": "Roll \t UIPrinterJobTypes", "contents": "Roll" },{ "trigger": "UIViewControllerShowDetailTargetDidChangeNotification \t String", "contents": "UIViewControllerShowDetailTargetDidChangeNotification" },{ "trigger": "UIReferenceLibraryViewController \t UIReferenceLibraryViewController", "contents": "UIReferenceLibraryViewController" },{ "trigger": "searchBarCancelButtonClicked \t func unknown -> void" , "contents": "searchBarCancelButtonClicked(${1:UISearchBar})" },{ "trigger": "inverseRegion \t func UIRegion -> Self
" , "contents": "inverseRegion(${1:})" },{ "trigger": "beginningOfDocument \t UITextPosition", "contents": "beginningOfDocument" },{ "trigger": "updateChangeCount \t func UIDocument -> void" , "contents": "updateChangeCount(${1:UIDocumentChangeKind})" },{ "trigger": "postscriptName \t String", "contents": "postscriptName" },{ "trigger": "type \t UITouchType", "contents": "type" },{ "trigger": "UITextInputMode.currentInputMode \t class UITextInputMode -> UITextInputMode?
" , "contents": "UITextInputMode.currentInputMode(${1:})" },{ "trigger": "selectedIndex \t Int", "contents": "selectedIndex" },{ "trigger": "azimuthUnitVectorInView \t func UITouch -> CGVector
" , "contents": "azimuthUnitVectorInView(${1:UIView?})" },{ "trigger": "Repeat \t UIViewAnimationOptions", "contents": "Repeat" },{ "trigger": "fontDescriptorWithSymbolicTraits \t func UIFontDescriptor -> UIFontDescriptor
" , "contents": "fontDescriptorWithSymbolicTraits(${1:UIFontDescriptorSymbolicTraits})" },{ "trigger": "strength \t CGFloat", "contents": "strength" },{ "trigger": "setAngle \t func UIPushBehavior -> void" , "contents": "setAngle(${1:CGFloat}, magnitude:${2:CGFloat})" },{ "trigger": "layoutAttributesForDecorationViewOfKind \t func UIDynamicAnimator -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForDecorationViewOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "prefersStatusBarHidden \t func UIViewController -> BOOL
" , "contents": "prefersStatusBarHidden(${1:})" },{ "trigger": "visibleSupplementaryViewsOfKind \t func UICollectionView -> [UICollectionReusableView]
" , "contents": "visibleSupplementaryViewsOfKind(${1:String})" },{ "trigger": "documentInteractionControllerWillPresentOpenInMenu \t func unknown -> void" , "contents": "documentInteractionControllerWillPresentOpenInMenu(${1:UIDocumentInteractionController})" },{ "trigger": "systemLayoutSizeFittingSize \t func UIView -> CGSize
" , "contents": "systemLayoutSizeFittingSize(${1:CGSize}, withHorizontalFittingPriority:${2:UILayoutPriority}, verticalFittingPriority:${3:UILayoutPriority})" },{ "trigger": "displayLocation \t String", "contents": "displayLocation" },{ "trigger": "navigationControllerPreferredInterfaceOrientationForPresentation \t func unknown -> UIInterfaceOrientation
" , "contents": "navigationControllerPreferredInterfaceOrientationForPresentation(${1:UINavigationController})" },{ "trigger": "UITraitCollection.supportsSecureCoding \t class UITraitCollection -> BOOL
" , "contents": "UITraitCollection.supportsSecureCoding(${1:})" },{ "trigger": "markupText \t String", "contents": "markupText" },{ "trigger": "imageForState \t func UIButton -> UIImage?
" , "contents": "imageForState(${1:UIControlState})" },{ "trigger": "application \t func unknown -> Void" , "contents": "application(${1:UIApplication}, continueUserActivity:${2:NSUserActivity}, restorationHandler:${3:[AnyObject]? -> Void})" },{ "trigger": "sourceType \t UIImagePickerControllerSourceType", "contents": "sourceType" },{ "trigger": "alertViewStyle \t UIAlertViewStyle", "contents": "alertViewStyle" },{ "trigger": "documentInteractionController \t func unknown -> BOOL
" , "contents": "documentInteractionController(${1:UIDocumentInteractionController}, performAction:${2:Selector})" },{ "trigger": "UIWindow \t UIWindow", "contents": "UIWindow" },{ "trigger": "copyWithZone \t func UIFont -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "startInteractiveTransition \t func UIPercentDrivenInteractiveTransition -> void" , "contents": "startInteractiveTransition(${1:UIViewControllerContextTransitioning})" },{ "trigger": "isMovingFromParentViewController \t func UIViewController -> BOOL
" , "contents": "isMovingFromParentViewController(${1:})" },{ "trigger": "UIPasteboardChangedTypesRemovedKey \t String", "contents": "UIPasteboardChangedTypesRemovedKey" },{ "trigger": "transitionDuration \t func UISearchController -> NSTimeInterval
" , "contents": "transitionDuration(${1:UIViewControllerContextTransitioning?})" },{ "trigger": "NSShadowAttributeName \t String", "contents": "NSShadowAttributeName" },{ "trigger": "addCoordinatedAnimations \t func UIFocusAnimationCoordinator -> Void?," , "contents": "addCoordinatedAnimations(${1: -> Void?}, completion:${2: -> Void?})" },{ "trigger": "UIButton \t UIButton", "contents": "UIButton" },{ "trigger": "UIAccessibilityClosedCaptioningStatusDidChangeNotification \t String", "contents": "UIAccessibilityClosedCaptioningStatusDidChangeNotification" },{ "trigger": "UITableViewCellStateMask \t UITableViewCellStateMask", "contents": "UITableViewCellStateMask" },{ "trigger": "lineBreakMode \t NSLineBreakMode", "contents": "lineBreakMode" },{ "trigger": "selectionRectsForRange \t func UITextView -> [AnyObject]
" , "contents": "selectionRectsForRange(${1:UITextRange})" },{ "trigger": "instantiateInitialViewController \t func UIStoryboard -> UIViewController?
" , "contents": "instantiateInitialViewController(${1:})" },{ "trigger": "cancelInteractiveMovement \t func UICollectionView -> void" , "contents": "cancelInteractiveMovement(${1:})" },{ "trigger": "contactPrinter \t func UIPrinter -> Void?
" , "contents": "contactPrinter(${1:BOOL -> Void?})" },{ "trigger": "primaryViewControllerForCollapsingSplitViewController \t func unknown -> UIViewController?
" , "contents": "primaryViewControllerForCollapsingSplitViewController(${1:UISplitViewController})" },{ "trigger": "instantiateWithOwner \t func UINib -> [AnyObject]
" , "contents": "instantiateWithOwner(${1:AnyObject?}, options:${2:[NSObject })" },{ "trigger": "completeStateRestoration \t func UIApplication -> void" , "contents": "completeStateRestoration(${1:})" },{ "trigger": "textViewDidChangeSelection \t func unknown -> void" , "contents": "textViewDidChangeSelection(${1:UITextView})" },{ "trigger": "UIWindowLevelAlert \t UIWindowLevel", "contents": "UIWindowLevelAlert" },{ "trigger": "UIFieldBehavior.noiseFieldWithSmoothness \t class UIFieldBehavior -> Self
" , "contents": "UIFieldBehavior.noiseFieldWithSmoothness(${1:CGFloat}, animationSpeed:${2:CGFloat})" },{ "trigger": "azimuthAngleInView \t func UITouch -> CGFloat
" , "contents": "azimuthAngleInView(${1:UIView?})" },{ "trigger": "ClassSymbolic \t UIFontDescriptorSymbolicTraits", "contents": "ClassSymbolic" },{ "trigger": "UIGraphicsBeginPDFContextToFile \t func UIGravityBehavior -> BOOL
" , "contents": "UIGraphicsBeginPDFContextToFile(${1:String}, _:${2:CGRect}, _:${3:[NSObject })" },{ "trigger": "UICollectionUpdateAction \t UICollectionUpdateAction", "contents": "UICollectionUpdateAction" },{ "trigger": "actionsForTarget \t func UIControl -> [String]?
" , "contents": "actionsForTarget(${1:AnyObject?}, forControlEvent:${2:UIControlEvents})" },{ "trigger": "decodeRestorableStateWithCoder \t func UIViewController -> void" , "contents": "decodeRestorableStateWithCoder(${1:NSCoder})" },{ "trigger": "UIAccessibilityMonoAudioStatusDidChangeNotification \t String", "contents": "UIAccessibilityMonoAudioStatusDidChangeNotification" },{ "trigger": "NSObject.setAccessibilityPath \t class NSObject -> void" , "contents": "NSObject.setAccessibilityPath(${1:UIBezierPath?})" },{ "trigger": "UIAccessibilityNotificationVoiceOverIdentifier \t String", "contents": "UIAccessibilityNotificationVoiceOverIdentifier" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, didDeselectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "pickerView \t func unknown -> CGFloat
" , "contents": "pickerView(${1:UIPickerView}, rowHeightForComponent:${2:Int})" },{ "trigger": "indexPathsToDeleteForSupplementaryViewOfKind \t func UICollectionViewLayout -> [NSIndexPath]
" , "contents": "indexPathsToDeleteForSupplementaryViewOfKind(${1:String})" },{ "trigger": "viewForBaselineLayout \t func UIView -> UIView
" , "contents": "viewForBaselineLayout(${1:})" },{ "trigger": "delegate \t UIApplicationDelegate", "contents": "delegate" },{ "trigger": "UILayoutGuide \t UILayoutGuide", "contents": "UILayoutGuide" },{ "trigger": "setBackgroundImage \t func UIBarButtonItem -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forState:${2:UIControlState}, style:${3:UIBarButtonItemStyle}, barMetrics:${4:UIBarMetrics})" },{ "trigger": "UIFontDescriptor.fontDescriptorWithName \t class UIFontDescriptor -> UIFontDescriptor
" , "contents": "UIFontDescriptor.fontDescriptorWithName(${1:String}, matrix:${2:CGAffineTransform})" },{ "trigger": "UIPrintUnknownImageFormatError \t Int", "contents": "UIPrintUnknownImageFormatError" },{ "trigger": "sectionIndexTitlesForTableView \t func unknown -> [String]?
" , "contents": "sectionIndexTitlesForTableView(${1:UITableView})" },{ "trigger": "showFromBarButtonItem \t func UIActionSheet -> void" , "contents": "showFromBarButtonItem(${1:UIBarButtonItem}, animated:${2:BOOL})" },{ "trigger": "savingFileType \t func UIDocument -> String?
" , "contents": "savingFileType(${1:})" },{ "trigger": "frameForDictationResultPlaceholder \t func unknown -> CGRect
" , "contents": "frameForDictationResultPlaceholder(${1:AnyObject})" },{ "trigger": "previewActionItems \t func UIViewController -> [UIPreviewActionItem]
" , "contents": "previewActionItems(${1:})" },{ "trigger": "wraps \t BOOL", "contents": "wraps" },{ "trigger": "titleVerticalPositionAdjustmentForBarMetrics \t func UINavigationBar -> CGFloat
" , "contents": "titleVerticalPositionAdjustmentForBarMetrics(${1:UIBarMetrics})" },{ "trigger": "registerNib \t func UITableView -> void" , "contents": "registerNib(${1:UINib?}, forHeaderFooterViewReuseIdentifier:${2:String})" },{ "trigger": "preferredStatusBarStyle \t func UIViewController -> UIStatusBarStyle
" , "contents": "preferredStatusBarStyle(${1:})" },{ "trigger": "decodeRestorableStateWithCoder \t func unknown -> void" , "contents": "decodeRestorableStateWithCoder(${1:NSCoder})" },{ "trigger": "pageViewController \t func unknown -> UIViewController?
" , "contents": "pageViewController(${1:UIPageViewController}, viewControllerBeforeViewController:${2:UIViewController})" },{ "trigger": "editAction \t Selector", "contents": "editAction" },{ "trigger": "UIAlertActionStyle \t UIAlertActionStyle", "contents": "UIAlertActionStyle" },{ "trigger": "UIAccessibilityUnfocusedElementKey \t String", "contents": "UIAccessibilityUnfocusedElementKey" },{ "trigger": "moveSection \t func UITableView -> void" , "contents": "moveSection(${1:Int}, toSection:${2:Int})" },{ "trigger": "UIApplicationWillTerminateNotification \t String", "contents": "UIApplicationWillTerminateNotification" },{ "trigger": "edges \t UIRectEdge", "contents": "edges" },{ "trigger": "animationControllerForDismissedController \t func UISearchController -> UIViewControllerAnimatedTransitioning?
" , "contents": "animationControllerForDismissedController(${1:UIViewController})" },{ "trigger": "offsetFromPosition \t func UITextField -> Int
" , "contents": "offsetFromPosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "widthTracksTextView \t BOOL", "contents": "widthTracksTextView" },{ "trigger": "UIPressType \t UIPressType", "contents": "UIPressType" },{ "trigger": "UIAccessibilityDarkerSystemColorsEnabled \t func UIAccessibilityElement -> BOOL
" , "contents": "UIAccessibilityDarkerSystemColorsEnabled(${1:})" },{ "trigger": "running \t BOOL", "contents": "running" },{ "trigger": "UIApplicationLaunchOptionsAnnotationKey \t String", "contents": "UIApplicationLaunchOptionsAnnotationKey" },{ "trigger": "containerView \t func unknown -> UIView
" , "contents": "containerView(${1:})" },{ "trigger": "UIImagePickerControllerQualityType \t UIImagePickerControllerQualityType", "contents": "UIImagePickerControllerQualityType" },{ "trigger": "UIPreviewActionGroup \t UIPreviewActionGroup", "contents": "UIPreviewActionGroup" },{ "trigger": "UIAlertAction.actionWithTitle \t class UIAlertAction -> Void?" , "contents": "UIAlertAction.actionWithTitle(${1:String?}, style:${2:UIAlertActionStyle}, handler:${3:UIAlertAction -> Void?})" },{ "trigger": "setBackgroundImage \t func UINavigationBar -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forBarPosition:${2:UIBarPosition}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "unknown.appearanceForTraitCollection \t static unknown -> Self
" , "contents": "unknown.appearanceForTraitCollection(${1:UITraitCollection}, whenContainedInInstancesOfClasses:${2:[AnyObject.Type]})" },{ "trigger": "UISwipeGestureRecognizer \t UISwipeGestureRecognizer", "contents": "UISwipeGestureRecognizer" },{ "trigger": "constraintEqualToAnchor \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintEqualToAnchor(${1:NSLayoutDimension!}, multiplier:${2:CGFloat}, constant:${3:CGFloat})" },{ "trigger": "UIFont.systemFontOfSize \t class UIFont -> UIFont
" , "contents": "UIFont.systemFontOfSize(${1:CGFloat})" },{ "trigger": "unknown.appearance \t static unknown -> Self
" , "contents": "unknown.appearance(${1:})" },{ "trigger": "drawAtPoint \t func NSString -> void" , "contents": "drawAtPoint(${1:CGPoint}, withAttributes:${2:[String })" },{ "trigger": "Down \t UIFocusHeading", "contents": "Down" },{ "trigger": "UIPressesEvent \t UIPressesEvent", "contents": "UIPressesEvent" },{ "trigger": "applicationProtectedDataWillBecomeUnavailable \t func unknown -> void" , "contents": "applicationProtectedDataWillBecomeUnavailable(${1:UIApplication})" },{ "trigger": "hasUnsavedChanges \t func UIDocument -> BOOL
" , "contents": "hasUnsavedChanges(${1:})" },{ "trigger": "UIPrintInteractionController.sharedPrintController \t class UIPrintInteractionController -> UIPrintInteractionController
" , "contents": "UIPrintInteractionController.sharedPrintController(${1:})" },{ "trigger": "positionAdjustmentForSearchBarIcon \t func UISearchBar -> UIOffset
" , "contents": "positionAdjustmentForSearchBarIcon(${1:UISearchBarIcon})" },{ "trigger": "closeWithCompletionHandler \t func UIDocument -> Void?
" , "contents": "closeWithCompletionHandler(${1:BOOL -> Void?})" },{ "trigger": "UIView.beginAnimations \t class UIView -> void" , "contents": "UIView.beginAnimations(${1:String?}, context:${2:UnsafeMutablePointer<Void>})" },{ "trigger": "delegate \t UIDocumentMenuDelegate", "contents": "delegate" },{ "trigger": "NSObject.makeTextWritingDirectionRightToLeft \t class NSObject -> void" , "contents": "NSObject.makeTextWritingDirectionRightToLeft(${1:AnyObject?})" },{ "trigger": "All \t UIInterfaceOrientationMask", "contents": "All" },{ "trigger": "NSLayoutFormatOptions \t NSLayoutFormatOptions", "contents": "NSLayoutFormatOptions" },{ "trigger": "UILayoutPriorityDefaultHigh \t UILayoutPriority", "contents": "UILayoutPriorityDefaultHigh" },{ "trigger": "UIAccessibilityConvertPathToScreenCoordinates \t func UIAccessibilityCustomAction -> UIBezierPath
" , "contents": "UIAccessibilityConvertPathToScreenCoordinates(${1:UIBezierPath}, _:${2:UIView})" },{ "trigger": "removeFromParentViewController \t func UIViewController -> void" , "contents": "removeFromParentViewController(${1:})" },{ "trigger": "NSTextAttachment \t NSTextAttachment", "contents": "NSTextAttachment" },{ "trigger": "UIApplicationKeyboardExtensionPointIdentifier \t String", "contents": "UIApplicationKeyboardExtensionPointIdentifier" },{ "trigger": "NSValue.valueWithCGAffineTransform \t class NSValue -> NSValue
" , "contents": "NSValue.valueWithCGAffineTransform(${1:CGAffineTransform})" },{ "trigger": "applicationIconBadgeNumber \t Int", "contents": "applicationIconBadgeNumber" },{ "trigger": "UIAttachmentBehavior.pinAttachmentWithItem \t class UIAttachmentBehavior -> Self
" , "contents": "UIAttachmentBehavior.pinAttachmentWithItem(${1:UIDynamicItem}, attachedToItem:${2:UIDynamicItem}, attachmentAnchor:${3:CGPoint})" },{ "trigger": "UIFontFeatureSelectorIdentifierKey \t String", "contents": "UIFontFeatureSelectorIdentifierKey" },{ "trigger": "systemLayoutFittingSizeDidChangeForChildContentContainer \t func unknown -> void" , "contents": "systemLayoutFittingSizeDidChangeForChildContentContainer(${1:UIContentContainer})" },{ "trigger": "copyWithZone \t func UIPreviewActionGroup -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "finishedUnselectedImage \t func UITabBarItem -> UIImage?
" , "contents": "finishedUnselectedImage(${1:})" },{ "trigger": "positionWithinRange \t func UITextView -> UITextPosition?
" , "contents": "positionWithinRange(${1:UITextRange}, farthestInDirection:${2:UITextLayoutDirection})" },{ "trigger": "UIApplicationLaunchOptionsSourceApplicationKey \t String", "contents": "UIApplicationLaunchOptionsSourceApplicationKey" },{ "trigger": "scopeBarBackgroundImage \t UIImage", "contents": "scopeBarBackgroundImage" },{ "trigger": "viewWillUnload \t func UIViewController -> void" , "contents": "viewWillUnload(${1:})" },{ "trigger": "UIKeyboardType \t UIKeyboardType", "contents": "UIKeyboardType" },{ "trigger": "beginAppearanceTransition \t func UIViewController -> void" , "contents": "beginAppearanceTransition(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "constraintEqualToConstant \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintEqualToConstant(${1:CGFloat})" },{ "trigger": "backgroundRefreshStatus \t UIBackgroundRefreshStatus", "contents": "backgroundRefreshStatus" },{ "trigger": "regionByUnionWithRegion \t func UIRegion -> Self
" , "contents": "regionByUnionWithRegion(${1:UIRegion})" },{ "trigger": "setBaseWritingDirection \t func unknown -> void" , "contents": "setBaseWritingDirection(${1:UITextWritingDirection}, forRange:${2:UITextRange})" },{ "trigger": "removeGestureRecognizer \t func UIView -> void" , "contents": "removeGestureRecognizer(${1:UIGestureRecognizer})" },{ "trigger": "baselineAdjustment \t UIBaselineAdjustment", "contents": "baselineAdjustment" },{ "trigger": "UIDocumentChangeKind \t UIDocumentChangeKind", "contents": "UIDocumentChangeKind" },{ "trigger": "URLForItemWithPersistentIdentifier \t func NSFileProviderExtension -> NSURL?
" , "contents": "URLForItemWithPersistentIdentifier(${1:String})" },{ "trigger": "searchDisplayControllerWillEndSearch \t func unknown -> void" , "contents": "searchDisplayControllerWillEndSearch(${1:UISearchDisplayController})" },{ "trigger": "rangeEnclosingPosition \t func UITextInputStringTokenizer -> UITextRange?
" , "contents": "rangeEnclosingPosition(${1:UITextPosition}, withGranularity:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "UIAttachmentBehavior.fixedAttachmentWithItem \t class UIAttachmentBehavior -> Self
" , "contents": "UIAttachmentBehavior.fixedAttachmentWithItem(${1:UIDynamicItem}, attachedToItem:${2:UIDynamicItem}, attachmentAnchor:${3:CGPoint})" },{ "trigger": "childViewControllerForStatusBarStyle \t func UIViewController -> UIViewController?
" , "contents": "childViewControllerForStatusBarStyle(${1:})" },{ "trigger": "TraitExpanded \t UIFontDescriptorSymbolicTraits", "contents": "TraitExpanded" },{ "trigger": "NSTextAlignmentToCTTextAlignment \t func NSTextAttachment -> CTTextAlignment
" , "contents": "NSTextAlignmentToCTTextAlignment(${1:NSTextAlignment})" },{ "trigger": "UIImagePickerController.isSourceTypeAvailable \t class UIImagePickerController -> BOOL
" , "contents": "UIImagePickerController.isSourceTypeAvailable(${1:UIImagePickerControllerSourceType})" },{ "trigger": "UIScreenDidConnectNotification \t String", "contents": "UIScreenDidConnectNotification" },{ "trigger": "collectionViewLayout \t UICollectionViewLayout", "contents": "collectionViewLayout" },{ "trigger": "titleColorForState \t func UIButton -> UIColor?
" , "contents": "titleColorForState(${1:UIControlState})" },{ "trigger": "didTransitionToState \t func UITableViewCell -> void" , "contents": "didTransitionToState(${1:UITableViewCellStateMask})" },{ "trigger": "reloadAllComponents \t func UIPickerView -> void" , "contents": "reloadAllComponents(${1:})" },{ "trigger": "UIPrintInteractionController.printableUTIs \t class UIPrintInteractionController -> Set String 
" , "contents": "UIPrintInteractionController.printableUTIs(${1:})" },{ "trigger": "printerPickerControllerWillPresent \t func unknown -> void" , "contents": "printerPickerControllerWillPresent(${1:UIPrinterPickerController})" },{ "trigger": "UITraitCollection.traitCollectionWithVerticalSizeClass \t class UITraitCollection -> UITraitCollection
" , "contents": "UITraitCollection.traitCollectionWithVerticalSizeClass(${1:UIUserInterfaceSizeClass})" },{ "trigger": "interactionControllerForDismissal \t func UISearchController -> UIViewControllerInteractiveTransitioning?
" , "contents": "interactionControllerForDismissal(${1:UIViewControllerAnimatedTransitioning})" },{ "trigger": "state \t UIGestureRecognizerState", "contents": "state" },{ "trigger": "copy \t func NSObject -> void" , "contents": "copy(${1:AnyObject?})" },{ "trigger": "trailingAnchor \t NSLayoutXAxisAnchor", "contents": "trailingAnchor" },{ "trigger": "UIPasteboard.removePasteboardWithName \t class UIPasteboard -> void" , "contents": "UIPasteboard.removePasteboardWithName(${1:String})" },{ "trigger": "TraitTightLeading \t UIFontDescriptorSymbolicTraits", "contents": "TraitTightLeading" },{ "trigger": "characterOffsetOfPosition \t func UITextView -> Int
" , "contents": "characterOffsetOfPosition(${1:UITextPosition}, withinRange:${2:UITextRange})" },{ "trigger": "imageOrientation \t UIImageOrientation", "contents": "imageOrientation" },{ "trigger": "navigationController \t func unknown -> void" , "contents": "navigationController(${1:UINavigationController}, willShowViewController:${2:UIViewController}, animated:${3:BOOL})" },{ "trigger": "UIApplicationShortcutItem \t UIApplicationShortcutItem", "contents": "UIApplicationShortcutItem" },{ "trigger": "sectionInset \t UIEdgeInsets", "contents": "sectionInset" },{ "trigger": "orientation \t UIPrintInfoOrientation", "contents": "orientation" },{ "trigger": "displayScale \t CGFloat", "contents": "displayScale" },{ "trigger": "lineHeight \t CGFloat", "contents": "lineHeight" },{ "trigger": "scalesPageToFit \t BOOL", "contents": "scalesPageToFit" },{ "trigger": "UIInputViewController \t UIInputViewController", "contents": "UIInputViewController" },{ "trigger": "setTextContainer \t func NSLayoutManager -> void" , "contents": "setTextContainer(${1:NSTextContainer}, forGlyphRange:${2:NSRange})" },{ "trigger": "lineFragmentPadding \t CGFloat", "contents": "lineFragmentPadding" },{ "trigger": "setMarkedText \t func UITextView -> void" , "contents": "setMarkedText(${1:String?}, selectedRange:${2:NSRange})" },{ "trigger": "viewDidLoad \t func UIViewController -> void" , "contents": "viewDidLoad(${1:})" },{ "trigger": "drawInRect \t func UIImage -> void" , "contents": "drawInRect(${1:CGRect})" },{ "trigger": "applicationProtectedDataDidBecomeAvailable \t func unknown -> void" , "contents": "applicationProtectedDataDidBecomeAvailable(${1:UIApplication})" },{ "trigger": "UIActivityIndicatorViewStyle \t UIActivityIndicatorViewStyle", "contents": "UIActivityIndicatorViewStyle" },{ "trigger": "hasAction \t BOOL", "contents": "hasAction" },{ "trigger": "alignment \t UIStackViewAlignment", "contents": "alignment" },{ "trigger": "copyWithZone \t func UILexiconEntry -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "locationForGlyphAtIndex \t func NSLayoutManager -> CGPoint
" , "contents": "locationForGlyphAtIndex(${1:Int})" },{ "trigger": "transitionStyle \t UIPageViewControllerTransitionStyle", "contents": "transitionStyle" },{ "trigger": "printerPickerController \t func unknown -> BOOL
" , "contents": "printerPickerController(${1:UIPrinterPickerController}, shouldShowPrinter:${2:UIPrinter})" },{ "trigger": "textRectForBounds \t func UITextField -> CGRect
" , "contents": "textRectForBounds(${1:CGRect})" },{ "trigger": "previousLocationInView \t func UITouch -> CGPoint
" , "contents": "previousLocationInView(${1:UIView?})" },{ "trigger": "UIApplicationBackgroundFetchIntervalNever \t NSTimeInterval", "contents": "UIApplicationBackgroundFetchIntervalNever" },{ "trigger": "networkActivityIndicatorVisible \t BOOL", "contents": "networkActivityIndicatorVisible" },{ "trigger": "scrollViewDidEndScrollingAnimation \t func UICollectionViewController -> void" , "contents": "scrollViewDidEndScrollingAnimation(${1:UIScrollView})" },{ "trigger": "encodeWithCoder \t func UIRegion -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "transitionDuration \t func unknown -> NSTimeInterval
" , "contents": "transitionDuration(${1:})" },{ "trigger": "UIImage.animatedImageNamed \t class UIImage -> UIImage?
" , "contents": "UIImage.animatedImageNamed(${1:String}, duration:${2:NSTimeInterval})" },{ "trigger": "sectionForSectionIndexTitleAtIndex \t func UILocalizedIndexedCollation -> Int
" , "contents": "sectionForSectionIndexTitleAtIndex(${1:Int})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, performAction:${2:Selector}, forRowAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "countDownDuration \t NSTimeInterval", "contents": "countDownDuration" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didDeselectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "viewControllerForKey \t func unknown -> UIViewController?
" , "contents": "viewControllerForKey(${1:String})" },{ "trigger": "webView \t func unknown -> BOOL
" , "contents": "webView(${1:UIWebView}, shouldStartLoadWithRequest:${2:NSURLRequest}, navigationType:${3:UIWebViewNavigationType})" },{ "trigger": "pickerView \t func unknown -> CGFloat
" , "contents": "pickerView(${1:UIPickerView}, widthForComponent:${2:Int})" },{ "trigger": "NSObject.accessibilityFrame \t class NSObject -> CGRect
" , "contents": "NSObject.accessibilityFrame(${1:})" },{ "trigger": "didMoveToParentViewController \t func UIViewController -> void" , "contents": "didMoveToParentViewController(${1:UIViewController?})" },{ "trigger": "disableEditing \t func UIDocument -> void" , "contents": "disableEditing(${1:})" },{ "trigger": "contentMode \t UIViewContentMode", "contents": "contentMode" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldHighlightItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "NSUnderlineStyleAttributeName \t String", "contents": "NSUnderlineStyleAttributeName" },{ "trigger": "changeCountTokenForSaveOperation \t func UIDocument -> AnyObject
" , "contents": "changeCountTokenForSaveOperation(${1:UIDocumentSaveOperation})" },{ "trigger": "segmentedControlStyle \t UISegmentedControlStyle", "contents": "segmentedControlStyle" },{ "trigger": "inputView \t UIInputView", "contents": "inputView" },{ "trigger": "navigationController \t func unknown -> UIViewControllerInteractiveTransitioning?
" , "contents": "navigationController(${1:UINavigationController}, interactionControllerForAnimationController:${2:UIViewControllerAnimatedTransitioning})" },{ "trigger": "AlignAllCenterX \t NSLayoutFormatOptions", "contents": "AlignAllCenterX" },{ "trigger": "UISplitViewControllerDisplayMode \t UISplitViewControllerDisplayMode", "contents": "UISplitViewControllerDisplayMode" },{ "trigger": "UILayoutPriorityRequired \t UILayoutPriority", "contents": "UILayoutPriorityRequired" },{ "trigger": "CalculationModePaced \t UIViewKeyframeAnimationOptions", "contents": "CalculationModePaced" },{ "trigger": "UITableViewCellAccessoryType \t UITableViewCellAccessoryType", "contents": "UITableViewCellAccessoryType" },{ "trigger": "UIViewPrintFormatter \t UIViewPrintFormatter", "contents": "UIViewPrintFormatter" },{ "trigger": "localizedName \t String", "contents": "localizedName" },{ "trigger": "paste \t func NSObject -> void" , "contents": "paste(${1:AnyObject?})" },{ "trigger": "UITextAlignment \t UITextAlignment", "contents": "UITextAlignment" },{ "trigger": "UIFontDescriptorTextStyleAttribute \t String", "contents": "UIFontDescriptorTextStyleAttribute" },{ "trigger": "UIContentSizeCategoryAccessibilityExtraLarge \t String", "contents": "UIContentSizeCategoryAccessibilityExtraLarge" },{ "trigger": "NSLayoutConstraint.activateConstraints \t class NSLayoutConstraint -> void" , "contents": "NSLayoutConstraint.activateConstraints(${1:[NSLayoutConstraint]})" },{ "trigger": "addButtonWithTitle \t func UIAlertView -> Int
" , "contents": "addButtonWithTitle(${1:String?})" },{ "trigger": "touchesShouldCancelInContentView \t func UIScrollView -> BOOL
" , "contents": "touchesShouldCancelInContentView(${1:UIView})" },{ "trigger": "scrollViewWillBeginDragging \t func UITableViewController -> void" , "contents": "scrollViewWillBeginDragging(${1:UIScrollView})" },{ "trigger": "presentFromBarButtonItem \t func UIPrintInteractionController -> BOOL
" , "contents": "presentFromBarButtonItem(${1:UIBarButtonItem}, animated:${2:BOOL}, completionHandler:${3:UIPrintInteractionCompletionHandler?})" },{ "trigger": "presentedItemOperationQueue \t NSOperationQueue", "contents": "presentedItemOperationQueue" },{ "trigger": "UIUserNotificationCategory.supportsSecureCoding \t class UIUserNotificationCategory -> BOOL
" , "contents": "UIUserNotificationCategory.supportsSecureCoding(${1:})" },{ "trigger": "UIImagePickerControllerCameraCaptureMode \t UIImagePickerControllerCameraCaptureMode", "contents": "UIImagePickerControllerCameraCaptureMode" },{ "trigger": "encodeCGVector \t func NSCoder -> void" , "contents": "encodeCGVector(${1:CGVector}, forKey:${2:String})" },{ "trigger": "UIControl \t UIControl", "contents": "UIControl" },{ "trigger": "UIDynamicItemCollisionBoundsType \t UIDynamicItemCollisionBoundsType", "contents": "UIDynamicItemCollisionBoundsType" },{ "trigger": "activityImage \t func UIActivity -> UIImage?
" , "contents": "activityImage(${1:})" },{ "trigger": "touchesCancelled \t func UIResponder -> void" , "contents": "touchesCancelled(${1:Set<UITouch>?}, withEvent:${2:UIEvent?})" },{ "trigger": "scrollViewDidScroll \t func unknown -> void" , "contents": "scrollViewDidScroll(${1:UIScrollView})" },{ "trigger": "scrollViewDidEndDecelerating \t func unknown -> void" , "contents": "scrollViewDidEndDecelerating(${1:UIScrollView})" },{ "trigger": "tableView \t func unknown -> UITableViewCellAccessoryType
" , "contents": "tableView(${1:UITableView}, accessoryTypeForRowWithIndexPath:${2:NSIndexPath})" },{ "trigger": "UIView.setAnimationDelegate \t class UIView -> void" , "contents": "UIView.setAnimationDelegate(${1:AnyObject?})" },{ "trigger": "UITextField \t UITextField", "contents": "UITextField" },{ "trigger": "constraintEqualToAnchor \t func NSLayoutAnchor -> NSLayoutConstraint!
" , "contents": "constraintEqualToAnchor(${1:NSLayoutAnchor!}, constant:${2:CGFloat})" },{ "trigger": "layoutManager \t func unknown -> NSControlCharacterAction
" , "contents": "layoutManager(${1:NSLayoutManager}, shouldUseAction:${2:NSControlCharacterAction}, forControlCharacterAtIndex:${3:Int})" },{ "trigger": "changeCount \t Int", "contents": "changeCount" },{ "trigger": "addSubview \t func UIView -> void" , "contents": "addSubview(${1:UIView})" },{ "trigger": "simpleRectangularTextContainer \t BOOL", "contents": "simpleRectangularTextContainer" },{ "trigger": "encodeWithCoder \t func UIUserNotificationAction -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "anchored \t BOOL", "contents": "anchored" },{ "trigger": "continueTrackingWithTouch \t func UIControl -> BOOL
" , "contents": "continueTrackingWithTouch(${1:UITouch}, withEvent:${2:UIEvent?})" },{ "trigger": "NSObject.accessibilityPath \t class NSObject -> UIBezierPath?
" , "contents": "NSObject.accessibilityPath(${1:})" },{ "trigger": "backBarButtonItem \t UIBarButtonItem", "contents": "backBarButtonItem" },{ "trigger": "lineFragmentRectForGlyphAtIndex \t func NSLayoutManager -> CGRect
" , "contents": "lineFragmentRectForGlyphAtIndex(${1:Int}, effectiveRange:${2:NSRangePointer}, withoutAdditionalLayout:${3:BOOL})" },{ "trigger": "previewingContext \t func unknown -> UIViewController?
" , "contents": "previewingContext(${1:UIViewControllerPreviewing}, viewControllerForLocation:${2:CGPoint})" },{ "trigger": "referenceView \t UIView", "contents": "referenceView" },{ "trigger": "baseWritingDirection \t NSWritingDirection", "contents": "baseWritingDirection" },{ "trigger": "contentOffset \t CGPoint", "contents": "contentOffset" },{ "trigger": "UITextFieldTextDidChangeNotification \t String", "contents": "UITextFieldTextDidChangeNotification" },{ "trigger": "None \t UIDataDetectorTypes", "contents": "None" },{ "trigger": "UITableViewRowAction.rowActionWithStyle \t class UITableViewRowAction -> Void" , "contents": "UITableViewRowAction.rowActionWithStyle(${1:UITableViewRowActionStyle}, title:${2:String?}, handler:${3:UITableViewRowAction}, NSIndexPath:${4:})" },{ "trigger": "dismissWithClickedButtonIndex \t func UIActionSheet -> void" , "contents": "dismissWithClickedButtonIndex(${1:Int}, animated:${2:BOOL})" },{ "trigger": "viewForZoomingInScrollView \t func UITableViewController -> UIView?
" , "contents": "viewForZoomingInScrollView(${1:UIScrollView})" },{ "trigger": "positionFromPosition \t func UITextField -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, inDirection:${2:UITextLayoutDirection}, offset:${3:Int})" },{ "trigger": "visibleCells \t func UICollectionView -> [UICollectionViewCell]
" , "contents": "visibleCells(${1:})" },{ "trigger": "hasNonContiguousLayout \t BOOL", "contents": "hasNonContiguousLayout" },{ "trigger": "showViewController \t func UINavigationController -> void" , "contents": "showViewController(${1:UIViewController}, sender:${2:AnyObject?})" },{ "trigger": "navigationControllerSupportedInterfaceOrientations \t func unknown -> UIInterfaceOrientationMask
" , "contents": "navigationControllerSupportedInterfaceOrientations(${1:UINavigationController})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didReceiveRemoteNotification:${2:[NSObject })" },{ "trigger": "soundName \t String", "contents": "soundName" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didUpdateFocusInContext:${2:UITableViewFocusUpdateContext}, withAnimationCoordinator:${3:UIFocusAnimationCoordinator})" },{ "trigger": "ensureGlyphsForGlyphRange \t func NSLayoutManager -> void" , "contents": "ensureGlyphsForGlyphRange(${1:NSRange})" },{ "trigger": "UIPrintFormatter \t UIPrintFormatter", "contents": "UIPrintFormatter" },{ "trigger": "UIApplicationBackgroundRefreshStatusDidChangeNotification \t String", "contents": "UIApplicationBackgroundRefreshStatusDidChangeNotification" },{ "trigger": "layoutAttributesForItemAtIndexPath \t func UICollectionView -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForItemAtIndexPath(${1:NSIndexPath})" },{ "trigger": "LandscapeRight \t UIInterfaceOrientationMask", "contents": "LandscapeRight" },{ "trigger": "moveSection \t func UICollectionView -> void" , "contents": "moveSection(${1:Int}, toSection:${2:Int})" },{ "trigger": "UIFontTextStyleFootnote \t String", "contents": "UIFontTextStyleFootnote" },{ "trigger": "searchResultsUpdater \t UISearchResultsUpdating", "contents": "searchResultsUpdater" },{ "trigger": "UIFieldBehavior.turbulenceFieldWithSmoothness \t class UIFieldBehavior -> Self
" , "contents": "UIFieldBehavior.turbulenceFieldWithSmoothness(${1:CGFloat}, animationSpeed:${2:CGFloat})" },{ "trigger": "tabBarController \t func unknown -> void" , "contents": "tabBarController(${1:UITabBarController}, willBeginCustomizingViewControllers:${2:[UIViewController]})" },{ "trigger": "shouldAutomaticallyForwardRotationMethods \t func UIViewController -> BOOL
" , "contents": "shouldAutomaticallyForwardRotationMethods(${1:})" },{ "trigger": "NSParagraphStyle.supportsSecureCoding \t class NSParagraphStyle -> BOOL
" , "contents": "NSParagraphStyle.supportsSecureCoding(${1:})" },{ "trigger": "setBaseWritingDirection \t func UITextView -> void" , "contents": "setBaseWritingDirection(${1:UITextWritingDirection}, forRange:${2:UITextRange})" },{ "trigger": "NSStrikethroughStyleAttributeName \t String", "contents": "NSStrikethroughStyleAttributeName" },{ "trigger": "UITrackingRunLoopMode \t String", "contents": "UITrackingRunLoopMode" },{ "trigger": "copyWithZone \t func UITableViewRowAction -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "tableView \t func unknown -> String?
" , "contents": "tableView(${1:UITableView}, titleForDeleteConfirmationButtonForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIFontDescriptorFixedAdvanceAttribute \t String", "contents": "UIFontDescriptorFixedAdvanceAttribute" },{ "trigger": "printInteractionControllerDidFinishJob \t func unknown -> void" , "contents": "printInteractionControllerDidFinishJob(${1:UIPrintInteractionController})" },{ "trigger": "EditingDidEndOnExit \t UIControlEvents", "contents": "EditingDidEndOnExit" },{ "trigger": "contentInsets \t UIEdgeInsets", "contents": "contentInsets" },{ "trigger": "videoEditorController \t func unknown -> void" , "contents": "videoEditorController(${1:UIVideoEditorController}, didFailWithError:${2:NSError})" },{ "trigger": "textFieldShouldBeginEditing \t func unknown -> BOOL
" , "contents": "textFieldShouldBeginEditing(${1:UITextField})" },{ "trigger": "finishInteractiveTransition \t func unknown -> void" , "contents": "finishInteractiveTransition(${1:})" },{ "trigger": "setLocation \t func NSLayoutManager -> void" , "contents": "setLocation(${1:CGPoint}, forStartOfGlyphRange:${2:NSRange})" },{ "trigger": "dismissKeyboard \t func UIInputViewController -> void" , "contents": "dismissKeyboard(${1:})" },{ "trigger": "TransitionFlipFromBottom \t UIViewAnimationOptions", "contents": "TransitionFlipFromBottom" },{ "trigger": "supportedInterfaceOrientationsForWindow \t func UIApplication -> UIInterfaceOrientationMask
" , "contents": "supportedInterfaceOrientationsForWindow(${1:UIWindow?})" },{ "trigger": "UIPressPhase \t UIPressPhase", "contents": "UIPressPhase" },{ "trigger": "Envelope \t UIPrinterJobTypes", "contents": "Envelope" },{ "trigger": "UITextGranularity \t UITextGranularity", "contents": "UITextGranularity" },{ "trigger": "tag \t Int", "contents": "tag" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldDeselectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "collisionDelegate \t UICollisionBehaviorDelegate", "contents": "collisionDelegate" },{ "trigger": "UIActivityTypeAddToReadingList \t String", "contents": "UIActivityTypeAddToReadingList" },{ "trigger": "canPerformUnwindSegueAction \t func UIViewController -> BOOL
" , "contents": "canPerformUnwindSegueAction(${1:Selector}, fromViewController:${2:UIViewController}, withSender:${3:AnyObject})" },{ "trigger": "usesEvenOddFillRule \t BOOL", "contents": "usesEvenOddFillRule" },{ "trigger": "UIAccessibilityIsSpeakSelectionEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsSpeakSelectionEnabled(${1:})" },{ "trigger": "dismissViewControllerAnimated \t func UIViewController -> Void?
" , "contents": "dismissViewControllerAnimated(${1:BOOL}, completion:${2: -> Void?})" },{ "trigger": "tableView \t func unknown -> CGFloat
" , "contents": "tableView(${1:UITableView}, estimatedHeightForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "AlignmentMask \t NSLayoutFormatOptions", "contents": "AlignmentMask" },{ "trigger": "BeginFromCurrentState \t UIViewAnimationOptions", "contents": "BeginFromCurrentState" },{ "trigger": "lineFragmentRectForGlyphAtIndex \t func NSLayoutManager -> CGRect
" , "contents": "lineFragmentRectForGlyphAtIndex(${1:Int}, effectiveRange:${2:NSRangePointer})" },{ "trigger": "pressesBegan \t func UIResponder -> void" , "contents": "pressesBegan(${1:Set<UIPress>}, withEvent:${2:UIPressesEvent?})" },{ "trigger": "interfaceOrientation \t UIInterfaceOrientation", "contents": "interfaceOrientation" },{ "trigger": "layoutManager \t func unknown -> CGRect
" , "contents": "layoutManager(${1:NSLayoutManager}, boundingBoxForControlGlyphAtIndex:${2:Int}, forTextContainer:${3:NSTextContainer}, proposedLineFragment:${4:CGRect}, glyphPosition:${5:CGPoint}, characterIndex:${6:Int})" },{ "trigger": "UIApplicationUserDidTakeScreenshotNotification \t String", "contents": "UIApplicationUserDidTakeScreenshotNotification" },{ "trigger": "UIKeyboardWillShowNotification \t String", "contents": "UIKeyboardWillShowNotification" },{ "trigger": "setDecrementImage \t func UIStepper -> void" , "contents": "setDecrementImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didDeselectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "setAttachmentSize \t func NSLayoutManager -> void" , "contents": "setAttachmentSize(${1:CGSize}, forGlyphRange:${2:NSRange})" },{ "trigger": "navigationBarHidden \t BOOL", "contents": "navigationBarHidden" },{ "trigger": "systemLayoutSizeFittingSize \t func UIView -> CGSize
" , "contents": "systemLayoutSizeFittingSize(${1:CGSize})" },{ "trigger": "removeDictationResultPlaceholder \t func UITextField -> void" , "contents": "removeDictationResultPlaceholder(${1:AnyObject}, willInsertResult:${2:BOOL})" },{ "trigger": "select \t func NSObject -> void" , "contents": "select(${1:AnyObject?})" },{ "trigger": "title \t String", "contents": "title" },{ "trigger": "Repeat \t UIViewKeyframeAnimationOptions", "contents": "Repeat" },{ "trigger": "datePickerMode \t UIDatePickerMode", "contents": "datePickerMode" },{ "trigger": "lineWidth \t CGFloat", "contents": "lineWidth" },{ "trigger": "UIActivityTypePostToVimeo \t String", "contents": "UIActivityTypePostToVimeo" },{ "trigger": "tabBar \t func unknown -> void" , "contents": "tabBar(${1:UITabBar}, didSelectItem:${2:UITabBarItem})" },{ "trigger": "UICollectionViewFlowLayout \t UICollectionViewFlowLayout", "contents": "UICollectionViewFlowLayout" },{ "trigger": "multipleTouchEnabled \t BOOL", "contents": "multipleTouchEnabled" },{ "trigger": "accessibilityElementAtIndex \t func NSObject -> AnyObject?
" , "contents": "accessibilityElementAtIndex(${1:Int})" },{ "trigger": "cameraFlashMode \t UIImagePickerControllerCameraFlashMode", "contents": "cameraFlashMode" },{ "trigger": "thumbRectForBounds \t func UISlider -> CGRect
" , "contents": "thumbRectForBounds(${1:CGRect}, trackRect:${2:CGRect}, value:${3:Float})" },{ "trigger": "UIAccessibilityTraitSelected \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitSelected" },{ "trigger": "scrollViewDidZoom \t func UICollectionViewController -> void" , "contents": "scrollViewDidZoom(${1:UIScrollView})" },{ "trigger": "UIView.setAnimationCurve \t class UIView -> void" , "contents": "UIView.setAnimationCurve(${1:UIViewAnimationCurve})" },{ "trigger": "UIBackgroundTaskInvalid \t UIBackgroundTaskIdentifier", "contents": "UIBackgroundTaskInvalid" },{ "trigger": "setShowsCancelButton \t func UISearchBar -> void" , "contents": "setShowsCancelButton(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "previewingGestureRecognizerForFailureRelationship \t UIGestureRecognizer", "contents": "previewingGestureRecognizerForFailureRelationship" },{ "trigger": "type \t UIPressType", "contents": "type" },{ "trigger": "layoutManager \t func unknown -> CGFloat
" , "contents": "layoutManager(${1:NSLayoutManager}, lineSpacingAfterGlyphAtIndex:${2:Int}, withProposedLineFragmentRect:${3:CGRect})" },{ "trigger": "CIColor \t CIColor", "contents": "CIColor" },{ "trigger": "didUpdateFocusInContext \t func unknown -> void" , "contents": "didUpdateFocusInContext(${1:UIFocusUpdateContext}, withAnimationCoordinator:${2:UIFocusAnimationCoordinator})" },{ "trigger": "leftViewRectForBounds \t func UITextField -> CGRect
" , "contents": "leftViewRectForBounds(${1:CGRect})" },{ "trigger": "ClassOrnamentals \t UIFontDescriptorSymbolicTraits", "contents": "ClassOrnamentals" },{ "trigger": "dictationRecordingDidEnd \t func unknown -> void" , "contents": "dictationRecordingDidEnd(${1:})" },{ "trigger": "secureTextEntry \t BOOL", "contents": "secureTextEntry" },{ "trigger": "accessibilityFrameForLineNumber \t func unknown -> CGRect
" , "contents": "accessibilityFrameForLineNumber(${1:Int})" },{ "trigger": "applicationDidReceiveMemoryWarning \t func unknown -> void" , "contents": "applicationDidReceiveMemoryWarning(${1:UIApplication})" },{ "trigger": "UISearchController \t UISearchController", "contents": "UISearchController" },{ "trigger": "userInput \t String", "contents": "userInput" },{ "trigger": "font \t UIFont", "contents": "font" },{ "trigger": "UICollectionViewLayoutAttributes \t UICollectionViewLayoutAttributes", "contents": "UICollectionViewLayoutAttributes" },{ "trigger": "titleView \t UIView", "contents": "titleView" },{ "trigger": "NSStringFromCGSize \t func NSTextAlignment -> String
" , "contents": "NSStringFromCGSize(${1:CGSize})" },{ "trigger": "enabledRemoteNotificationTypes \t func UIApplication -> UIRemoteNotificationType
" , "contents": "enabledRemoteNotificationTypes(${1:})" },{ "trigger": "searchController \t UISearchController", "contents": "searchController" },{ "trigger": "textViewDidBeginEditing \t func unknown -> void" , "contents": "textViewDidBeginEditing(${1:UITextView})" },{ "trigger": "size \t CGSize", "contents": "size" },{ "trigger": "inputViewStyle \t UIInputViewStyle", "contents": "inputViewStyle" },{ "trigger": "accelerometer \t func unknown -> void" , "contents": "accelerometer(${1:UIAccelerometer}, didAccelerate:${2:UIAcceleration})" },{ "trigger": "isAnimated \t func unknown -> BOOL
" , "contents": "isAnimated(${1:})" },{ "trigger": "ClassModernSerifs \t UIFontDescriptorSymbolicTraits", "contents": "ClassModernSerifs" },{ "trigger": "searchDisplayController \t func unknown -> BOOL
" , "contents": "searchDisplayController(${1:UISearchDisplayController}, shouldReloadTableForSearchScope:${2:Int})" },{ "trigger": "drawAtPoint \t func UIImage -> void" , "contents": "drawAtPoint(${1:CGPoint})" },{ "trigger": "systemName \t String", "contents": "systemName" },{ "trigger": "Highlighted \t UIControlState", "contents": "Highlighted" },{ "trigger": "actionSheet \t func unknown -> void" , "contents": "actionSheet(${1:UIActionSheet}, clickedButtonAtIndex:${2:Int})" },{ "trigger": "UIStatusBarAnimation \t UIStatusBarAnimation", "contents": "UIStatusBarAnimation" },{ "trigger": "delaysTouchesBegan \t BOOL", "contents": "delaysTouchesBegan" },{ "trigger": "updateConstraints \t func UIView -> void" , "contents": "updateConstraints(${1:})" },{ "trigger": "inputAccessoryViewController \t UIInputViewController", "contents": "inputAccessoryViewController" },{ "trigger": "webViewDidStartLoad \t func unknown -> void" , "contents": "webViewDidStartLoad(${1:UIWebView})" },{ "trigger": "UIContentSizeCategoryExtraLarge \t String", "contents": "UIContentSizeCategoryExtraLarge" },{ "trigger": "delegate \t UIWebViewDelegate", "contents": "delegate" },{ "trigger": "UIDeviceOrientationDidChangeNotification \t String", "contents": "UIDeviceOrientationDidChangeNotification" },{ "trigger": "UIScreen.screens \t class UIScreen -> [UIScreen]
" , "contents": "UIScreen.screens(${1:})" },{ "trigger": "UIImagePickerController \t UIImagePickerController", "contents": "UIImagePickerController" },{ "trigger": "leftItemsSupplementBackButton \t BOOL", "contents": "leftItemsSupplementBackButton" },{ "trigger": "toolbarHidden \t BOOL", "contents": "toolbarHidden" },{ "trigger": "tabBarControllerPreferredInterfaceOrientationForPresentation \t func unknown -> UIInterfaceOrientation
" , "contents": "tabBarControllerPreferredInterfaceOrientationForPresentation(${1:UITabBarController})" },{ "trigger": "layoutManager \t func unknown -> BOOL
" , "contents": "layoutManager(${1:NSLayoutManager}, shouldBreakLineByHyphenatingBeforeCharacterAtIndex:${2:Int})" },{ "trigger": "NSRTFTextDocumentType \t String", "contents": "NSRTFTextDocumentType" },{ "trigger": "setValue \t func UISlider -> void" , "contents": "setValue(${1:Float}, animated:${2:BOOL})" },{ "trigger": "scrollViewDidScrollToTop \t func UIWebView -> void" , "contents": "scrollViewDidScrollToTop(${1:UIScrollView})" },{ "trigger": "decodeCGSizeForKey \t func NSCoder -> CGSize
" , "contents": "decodeCGSizeForKey(${1:String})" },{ "trigger": "NSControlCharacterParagraphBreakAction \t Int", "contents": "NSControlCharacterParagraphBreakAction" },{ "trigger": "systemVersion \t String", "contents": "systemVersion" },{ "trigger": "UIAccessibilityPostNotification \t func unknown -> void" , "contents": "UIAccessibilityPostNotification(${1:UIAccessibilityNotifications}, _:${2:AnyObject?})" },{ "trigger": "glyphAtIndex \t func NSLayoutManager -> CGGlyph
" , "contents": "glyphAtIndex(${1:Int}, isValidIndex:${2:UnsafeMutablePointer<BOOL>})" },{ "trigger": "attachmentRange \t UIFloatRange", "contents": "attachmentRange" },{ "trigger": "tableView \t func unknown -> CGFloat
" , "contents": "tableView(${1:UITableView}, heightForHeaderInSection:${2:Int})" },{ "trigger": "NSObject.setAccessibilityElementsHidden \t class NSObject -> void" , "contents": "NSObject.setAccessibilityElementsHidden(${1:BOOL})" },{ "trigger": "ensureLayoutForBoundingRect \t func NSLayoutManager -> void" , "contents": "ensureLayoutForBoundingRect(${1:CGRect}, inTextContainer:${2:NSTextContainer})" },{ "trigger": "applicationSupportsShakeToEdit \t BOOL", "contents": "applicationSupportsShakeToEdit" },{ "trigger": "editingAccessoryType \t UITableViewCellAccessoryType", "contents": "editingAccessoryType" },{ "trigger": "UILocalizedIndexedCollation.currentCollation \t class UILocalizedIndexedCollation -> Self
" , "contents": "UILocalizedIndexedCollation.currentCollation(${1:})" },{ "trigger": "UIView.appearanceForTraitCollection \t class UIView -> Self
" , "contents": "UIView.appearanceForTraitCollection(${1:UITraitCollection})" },{ "trigger": "NSObject.indexOfAccessibilityElement \t class NSObject -> Int
" , "contents": "NSObject.indexOfAccessibilityElement(${1:AnyObject})" },{ "trigger": "tableView \t func UITableViewController -> CGFloat
" , "contents": "tableView(${1:UITableView}, estimatedHeightForHeaderInSection:${2:Int})" },{ "trigger": "NSTextWritingDirection \t NSTextWritingDirection", "contents": "NSTextWritingDirection" },{ "trigger": "persistent \t BOOL", "contents": "persistent" },{ "trigger": "barStyle \t UIBarStyle", "contents": "barStyle" },{ "trigger": "UIFontDescriptor \t UIFontDescriptor", "contents": "UIFontDescriptor" },{ "trigger": "UIAccelerometer.sharedAccelerometer \t class UIAccelerometer -> UIAccelerometer
" , "contents": "UIAccelerometer.sharedAccelerometer(${1:})" },{ "trigger": "finishedHandlingError \t func UIDocument -> void" , "contents": "finishedHandlingError(${1:NSError}, recovered:${2:BOOL})" },{ "trigger": "Any \t UIPopoverArrowDirection", "contents": "Any" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, accessoryButtonTappedForRowWithIndexPath:${2:NSIndexPath})" },{ "trigger": "fontName \t String", "contents": "fontName" },{ "trigger": "textDocumentProxy \t UITextDocumentProxy", "contents": "textDocumentProxy" },{ "trigger": "pixelAspectRatio \t CGFloat", "contents": "pixelAspectRatio" },{ "trigger": "copyWithZone \t func UIApplicationShortcutIcon -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "lineFragmentRectForProposedRect \t func NSTextContainer -> CGRect
" , "contents": "lineFragmentRectForProposedRect(${1:CGRect}, atIndex:${2:Int}, writingDirection:${3:NSWritingDirection}, remainingRect:${4:UnsafeMutablePointer<CGRect>})" },{ "trigger": "tableView \t func unknown -> NSIndexPath?
" , "contents": "tableView(${1:UITableView}, willSelectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "positionWithinRange \t func unknown -> UITextPosition?
" , "contents": "positionWithinRange(${1:UITextRange}, farthestInDirection:${2:UITextLayoutDirection})" },{ "trigger": "state \t UIControlState", "contents": "state" },{ "trigger": "prepareWithActivityItems \t func UIActivity -> void" , "contents": "prepareWithActivityItems(${1:[AnyObject]})" },{ "trigger": "backgroundImageForToolbarPosition \t func UIToolbar -> UIImage?
" , "contents": "backgroundImageForToolbarPosition(${1:UIBarPosition}, barMetrics:${2:UIBarMetrics})" },{ "trigger": "ensureAttributesAreFixedInRange \t func NSTextStorage -> void" , "contents": "ensureAttributesAreFixedInRange(${1:NSRange})" },{ "trigger": "presentationTransitionDidEnd \t func UIPresentationController -> void" , "contents": "presentationTransitionDidEnd(${1:BOOL})" },{ "trigger": "scrollViewShouldScrollToTop \t func UITableViewController -> BOOL
" , "contents": "scrollViewShouldScrollToTop(${1:UIScrollView})" },{ "trigger": "UIColor.colorWithPatternImage \t class UIColor -> UIColor
" , "contents": "UIColor.colorWithPatternImage(${1:UIImage})" },{ "trigger": "enableEditing \t func UIDocument -> void" , "contents": "enableEditing(${1:})" },{ "trigger": "primaryPresentedItemURL \t NSURL", "contents": "primaryPresentedItemURL" },{ "trigger": "tabBar \t func UITabBarController -> void" , "contents": "tabBar(${1:UITabBar}, didBeginCustomizingItems:${2:[UITabBarItem]})" },{ "trigger": "UIAccessibilityIsReduceMotionEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsReduceMotionEnabled(${1:})" },{ "trigger": "collisionBoundsType \t UIDynamicItemCollisionBoundsType", "contents": "collisionBoundsType" },{ "trigger": "endFloatingCursor \t func UITextView -> void" , "contents": "endFloatingCursor(${1:})" },{ "trigger": "value \t Double", "contents": "value" },{ "trigger": "setBackgroundImage \t func UIToolbar -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forToolbarPosition:${2:UIBarPosition}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "delegate \t UIAdaptivePresentationControllerDelegate", "contents": "delegate" },{ "trigger": "tabBarController \t func unknown -> void" , "contents": "tabBarController(${1:UITabBarController}, willEndCustomizingViewControllers:${2:[UIViewController]}, changed:${3:BOOL})" },{ "trigger": "NSFontAttributeName \t String", "contents": "NSFontAttributeName" },{ "trigger": "UIStatusBarStyle \t UIStatusBarStyle", "contents": "UIStatusBarStyle" },{ "trigger": "tableView \t func UITableViewController -> String?
" , "contents": "tableView(${1:UITableView}, titleForHeaderInSection:${2:Int})" },{ "trigger": "willMoveToSuperview \t func UIView -> void" , "contents": "willMoveToSuperview(${1:UIView?})" },{ "trigger": "shouldAutorotateToInterfaceOrientation \t func UIViewController -> BOOL
" , "contents": "shouldAutorotateToInterfaceOrientation(${1:UIInterfaceOrientation})" },{ "trigger": "empty \t BOOL", "contents": "empty" },{ "trigger": "characterRangeForGlyphRange \t func NSLayoutManager -> NSRange
" , "contents": "characterRangeForGlyphRange(${1:NSRange}, actualGlyphRange:${2:NSRangePointer})" },{ "trigger": "UIEdgeInsetsMake \t func UIEvent -> UIEdgeInsets
" , "contents": "UIEdgeInsetsMake(${1:CGFloat}, _:${2:CGFloat}, _:${3:CGFloat}, _:${4:CGFloat})" },{ "trigger": "convertRect \t func UIWindow -> CGRect
" , "contents": "convertRect(${1:CGRect}, toWindow:${2:UIWindow?})" },{ "trigger": "LastBaseline \t NSLayoutAttribute", "contents": "LastBaseline" },{ "trigger": "deleteRowsAtIndexPaths \t func UITableView -> void" , "contents": "deleteRowsAtIndexPaths(${1:[NSIndexPath]}, withRowAnimation:${2:UITableViewRowAnimation})" },{ "trigger": "rootViewController \t UIViewController", "contents": "rootViewController" },{ "trigger": "majorRadius \t CGFloat", "contents": "majorRadius" },{ "trigger": "UIScrollViewKeyboardDismissMode \t UIScrollViewKeyboardDismissMode", "contents": "UIScrollViewKeyboardDismissMode" },{ "trigger": "dynamicAnimatorWillResume \t func unknown -> void" , "contents": "dynamicAnimatorWillResume(${1:UIDynamicAnimator})" },{ "trigger": "sendSubviewToBack \t func UIView -> void" , "contents": "sendSubviewToBack(${1:UIView})" },{ "trigger": "scrollViewWillEndDragging \t func UIWebView -> void" , "contents": "scrollViewWillEndDragging(${1:UIScrollView}, withVelocity:${2:CGPoint}, targetContentOffset:${3:UnsafeMutablePointer<CGPoint>})" },{ "trigger": "collectionView \t func unknown -> UICollectionViewCell
" , "contents": "collectionView(${1:UICollectionView}, cellForItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "viewDidUnload \t func UIViewController -> void" , "contents": "viewDidUnload(${1:})" },{ "trigger": "imageInsets \t UIEdgeInsets", "contents": "imageInsets" },{ "trigger": "CGAffineTransformValue \t func NSValue -> CGAffineTransform
" , "contents": "CGAffineTransformValue(${1:})" },{ "trigger": "UIVibrancyEffect.effectForBlurEffect \t class UIVibrancyEffect -> UIVibrancyEffect
" , "contents": "UIVibrancyEffect.effectForBlurEffect(${1:UIBlurEffect})" },{ "trigger": "PortraitUpsideDown \t UIInterfaceOrientationMask", "contents": "PortraitUpsideDown" },{ "trigger": "convertRect \t func unknown -> CGRect
" , "contents": "convertRect(${1:CGRect}, toCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "UIView.performSystemAnimation \t class UIView -> Void?," , "contents": "UIView.performSystemAnimation(${1:UISystemAnimation}, onViews:${2:[UIView]}, options:${3:UIViewAnimationOptions}, animations:${4: -> Void?}, completion:${5:BOOL -> Void?})" },{ "trigger": "interactiveMovementTarget \t CGPoint", "contents": "interactiveMovementTarget" },{ "trigger": "UIApplicationOpenSettingsURLString \t String", "contents": "UIApplicationOpenSettingsURLString" },{ "trigger": "UIVideoEditorController \t UIVideoEditorController", "contents": "UIVideoEditorController" },{ "trigger": "resignFirstResponder \t func UIResponder -> BOOL
" , "contents": "resignFirstResponder(${1:})" },{ "trigger": "UIBlurEffect \t UIBlurEffect", "contents": "UIBlurEffect" },{ "trigger": "data \t NSData", "contents": "data" },{ "trigger": "doubleSided \t BOOL", "contents": "doubleSided" },{ "trigger": "removeBoundaryWithIdentifier \t func UICollisionBehavior -> void" , "contents": "removeBoundaryWithIdentifier(${1:NSCopying})" },{ "trigger": "pressesChanged \t func UIResponder -> void" , "contents": "pressesChanged(${1:Set<UIPress>}, withEvent:${2:UIPressesEvent?})" },{ "trigger": "Bottom \t UIRectEdge", "contents": "Bottom" },{ "trigger": "setNotShownAttribute \t func NSLayoutManager -> void" , "contents": "setNotShownAttribute(${1:BOOL}, forGlyphAtIndex:${2:Int})" },{ "trigger": "addAction \t func UIAlertController -> void" , "contents": "addAction(${1:UIAlertAction})" },{ "trigger": "isEnabledForSegmentAtIndex \t func UISegmentedControl -> BOOL
" , "contents": "isEnabledForSegmentAtIndex(${1:Int})" },{ "trigger": "documentInteractionController \t func unknown -> void" , "contents": "documentInteractionController(${1:UIDocumentInteractionController}, willBeginSendingToApplication:${2:String?})" },{ "trigger": "shouldUpdateFocusInContext \t func unknown -> BOOL
" , "contents": "shouldUpdateFocusInContext(${1:UIFocusUpdateContext})" },{ "trigger": "supplementaryViewForElementKind \t func UICollectionView -> UICollectionReusableView
" , "contents": "supplementaryViewForElementKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "dataFromRange \t func NSAttributedString -> NSData
" , "contents": "dataFromRange(${1:NSRange}, documentAttributes:${2:[String })" },{ "trigger": "estimatedSectionHeaderHeight \t CGFloat", "contents": "estimatedSectionHeaderHeight" },{ "trigger": "convertRect \t func UIWindow -> CGRect
" , "contents": "convertRect(${1:CGRect}, fromWindow:${2:UIWindow?})" },{ "trigger": "registerClass \t func UICollectionView -> void" , "contents": "registerClass(${1:AnyClass?}, forCellWithReuseIdentifier:${2:String})" },{ "trigger": "valueForAnimatedKey \t func UICollectionViewTransitionLayout -> CGFloat
" , "contents": "valueForAnimatedKey(${1:String})" },{ "trigger": "setScopeBarButtonBackgroundImage \t func UISearchBar -> void" , "contents": "setScopeBarButtonBackgroundImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "UIWindowDidBecomeVisibleNotification \t String", "contents": "UIWindowDidBecomeVisibleNotification" },{ "trigger": "textInRange \t func UITextView -> String?
" , "contents": "textInRange(${1:UITextRange})" },{ "trigger": "tableView \t func UIPickerView -> String?
" , "contents": "tableView(${1:UITableView}, titleForHeaderInSection:${2:Int})" },{ "trigger": "tableView \t func unknown -> CGFloat
" , "contents": "tableView(${1:UITableView}, estimatedHeightForHeaderInSection:${2:Int})" },{ "trigger": "precisePreviousLocationInView \t func UITouch -> CGPoint
" , "contents": "precisePreviousLocationInView(${1:UIView?})" },{ "trigger": "currentPageIndicatorTintColor \t UIColor", "contents": "currentPageIndicatorTintColor" },{ "trigger": "scrollViewWillEndDragging \t func unknown -> void" , "contents": "scrollViewWillEndDragging(${1:UIScrollView}, withVelocity:${2:CGPoint}, targetContentOffset:${3:UnsafeMutablePointer<CGPoint>})" },{ "trigger": "selectAll \t func NSObject -> void" , "contents": "selectAll(${1:AnyObject?})" },{ "trigger": "isInteractive \t func unknown -> BOOL
" , "contents": "isInteractive(${1:})" },{ "trigger": "Up \t UIFocusHeading", "contents": "Up" },{ "trigger": "accessoryView \t UIView", "contents": "accessoryView" },{ "trigger": "UIView.appearanceWhenContainedInInstancesOfClasses \t class UIView -> Self
" , "contents": "UIView.appearanceWhenContainedInInstancesOfClasses(${1:[AnyObject.Type]})" },{ "trigger": "layoutMarginsDidChange \t func UIView -> void" , "contents": "layoutMarginsDidChange(${1:})" },{ "trigger": "UIKeyCommand.keyCommandWithInput \t class UIKeyCommand -> UIKeyCommand
" , "contents": "UIKeyCommand.keyCommandWithInput(${1:String}, modifierFlags:${2:UIKeyModifierFlags}, action:${3:Selector})" },{ "trigger": "presentationTransitionWillBegin \t func UIPresentationController -> void" , "contents": "presentationTransitionWillBegin(${1:})" },{ "trigger": "UIEventType \t UIEventType", "contents": "UIEventType" },{ "trigger": "updateConstraintsIfNeeded \t func UIView -> void" , "contents": "updateConstraintsIfNeeded(${1:})" },{ "trigger": "preferredContentSizeDidChangeForChildContentContainer \t func unknown -> void" , "contents": "preferredContentSizeDidChangeForChildContentContainer(${1:UIContentContainer})" },{ "trigger": "replaceRange \t func UITextField -> void" , "contents": "replaceRange(${1:UITextRange}, withText:${2:String})" },{ "trigger": "setCollectionViewLayout \t func UICollectionView -> Void?
" , "contents": "setCollectionViewLayout(${1:UICollectionViewLayout}, animated:${2:BOOL}, completion:${3:BOOL -> Void?})" },{ "trigger": "UIFontDescriptorVisibleNameAttribute \t String", "contents": "UIFontDescriptorVisibleNameAttribute" },{ "trigger": "arrowDirection \t UIPopoverArrowDirection", "contents": "arrowDirection" },{ "trigger": "item \t func UIActivityItemProvider -> AnyObject
" , "contents": "item(${1:})" },{ "trigger": "NSTextTab \t NSTextTab", "contents": "NSTextTab" },{ "trigger": "headIndent \t CGFloat", "contents": "headIndent" },{ "trigger": "accessibilityPageContent \t func unknown -> String?
" , "contents": "accessibilityPageContent(${1:})" },{ "trigger": "viewWillTransitionToSize \t func UIViewController -> void" , "contents": "viewWillTransitionToSize(${1:CGSize}, withTransitionCoordinator:${2:UIViewControllerTransitionCoordinator})" },{ "trigger": "UISegmentedControlStyle \t UISegmentedControlStyle", "contents": "UISegmentedControlStyle" },{ "trigger": "accessibilityElementsHidden \t BOOL", "contents": "accessibilityElementsHidden" },{ "trigger": "imageForSearchBarIcon \t func UISearchBar -> UIImage?
" , "contents": "imageForSearchBarIcon(${1:UISearchBarIcon}, state:${2:UIControlState})" },{ "trigger": "tableView \t func UIPickerView -> void" , "contents": "tableView(${1:UITableView}, moveRowAtIndexPath:${2:NSIndexPath}, toIndexPath:${3:NSIndexPath})" },{ "trigger": "barHideOnSwipeGestureRecognizer \t UIPanGestureRecognizer", "contents": "barHideOnSwipeGestureRecognizer" },{ "trigger": "frameOfPresentedViewInContainerView \t func UIPresentationController -> CGRect
" , "contents": "frameOfPresentedViewInContainerView(${1:})" },{ "trigger": "RoundedRect \t UIButtonType", "contents": "RoundedRect" },{ "trigger": "scrollViewWillBeginZooming \t func UIWebView -> void" , "contents": "scrollViewWillBeginZooming(${1:UIScrollView}, withView:${2:UIView?})" },{ "trigger": "UIColor.blackColor \t class UIColor -> UIColor
" , "contents": "UIColor.blackColor(${1:})" },{ "trigger": "NSParagraphStyleAttributeName \t String", "contents": "NSParagraphStyleAttributeName" },{ "trigger": "target \t AnyObject", "contents": "target" },{ "trigger": "documentText \t String", "contents": "documentText" },{ "trigger": "UIFieldBehavior.magneticField \t class UIFieldBehavior -> Self
" , "contents": "UIFieldBehavior.magneticField(${1:})" },{ "trigger": "copyWithZone \t func UILexicon -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "UIColor.colorWithCGColor \t class UIColor -> UIColor
" , "contents": "UIColor.colorWithCGColor(${1:CGColor})" },{ "trigger": "UIAlertAction \t UIAlertAction", "contents": "UIAlertAction" },{ "trigger": "NSExpansionAttributeName \t String", "contents": "NSExpansionAttributeName" },{ "trigger": "linearVelocityForItem \t func UIDynamicItemBehavior -> CGPoint
" , "contents": "linearVelocityForItem(${1:UIDynamicItem})" },{ "trigger": "printPageRenderer \t UIPrintPageRenderer", "contents": "printPageRenderer" },{ "trigger": "tintAdjustmentMode \t UIViewTintAdjustmentMode", "contents": "tintAdjustmentMode" },{ "trigger": "addQuadCurveToPoint \t func UIBezierPath -> void" , "contents": "addQuadCurveToPoint(${1:CGPoint}, controlPoint:${2:CGPoint})" },{ "trigger": "textContainerInset \t UIEdgeInsets", "contents": "textContainerInset" },{ "trigger": "UIAccessibilityPauseAssistiveTechnologyNotification \t UIAccessibilityNotifications", "contents": "UIAccessibilityPauseAssistiveTechnologyNotification" },{ "trigger": "collectionViewContentSize \t func UICollectionViewLayout -> CGSize
" , "contents": "collectionViewContentSize(${1:})" },{ "trigger": "dequeueReusableCellWithIdentifier \t func UITableView -> UITableViewCell
" , "contents": "dequeueReusableCellWithIdentifier(${1:String}, forIndexPath:${2:NSIndexPath})" },{ "trigger": "scrollViewDidEndZooming \t func UITableViewController -> void" , "contents": "scrollViewDidEndZooming(${1:UIScrollView}, withView:${2:UIView?}, atScale:${3:CGFloat})" },{ "trigger": "phase \t UITouchPhase", "contents": "phase" },{ "trigger": "spellCheckingType \t UITextSpellCheckingType", "contents": "spellCheckingType" },{ "trigger": "maximumContentWidth \t CGFloat", "contents": "maximumContentWidth" },{ "trigger": "placeholder \t String", "contents": "placeholder" },{ "trigger": "indexPathForPreferredFocusedViewInTableView \t func unknown -> NSIndexPath?
" , "contents": "indexPathForPreferredFocusedViewInTableView(${1:UITableView})" },{ "trigger": "applicationFinishedRestoringState \t func UIViewController -> void" , "contents": "applicationFinishedRestoringState(${1:})" },{ "trigger": "UIFontDescriptorFeatureSettingsAttribute \t String", "contents": "UIFontDescriptorFeatureSettingsAttribute" },{ "trigger": "NSStrokeColorAttributeName \t String", "contents": "NSStrokeColorAttributeName" },{ "trigger": "NSObject.accessibilityElementCount \t class NSObject -> Int
" , "contents": "NSObject.accessibilityElementCount(${1:})" },{ "trigger": "rectForSection \t func UITableView -> CGRect
" , "contents": "rectForSection(${1:Int})" },{ "trigger": "UIActivityViewController \t UIActivityViewController", "contents": "UIActivityViewController" },{ "trigger": "modalViewController \t UIViewController", "contents": "modalViewController" },{ "trigger": "didMoveToWindow \t func UIView -> void" , "contents": "didMoveToWindow(${1:})" },{ "trigger": "UIApplicationDidFinishLaunchingNotification \t String", "contents": "UIApplicationDidFinishLaunchingNotification" },{ "trigger": "UIDataDetectorTypes \t UIDataDetectorTypes", "contents": "UIDataDetectorTypes" },{ "trigger": "initialLayoutAttributesForAppearingSupplementaryElementOfKind \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "initialLayoutAttributesForAppearingSupplementaryElementOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "fileModificationDate \t NSDate", "contents": "fileModificationDate" },{ "trigger": "UIFieldBehavior \t UIFieldBehavior", "contents": "UIFieldBehavior" },{ "trigger": "sectionIndexBackgroundColor \t UIColor", "contents": "sectionIndexBackgroundColor" },{ "trigger": "UIScreenOverscanCompensation \t UIScreenOverscanCompensation", "contents": "UIScreenOverscanCompensation" },{ "trigger": "SavingError \t UIDocumentState", "contents": "SavingError" },{ "trigger": "selectedTextColor \t UIColor", "contents": "selectedTextColor" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, didUnhighlightItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "numberOfPages \t Int", "contents": "numberOfPages" },{ "trigger": "maximumTrackImageForState \t func UISlider -> UIImage?
" , "contents": "maximumTrackImageForState(${1:UIControlState})" },{ "trigger": "cut \t func NSObject -> void" , "contents": "cut(${1:AnyObject?})" },{ "trigger": "UIViewController.attemptRotationToDeviceOrientation \t class UIViewController -> void" , "contents": "UIViewController.attemptRotationToDeviceOrientation(${1:})" },{ "trigger": "collectionView \t func unknown -> CGSize
" , "contents": "collectionView(${1:UICollectionView}, layout:${2:UICollectionViewLayout}, referenceSizeForFooterInSection:${3:Int})" },{ "trigger": "NSObliquenessAttributeName \t String", "contents": "NSObliquenessAttributeName" },{ "trigger": "NSTextLayoutSectionRange \t String", "contents": "NSTextLayoutSectionRange" },{ "trigger": "dismissalTransitionWillBegin \t func UIPresentationController -> void" , "contents": "dismissalTransitionWillBegin(${1:})" },{ "trigger": "searchBarTextDidEndEditing \t func unknown -> void" , "contents": "searchBarTextDidEndEditing(${1:UISearchBar})" },{ "trigger": "scrollViewWillBeginDragging \t func unknown -> void" , "contents": "scrollViewWillBeginDragging(${1:UIScrollView})" },{ "trigger": "UIAccessibilityAssistiveTechnologyKey \t String", "contents": "UIAccessibilityAssistiveTechnologyKey" },{ "trigger": "glyphRangeForCharacterRange \t func NSLayoutManager -> NSRange
" , "contents": "glyphRangeForCharacterRange(${1:NSRange}, actualCharacterRange:${2:NSRangePointer})" },{ "trigger": "AlignAllLastBaseline \t NSLayoutFormatOptions", "contents": "AlignAllLastBaseline" },{ "trigger": "maximumRelativeValue \t AnyObject", "contents": "maximumRelativeValue" },{ "trigger": "UITableView \t UITableView", "contents": "UITableView" },{ "trigger": "containsTraitsInCollection \t func UITraitCollection -> BOOL
" , "contents": "containsTraitsInCollection(${1:UITraitCollection?})" },{ "trigger": "documentPickerMode \t UIDocumentPickerMode", "contents": "documentPickerMode" },{ "trigger": "snapPoint \t CGPoint", "contents": "snapPoint" },{ "trigger": "UIPrintingNotAvailableError \t Int", "contents": "UIPrintingNotAvailableError" },{ "trigger": "accessibilityElementDidLoseFocus \t func NSObject -> void" , "contents": "accessibilityElementDidLoseFocus(${1:})" },{ "trigger": "refreshing \t BOOL", "contents": "refreshing" },{ "trigger": "NSObject.accessibilityCustomActions \t class NSObject -> [UIAccessibilityCustomAction]?
" , "contents": "NSObject.accessibilityCustomActions(${1:})" },{ "trigger": "NSStringFromUIEdgeInsets \t func NSTextAlignment -> String
" , "contents": "NSStringFromUIEdgeInsets(${1:UIEdgeInsets})" },{ "trigger": "allowsNonContiguousLayout \t BOOL", "contents": "allowsNonContiguousLayout" },{ "trigger": "preferredStyle \t UIAlertControllerStyle", "contents": "preferredStyle" },{ "trigger": "translatesAutoresizingMaskIntoConstraints \t BOOL", "contents": "translatesAutoresizingMaskIntoConstraints" },{ "trigger": "indexPathsToInsertForSupplementaryViewOfKind \t func UICollectionViewLayout -> [NSIndexPath]
" , "contents": "indexPathsToInsertForSupplementaryViewOfKind(${1:String})" },{ "trigger": "finalizeAnimatedBoundsChange \t func UICollectionViewLayout -> void" , "contents": "finalizeAnimatedBoundsChange(${1:})" },{ "trigger": "NSParagraphStyle \t NSParagraphStyle", "contents": "NSParagraphStyle" },{ "trigger": "writingDirection \t UITextWritingDirection", "contents": "writingDirection" },{ "trigger": "UIImagePickerControllerCropRect \t String", "contents": "UIImagePickerControllerCropRect" },{ "trigger": "convertPoint \t func UIWindow -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, fromWindow:${2:UIWindow?})" },{ "trigger": "pushNavigationItem \t func UINavigationBar -> void" , "contents": "pushNavigationItem(${1:UINavigationItem}, animated:${2:BOOL})" },{ "trigger": "minimumValue \t Float", "contents": "minimumValue" },{ "trigger": "batteryLevel \t Float", "contents": "batteryLevel" },{ "trigger": "tableView \t func UIPickerView -> BOOL
" , "contents": "tableView(${1:UITableView}, canEditRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "allTouches \t func UIEvent -> Set UITouch ?
" , "contents": "allTouches(${1:})" },{ "trigger": "removeConstraints \t func UIView -> void" , "contents": "removeConstraints(${1:[NSLayoutConstraint]})" },{ "trigger": "viewWillLayoutSubviews \t func UIViewController -> void" , "contents": "viewWillLayoutSubviews(${1:})" },{ "trigger": "NSObject.accessibilityTraits \t class NSObject -> UIAccessibilityTraits
" , "contents": "NSObject.accessibilityTraits(${1:})" },{ "trigger": "constant \t CGFloat", "contents": "constant" },{ "trigger": "UIAlertView \t UIAlertView", "contents": "UIAlertView" },{ "trigger": "UIApplicationMain \t func UIApplicationShortcutIcon -> Int32
" , "contents": "UIApplicationMain(${1:Int32}, _:${2:UnsafeMutablePointer<UnsafeMutablePointer<Int8>>}, _:${3:String?}, _:${4:String?})" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, handleActionWithIdentifier:${2:String?}, forRemoteNotification:${3:[NSObject }, withResponseInfo:${4:[NSObject }, completionHandler:${5: -> Void})" },{ "trigger": "observedProgress \t NSProgress", "contents": "observedProgress" },{ "trigger": "editedRange \t NSRange", "contents": "editedRange" },{ "trigger": "delegate \t UICollectionViewDelegate", "contents": "delegate" },{ "trigger": "UIPushBehaviorMode \t UIPushBehaviorMode", "contents": "UIPushBehaviorMode" },{ "trigger": "UIApplicationStateRestorationUserInterfaceIdiomKey \t String", "contents": "UIApplicationStateRestorationUserInterfaceIdiomKey" },{ "trigger": "dictionaryRepresentation \t func UIPrintInfo -> [NSObject" , "contents": "dictionaryRepresentation(${1:})" },{ "trigger": "isPosition \t func UITextInputStringTokenizer -> BOOL
" , "contents": "isPosition(${1:UITextPosition}, withinTextUnit:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "drawAtPoint \t func NSString -> CGSize
" , "contents": "drawAtPoint(${1:CGPoint}, forWidth:${2:CGFloat}, withFont:${3:UIFont!}, lineBreakMode:${4:NSLineBreakMode})" },{ "trigger": "UISearchContainerViewController \t UISearchContainerViewController", "contents": "UISearchContainerViewController" },{ "trigger": "configurePersistentStoreCoordinatorForURL \t func UIManagedDocument -> void" , "contents": "configurePersistentStoreCoordinatorForURL(${1:NSURL}, ofType:${2:String}, modelConfiguration:${3:String?}, storeOptions:${4:[NSObject })" },{ "trigger": "selectedImage \t UIImage", "contents": "selectedImage" },{ "trigger": "NSObject.setAccessibilityValue \t class NSObject -> void" , "contents": "NSObject.setAccessibilityValue(${1:String?})" },{ "trigger": "UIColor.viewFlipsideBackgroundColor \t class UIColor -> UIColor
" , "contents": "UIColor.viewFlipsideBackgroundColor(${1:})" },{ "trigger": "requestSupplementaryLexiconWithCompletion \t func UIInputViewController -> Void
" , "contents": "requestSupplementaryLexiconWithCompletion(${1:UILexicon -> Void})" },{ "trigger": "keyboardType \t UIKeyboardType", "contents": "keyboardType" },{ "trigger": "Badge \t UIRemoteNotificationType", "contents": "Badge" },{ "trigger": "TraitUIOptimized \t UIFontDescriptorSymbolicTraits", "contents": "TraitUIOptimized" },{ "trigger": "UIFont.systemFontOfSize \t class UIFont -> UIFont
" , "contents": "UIFont.systemFontOfSize(${1:CGFloat}, weight:${2:CGFloat})" },{ "trigger": "UIActivity \t UIActivity", "contents": "UIActivity" },{ "trigger": "dataSource \t UIPageViewControllerDataSource", "contents": "dataSource" },{ "trigger": "startVideoCapture \t func UIImagePickerController -> BOOL
" , "contents": "startVideoCapture(${1:})" },{ "trigger": "addTabStop \t func NSMutableParagraphStyle -> void" , "contents": "addTabStop(${1:NSTextTab})" },{ "trigger": "sendActionsForControlEvents \t func UIControl -> void" , "contents": "sendActionsForControlEvents(${1:UIControlEvents})" },{ "trigger": "UIFontDescriptorTraitsAttribute \t String", "contents": "UIFontDescriptorTraitsAttribute" },{ "trigger": "setScopeBarButtonDividerImage \t func UISearchBar -> void" , "contents": "setScopeBarButtonDividerImage(${1:UIImage?}, forLeftSegmentState:${2:UIControlState}, rightSegmentState:${3:UIControlState})" },{ "trigger": "All \t UIDataDetectorTypes", "contents": "All" },{ "trigger": "progress \t NSProgress", "contents": "progress" },{ "trigger": "TopLeft \t UIRectCorner", "contents": "TopLeft" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, willBeginEditingRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIView.setAnimationWillStartSelector \t class UIView -> void" , "contents": "UIView.setAnimationWillStartSelector(${1:Selector})" },{ "trigger": "preferredMode \t UIScreenMode", "contents": "preferredMode" },{ "trigger": "titlePositionAdjustmentForBarMetrics \t func UIBarButtonItem -> UIOffset
" , "contents": "titlePositionAdjustmentForBarMetrics(${1:UIBarMetrics})" },{ "trigger": "hasAmbiguousLayout \t func UIView -> BOOL
" , "contents": "hasAmbiguousLayout(${1:})" },{ "trigger": "delegate \t UIToolbarDelegate", "contents": "delegate" },{ "trigger": "updateInterval \t NSTimeInterval", "contents": "updateInterval" },{ "trigger": "allowsSelectionDuringEditing \t BOOL", "contents": "allowsSelectionDuringEditing" },{ "trigger": "textContainerChangedGeometry \t func NSLayoutManager -> void" , "contents": "textContainerChangedGeometry(${1:NSTextContainer})" },{ "trigger": "printInteractionControllerDidPresentPrinterOptions \t func unknown -> void" , "contents": "printInteractionControllerDidPresentPrinterOptions(${1:UIPrintInteractionController})" },{ "trigger": "showsPageRange \t BOOL", "contents": "showsPageRange" },{ "trigger": "mode \t UIPushBehaviorMode", "contents": "mode" },{ "trigger": "increaseSize \t func NSObject -> void" , "contents": "increaseSize(${1:AnyObject?})" },{ "trigger": "UIActivityTypeMessage \t String", "contents": "UIActivityTypeMessage" },{ "trigger": "secondAttribute \t NSLayoutAttribute", "contents": "secondAttribute" },{ "trigger": "reloadSections \t func UITableView -> void" , "contents": "reloadSections(${1:NSIndexSet}, withRowAnimation:${2:UITableViewRowAnimation})" },{ "trigger": "UITraitCollection.traitCollectionWithTraitsFromCollections \t class UITraitCollection -> UITraitCollection
" , "contents": "UITraitCollection.traitCollectionWithTraitsFromCollections(${1:[UITraitCollection]})" },{ "trigger": "hidesBarsOnTap \t BOOL", "contents": "hidesBarsOnTap" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, didFinishLaunchingWithOptions:${2:[NSObject })" },{ "trigger": "Force \t UITouchProperties", "contents": "Force" },{ "trigger": "allowsHidingShortcuts \t BOOL", "contents": "allowsHidingShortcuts" },{ "trigger": "UIFontWeightTrait \t String", "contents": "UIFontWeightTrait" },{ "trigger": "collisionBehavior \t func unknown -> void" , "contents": "collisionBehavior(${1:UICollisionBehavior}, beganContactForItem:${2:UIDynamicItem}, withItem:${3:UIDynamicItem}, atPoint:${4:CGPoint})" },{ "trigger": "setStatusBarHidden \t func UIApplication -> void" , "contents": "setStatusBarHidden(${1:BOOL}, withAnimation:${2:UIStatusBarAnimation})" },{ "trigger": "Bottom \t UIStackViewAlignment", "contents": "Bottom" },{ "trigger": "endOfDocument \t UITextPosition", "contents": "endOfDocument" },{ "trigger": "removeItem \t func UIFieldBehavior -> void" , "contents": "removeItem(${1:UIDynamicItem})" },{ "trigger": "delegate \t UIGestureRecognizerDelegate", "contents": "delegate" },{ "trigger": "tailIndent \t CGFloat", "contents": "tailIndent" },{ "trigger": "encodeWithCoder \t func UIImage -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "UIFontTextStyleSubheadline \t String", "contents": "UIFontTextStyleSubheadline" },{ "trigger": "printInteractionControllerWillDismissPrinterOptions \t func unknown -> void" , "contents": "printInteractionControllerWillDismissPrinterOptions(${1:UIPrintInteractionController})" },{ "trigger": "UIFieldBehavior.velocityFieldWithVector \t class UIFieldBehavior -> Self
" , "contents": "UIFieldBehavior.velocityFieldWithVector(${1:CGVector})" },{ "trigger": "navigationController \t func unknown -> void" , "contents": "navigationController(${1:UINavigationController}, didShowViewController:${2:UIViewController}, animated:${3:BOOL})" },{ "trigger": "numberOfSectionsInTableView \t func UIPickerView -> Int
" , "contents": "numberOfSectionsInTableView(${1:UITableView})" },{ "trigger": "searchDisplayControllerDidEndSearch \t func unknown -> void" , "contents": "searchDisplayControllerDidEndSearch(${1:UISearchDisplayController})" },{ "trigger": "NSObject.setAccessibilityViewIsModal \t class NSObject -> void" , "contents": "NSObject.setAccessibilityViewIsModal(${1:BOOL})" },{ "trigger": "BottomLeft \t UIRectCorner", "contents": "BottomLeft" },{ "trigger": "topLayoutGuide \t UILayoutSupport", "contents": "topLayoutGuide" },{ "trigger": "cameraCaptureMode \t UIImagePickerControllerCameraCaptureMode", "contents": "cameraCaptureMode" },{ "trigger": "UIToolbar \t UIToolbar", "contents": "UIToolbar" },{ "trigger": "tableView \t func unknown -> Int
" , "contents": "tableView(${1:UITableView}, indentationLevelForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, willDisplayCell:${2:UITableViewCell}, forRowAtIndexPath:${3:NSIndexPath})" },{ "trigger": "selectionRectsForRange \t func UITextField -> [AnyObject]
" , "contents": "selectionRectsForRange(${1:UITextRange})" },{ "trigger": "UIKeyboardFrameEndUserInfoKey \t String", "contents": "UIKeyboardFrameEndUserInfoKey" },{ "trigger": "animationEnded \t func UISearchController -> void" , "contents": "animationEnded(${1:BOOL})" },{ "trigger": "allowsSelection \t BOOL", "contents": "allowsSelection" },{ "trigger": "UIOffset \t UIOffset", "contents": "UIOffset" },{ "trigger": "unknown.appearanceForTraitCollection \t static unknown -> Self
" , "contents": "unknown.appearanceForTraitCollection(${1:UITraitCollection})" },{ "trigger": "editedMask \t NSTextStorageEditActions", "contents": "editedMask" },{ "trigger": "Alphabet \t UIKeyboardType", "contents": "Alphabet" },{ "trigger": "delete \t func NSObject -> void" , "contents": "delete(${1:AnyObject?})" },{ "trigger": "UIPrintInteractionController \t UIPrintInteractionController", "contents": "UIPrintInteractionController" },{ "trigger": "showViewController \t func UISplitViewController -> void" , "contents": "showViewController(${1:UIViewController}, sender:${2:AnyObject?})" },{ "trigger": "selectRow \t func UIPickerView -> void" , "contents": "selectRow(${1:Int}, inComponent:${2:Int}, animated:${3:BOOL})" },{ "trigger": "initialLayoutAttributesForAppearingDecorationElementOfKind \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "initialLayoutAttributesForAppearingDecorationElementOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "UIAccessibilityIsReduceTransparencyEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsReduceTransparencyEnabled(${1:})" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, willDisplaySupplementaryView:${2:UICollectionReusableView}, forElementKind:${3:String}, atIndexPath:${4:NSIndexPath})" },{ "trigger": "setActive \t func UISearchDisplayController -> void" , "contents": "setActive(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "unmarkText \t func UITextField -> void" , "contents": "unmarkText(${1:})" },{ "trigger": "AllowUserInteraction \t UIViewAnimationOptions", "contents": "AllowUserInteraction" },{ "trigger": "identifierForVendor \t NSUUID", "contents": "identifierForVendor" },{ "trigger": "UIActivity.activityCategory \t class UIActivity -> UIActivityCategory
" , "contents": "UIActivity.activityCategory(${1:})" },{ "trigger": "UIView.setAnimationRepeatAutoreverses \t class UIView -> void" , "contents": "UIView.setAnimationRepeatAutoreverses(${1:BOOL})" },{ "trigger": "UITransitionContextFromViewKey \t String", "contents": "UITransitionContextFromViewKey" },{ "trigger": "Normal \t UIDocumentState", "contents": "Normal" },{ "trigger": "navigationBar \t func unknown -> BOOL
" , "contents": "navigationBar(${1:UINavigationBar}, shouldPushItem:${2:UINavigationItem})" },{ "trigger": "registerClass \t func UICollectionView -> void" , "contents": "registerClass(${1:AnyClass?}, forSupplementaryViewOfKind:${2:String}, withReuseIdentifier:${3:String})" },{ "trigger": "UIPanGestureRecognizer \t UIPanGestureRecognizer", "contents": "UIPanGestureRecognizer" },{ "trigger": "fontDescriptorWithFace \t func UIFontDescriptor -> UIFontDescriptor
" , "contents": "fontDescriptorWithFace(${1:String})" },{ "trigger": "updateValue \t func UICollectionViewTransitionLayout -> void" , "contents": "updateValue(${1:CGFloat}, forAnimatedKey:${2:String})" },{ "trigger": "minimumRelativeValue \t AnyObject", "contents": "minimumRelativeValue" },{ "trigger": "activityViewControllerPlaceholderItem \t func unknown -> AnyObject
" , "contents": "activityViewControllerPlaceholderItem(${1:UIActivityViewController})" },{ "trigger": "UIFont.fontWithName \t class UIFont -> UIFont?
" , "contents": "UIFont.fontWithName(${1:String}, size:${2:CGFloat})" },{ "trigger": "setImage \t func UISearchBar -> void" , "contents": "setImage(${1:UIImage?}, forSearchBarIcon:${2:UISearchBarIcon}, state:${3:UIControlState})" },{ "trigger": "tabBarController \t func unknown -> void" , "contents": "tabBarController(${1:UITabBarController}, didEndCustomizingViewControllers:${2:[UIViewController]}, changed:${3:BOOL})" },{ "trigger": "firstRectForRange \t func UITextView -> CGRect
" , "contents": "firstRectForRange(${1:UITextRange})" },{ "trigger": "Unknown \t UIPopoverArrowDirection", "contents": "Unknown" },{ "trigger": "UIColor.darkGrayColor \t class UIColor -> UIColor
" , "contents": "UIColor.darkGrayColor(${1:})" },{ "trigger": "UILocalizedIndexedCollation \t UILocalizedIndexedCollation", "contents": "UILocalizedIndexedCollation" },{ "trigger": "AllEvents \t UIControlEvents", "contents": "AllEvents" },{ "trigger": "convertRect \t func unknown -> CGRect
" , "contents": "convertRect(${1:CGRect}, fromCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "gestureRecognizer \t func UITableViewCell -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldReceiveTouch:${2:UITouch})" },{ "trigger": "NSStringDrawingContext \t NSStringDrawingContext", "contents": "NSStringDrawingContext" },{ "trigger": "notifyWhenInteractionEndsUsingBlock \t func unknown -> Void
" , "contents": "notifyWhenInteractionEndsUsingBlock(${1:UIViewControllerTransitionCoordinatorContext -> Void})" },{ "trigger": "webView \t func unknown -> void" , "contents": "webView(${1:UIWebView}, didFailLoadWithError:${2:NSError?})" },{ "trigger": "caretRectForPosition \t func UITextField -> CGRect
" , "contents": "caretRectForPosition(${1:UITextPosition})" },{ "trigger": "UIColor.lightTextColor \t class UIColor -> UIColor
" , "contents": "UIColor.lightTextColor(${1:})" },{ "trigger": "encodeWithCoder \t func UILayoutGuide -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "makeKeyAndVisible \t func UIWindow -> void" , "contents": "makeKeyAndVisible(${1:})" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, willDisplayCell:${2:UICollectionViewCell}, forItemAtIndexPath:${3:NSIndexPath})" },{ "trigger": "accessoryAction \t Selector", "contents": "accessoryAction" },{ "trigger": "tableView \t func unknown -> UIView?
" , "contents": "tableView(${1:UITableView}, viewForHeaderInSection:${2:Int})" },{ "trigger": "size \t func NSAttributedString -> CGSize
" , "contents": "size(${1:})" },{ "trigger": "drawContentForPageAtIndex \t func UIPrintPageRenderer -> void" , "contents": "drawContentForPageAtIndex(${1:Int}, inRect:${2:CGRect})" },{ "trigger": "UIAccessibilityTraitNotEnabled \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitNotEnabled" },{ "trigger": "Previous \t UIFocusHeading", "contents": "Previous" },{ "trigger": "UITouch \t UITouch", "contents": "UITouch" },{ "trigger": "UIPasteboardTypeListColor \t NSArray", "contents": "UIPasteboardTypeListColor" },{ "trigger": "fractionOfDistanceThroughGlyphForPoint \t func NSLayoutManager -> CGFloat
" , "contents": "fractionOfDistanceThroughGlyphForPoint(${1:CGPoint}, inTextContainer:${2:NSTextContainer})" },{ "trigger": "setContentPositionAdjustment \t func UISegmentedControl -> void" , "contents": "setContentPositionAdjustment(${1:UIOffset}, forSegmentType:${2:UISegmentedControlSegment}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "UITableViewRowActionStyle \t UITableViewRowActionStyle", "contents": "UITableViewRowActionStyle" },{ "trigger": "setItems \t func UINavigationBar -> void" , "contents": "setItems(${1:[UINavigationItem]?}, animated:${2:BOOL})" },{ "trigger": "isValidGlyphIndex \t func NSLayoutManager -> BOOL
" , "contents": "isValidGlyphIndex(${1:Int})" },{ "trigger": "documentMenuWasCancelled \t func unknown -> void" , "contents": "documentMenuWasCancelled(${1:UIDocumentMenuViewController})" },{ "trigger": "positionFromPosition \t func unknown -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, toBoundary:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "collectionView \t func UICollectionViewController -> UICollectionViewCell
" , "contents": "collectionView(${1:UICollectionView}, cellForItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "searchFieldBackgroundImageForState \t func UISearchBar -> UIImage?
" , "contents": "searchFieldBackgroundImageForState(${1:UIControlState})" },{ "trigger": "backButtonTitlePositionAdjustmentForBarMetrics \t func UIBarButtonItem -> UIOffset
" , "contents": "backButtonTitlePositionAdjustmentForBarMetrics(${1:UIBarMetrics})" },{ "trigger": "UIPopoverBackgroundView.contentViewInsets \t class UIPopoverBackgroundView -> UIEdgeInsets
" , "contents": "UIPopoverBackgroundView.contentViewInsets(${1:})" },{ "trigger": "playInputClick \t func UIDevice -> void" , "contents": "playInputClick(${1:})" },{ "trigger": "unknown.objectWithRestorationIdentifierPath \t static unknown -> UIStateRestoring?
" , "contents": "unknown.objectWithRestorationIdentifierPath(${1:[String]}, coder:${2:NSCoder})" },{ "trigger": "NSLinkAttributeName \t String", "contents": "NSLinkAttributeName" },{ "trigger": "frame \t CGRect", "contents": "frame" },{ "trigger": "resizableSnapshotViewFromRect \t func UIView -> UIView
" , "contents": "resizableSnapshotViewFromRect(${1:CGRect}, afterScreenUpdates:${2:BOOL}, withCapInsets:${3:UIEdgeInsets})" },{ "trigger": "removeAllBoundaries \t func UICollisionBehavior -> void" , "contents": "removeAllBoundaries(${1:})" },{ "trigger": "attributedText \t NSAttributedString", "contents": "attributedText" },{ "trigger": "popoverLayoutMargins \t UIEdgeInsets", "contents": "popoverLayoutMargins" },{ "trigger": "UISearchDisplayController \t UISearchDisplayController", "contents": "UISearchDisplayController" },{ "trigger": "Focused \t UIControlState", "contents": "Focused" },{ "trigger": "nibBundle \t NSBundle", "contents": "nibBundle" },{ "trigger": "rightViewMode \t UITextFieldViewMode", "contents": "rightViewMode" },{ "trigger": "willAnimateSecondHalfOfRotationFromInterfaceOrientation \t func UIViewController -> void" , "contents": "willAnimateSecondHalfOfRotationFromInterfaceOrientation(${1:UIInterfaceOrientation}, duration:${2:NSTimeInterval})" },{ "trigger": "transform \t CGAffineTransform", "contents": "transform" },{ "trigger": "contentOffsetForSegmentAtIndex \t func UISegmentedControl -> CGSize
" , "contents": "contentOffsetForSegmentAtIndex(${1:Int})" },{ "trigger": "prepareForCollectionViewUpdates \t func UICollectionViewLayout -> void" , "contents": "prepareForCollectionViewUpdates(${1:[UICollectionViewUpdateItem]})" },{ "trigger": "UIPreviewActionStyle \t UIPreviewActionStyle", "contents": "UIPreviewActionStyle" },{ "trigger": "trackImage \t UIImage", "contents": "trackImage" },{ "trigger": "UIKeyInputLeftArrow \t String", "contents": "UIKeyInputLeftArrow" },{ "trigger": "setTranslation \t func UIPanGestureRecognizer -> void" , "contents": "setTranslation(${1:CGPoint}, inView:${2:UIView?})" },{ "trigger": "UIActivityTypeCopyToPasteboard \t String", "contents": "UIActivityTypeCopyToPasteboard" },{ "trigger": "autocapitalizationType \t UITextAutocapitalizationType", "contents": "autocapitalizationType" },{ "trigger": "currentPoint \t CGPoint", "contents": "currentPoint" },{ "trigger": "presentPopoverFromRect \t func UIPopoverController -> void" , "contents": "presentPopoverFromRect(${1:CGRect}, inView:${2:UIView}, permittedArrowDirections:${3:UIPopoverArrowDirection}, animated:${4:BOOL})" },{ "trigger": "UIBaselineAdjustment \t UIBaselineAdjustment", "contents": "UIBaselineAdjustment" },{ "trigger": "willRemoveSubview \t func UIView -> void" , "contents": "willRemoveSubview(${1:UIView})" },{ "trigger": "UIWindowDidResignKeyNotification \t String", "contents": "UIWindowDidResignKeyNotification" },{ "trigger": "cameraViewTransform \t CGAffineTransform", "contents": "cameraViewTransform" },{ "trigger": "performActivity \t func UIActivity -> void" , "contents": "performActivity(${1:})" },{ "trigger": "proximitySensingEnabled \t BOOL", "contents": "proximitySensingEnabled" },{ "trigger": "removeItem \t func UIPushBehavior -> void" , "contents": "removeItem(${1:UIDynamicItem})" },{ "trigger": "UIFocusAnimationCoordinator \t UIFocusAnimationCoordinator", "contents": "UIFocusAnimationCoordinator" },{ "trigger": "documentState \t UIDocumentState", "contents": "documentState" },{ "trigger": "documentInteractionControllerViewControllerForPreview \t func unknown -> UIViewController
" , "contents": "documentInteractionControllerViewControllerForPreview(${1:UIDocumentInteractionController})" },{ "trigger": "fixAttributesInRange \t func NSMutableAttributedString -> void" , "contents": "fixAttributesInRange(${1:NSRange})" },{ "trigger": "encodeWithCoder \t func NSLayoutManager -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "maximumDate \t NSDate", "contents": "maximumDate" },{ "trigger": "hidesBarsWhenKeyboardAppears \t BOOL", "contents": "hidesBarsWhenKeyboardAppears" },{ "trigger": "splitViewController \t func unknown -> void" , "contents": "splitViewController(${1:UISplitViewController}, willHideViewController:${2:UIViewController}, withBarButtonItem:${3:UIBarButtonItem}, forPopoverController:${4:UIPopoverController})" },{ "trigger": "UICollectionViewScrollDirection \t UICollectionViewScrollDirection", "contents": "UICollectionViewScrollDirection" },{ "trigger": "NSTextContainer \t NSTextContainer", "contents": "NSTextContainer" },{ "trigger": "NSControlCharacterAction \t NSControlCharacterAction", "contents": "NSControlCharacterAction" },{ "trigger": "leftAnchor \t NSLayoutXAxisAnchor", "contents": "leftAnchor" },{ "trigger": "layoutManager \t func unknown -> CGFloat
" , "contents": "layoutManager(${1:NSLayoutManager}, paragraphSpacingAfterGlyphAtIndex:${2:Int}, withProposedLineFragmentRect:${3:CGRect})" },{ "trigger": "UIPrintNoContentError \t Int", "contents": "UIPrintNoContentError" },{ "trigger": "positionWithinRange \t func UITextField -> UITextPosition?
" , "contents": "positionWithinRange(${1:UITextRange}, atCharacterOffset:${2:Int})" },{ "trigger": "convertPoint \t func UIView -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, fromCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "UICollectionElementKindSectionHeader \t String", "contents": "UICollectionElementKindSectionHeader" },{ "trigger": "Top \t UIStackViewAlignment", "contents": "Top" },{ "trigger": "videoEditorControllerDidCancel \t func unknown -> void" , "contents": "videoEditorControllerDidCancel(${1:UIVideoEditorController})" },{ "trigger": "guessesForWordRange \t func UITextChecker -> [AnyObject]?
" , "contents": "guessesForWordRange(${1:NSRange}, inString:${2:String}, language:${3:String})" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, openURL:${2:NSURL}, sourceApplication:${3:String?}, annotation:${4:AnyObject})" },{ "trigger": "separatorStyle \t UITableViewCellSeparatorStyle", "contents": "separatorStyle" },{ "trigger": "startAnimating \t func UIActivityIndicatorView -> void" , "contents": "startAnimating(${1:})" },{ "trigger": "topViewController \t UIViewController", "contents": "topViewController" },{ "trigger": "UIApplicationStateRestorationBundleVersionKey \t String", "contents": "UIApplicationStateRestorationBundleVersionKey" },{ "trigger": "layoutSubviews \t func UIView -> void" , "contents": "layoutSubviews(${1:})" },{ "trigger": "UITapGestureRecognizer \t UITapGestureRecognizer", "contents": "UITapGestureRecognizer" },{ "trigger": "UIPrintInteractionController.isPrintingAvailable \t class UIPrintInteractionController -> BOOL
" , "contents": "UIPrintInteractionController.isPrintingAvailable(${1:})" },{ "trigger": "UIPrintPaper.bestPaperForPageSize \t class UIPrintPaper -> UIPrintPaper
" , "contents": "UIPrintPaper.bestPaperForPageSize(${1:CGSize}, withPapersFromArray:${2:[UIPrintPaper]})" },{ "trigger": "motionCancelled \t func UIResponder -> void" , "contents": "motionCancelled(${1:UIEventSubtype}, withEvent:${2:UIEvent?})" },{ "trigger": "delegate \t UITabBarControllerDelegate", "contents": "delegate" },{ "trigger": "scrollViewDidZoom \t func unknown -> void" , "contents": "scrollViewDidZoom(${1:UIScrollView})" },{ "trigger": "NSTextEffectAttributeName \t String", "contents": "NSTextEffectAttributeName" },{ "trigger": "UIOffsetValue \t func NSValue -> UIOffset
" , "contents": "UIOffsetValue(${1:})" },{ "trigger": "NSTextAlignmentFromCTTextAlignment \t func NSTextAttachment -> NSTextAlignment
" , "contents": "NSTextAlignmentFromCTTextAlignment(${1:CTTextAlignment})" },{ "trigger": "willTransitionToTraitCollection \t func unknown -> void" , "contents": "willTransitionToTraitCollection(${1:UITraitCollection}, withTransitionCoordinator:${2:UIViewControllerTransitionCoordinator})" },{ "trigger": "AlphaShift \t UIKeyModifierFlags", "contents": "AlphaShift" },{ "trigger": "textInputContextIdentifier \t String", "contents": "textInputContextIdentifier" },{ "trigger": "UIRotationGestureRecognizer \t UIRotationGestureRecognizer", "contents": "UIRotationGestureRecognizer" },{ "trigger": "imagePickerControllerDidCancel \t func unknown -> void" , "contents": "imagePickerControllerDidCancel(${1:UIImagePickerController})" },{ "trigger": "previewingContext \t func unknown -> void" , "contents": "previewingContext(${1:UIViewControllerPreviewing}, commitViewController:${2:UIViewController})" },{ "trigger": "titleRectForContentRect \t func UIButton -> CGRect
" , "contents": "titleRectForContentRect(${1:CGRect})" },{ "trigger": "accessibilityActivate \t func NSObject -> BOOL
" , "contents": "accessibilityActivate(${1:})" },{ "trigger": "alignmentRectInsets \t UIEdgeInsets", "contents": "alignmentRectInsets" },{ "trigger": "dictationRecognitionFailed \t func unknown -> void" , "contents": "dictationRecognitionFailed(${1:})" },{ "trigger": "UIColor.clearColor \t class UIColor -> UIColor
" , "contents": "UIColor.clearColor(${1:})" },{ "trigger": "UIRectEdge \t UIRectEdge", "contents": "UIRectEdge" },{ "trigger": "UIVideoAtPathIsCompatibleWithSavedPhotosAlbum \t func UIVideoEditorController -> BOOL
" , "contents": "UIVideoAtPathIsCompatibleWithSavedPhotosAlbum(${1:String})" },{ "trigger": "suppressesIncrementalRendering \t BOOL", "contents": "suppressesIncrementalRendering" },{ "trigger": "InConflict \t UIDocumentState", "contents": "InConflict" },{ "trigger": "tableView \t func unknown -> NSIndexPath?
" , "contents": "tableView(${1:UITableView}, willDeselectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "shadowImage \t UIImage", "contents": "shadowImage" },{ "trigger": "UIAccessibilityVoiceOverStatusChanged \t String", "contents": "UIAccessibilityVoiceOverStatusChanged" },{ "trigger": "fontDescriptor \t func UIFont -> UIFontDescriptor
" , "contents": "fontDescriptor(${1:})" },{ "trigger": "backgroundImage \t UIImage", "contents": "backgroundImage" },{ "trigger": "userActivity \t NSUserActivity", "contents": "userActivity" },{ "trigger": "alertViewCancel \t func unknown -> void" , "contents": "alertViewCancel(${1:UIAlertView})" },{ "trigger": "pasteboardTypesForItemSet \t func UIPasteboard -> [AnyObject]?
" , "contents": "pasteboardTypesForItemSet(${1:NSIndexSet?})" },{ "trigger": "UIApplicationDidBecomeActiveNotification \t String", "contents": "UIApplicationDidBecomeActiveNotification" },{ "trigger": "beginBackgroundTaskWithName \t func UIApplication -> Void?" , "contents": "beginBackgroundTaskWithName(${1:String?}, expirationHandler:${2: -> Void?})" },{ "trigger": "UIFontWeightThin \t CGFloat", "contents": "UIFontWeightThin" },{ "trigger": "setProgress \t func UIProgressView -> void" , "contents": "setProgress(${1:Float}, animated:${2:BOOL})" },{ "trigger": "insertText \t func UITextField -> void" , "contents": "insertText(${1:String})" },{ "trigger": "UIView.animateWithDuration \t class UIView -> Void," , "contents": "UIView.animateWithDuration(${1:NSTimeInterval}, animations:${2: -> Void}, completion:${3:BOOL -> Void?})" },{ "trigger": "UIPasteboardChangedNotification \t String", "contents": "UIPasteboardChangedNotification" },{ "trigger": "Postcard \t UIPrinterJobTypes", "contents": "Postcard" },{ "trigger": "UISwipeGestureRecognizerDirection \t UISwipeGestureRecognizerDirection", "contents": "UISwipeGestureRecognizerDirection" },{ "trigger": "sectionIndexTrackingBackgroundColor \t UIColor", "contents": "sectionIndexTrackingBackgroundColor" },{ "trigger": "UIAccessibilityGuidedAccessStatusDidChangeNotification \t String", "contents": "UIAccessibilityGuidedAccessStatusDidChangeNotification" },{ "trigger": "predictedTouchesForTouch \t func UIEvent -> [UITouch]?
" , "contents": "predictedTouchesForTouch(${1:UITouch})" },{ "trigger": "UICollectionViewLayoutInvalidationContext \t UICollectionViewLayoutInvalidationContext", "contents": "UICollectionViewLayoutInvalidationContext" },{ "trigger": "forceTouchCapability \t UIForceTouchCapability", "contents": "forceTouchCapability" },{ "trigger": "UIDocumentPickerMode \t UIDocumentPickerMode", "contents": "UIDocumentPickerMode" },{ "trigger": "verticalSizeClass \t UIUserInterfaceSizeClass", "contents": "verticalSizeClass" },{ "trigger": "ShowHideTransitionViews \t UIViewAnimationOptions", "contents": "ShowHideTransitionViews" },{ "trigger": "constraintEqualToAnchor \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintEqualToAnchor(${1:NSLayoutDimension!}, multiplier:${2:CGFloat})" },{ "trigger": "setTargetOffsetFromCenter \t func UIPushBehavior -> void" , "contents": "setTargetOffsetFromCenter(${1:UIOffset}, forItem:${2:UIDynamicItem})" },{ "trigger": "selector \t Selector", "contents": "selector" },{ "trigger": "discoverabilityTitle \t String", "contents": "discoverabilityTitle" },{ "trigger": "PhoneNumber \t UIDataDetectorTypes", "contents": "PhoneNumber" },{ "trigger": "invalidateAttributesInRange \t func NSTextStorage -> void" , "contents": "invalidateAttributesInRange(${1:NSRange})" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, canFocusRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "encodeWithCoder \t func UIUserNotificationCategory -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "willPresentAlertView \t func unknown -> void" , "contents": "willPresentAlertView(${1:UIAlertView})" },{ "trigger": "UIActivityTypeOpenInIBooks \t String", "contents": "UIActivityTypeOpenInIBooks" },{ "trigger": "UIBezierPath.bezierPath \t class UIBezierPath -> Self
" , "contents": "UIBezierPath.bezierPath(${1:})" },{ "trigger": "scrollViewDidEndZooming \t func UIWebView -> void" , "contents": "scrollViewDidEndZooming(${1:UIScrollView}, withView:${2:UIView?}, atScale:${3:CGFloat})" },{ "trigger": "EditingDisabled \t UIDocumentState", "contents": "EditingDisabled" },{ "trigger": "applicationFrame \t CGRect", "contents": "applicationFrame" },{ "trigger": "convertPoint \t func unknown -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, toCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "finalizeLayoutTransition \t func UICollectionViewLayout -> void" , "contents": "finalizeLayoutTransition(${1:})" },{ "trigger": "finalLayoutAttributesForDisappearingItemAtIndexPath \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "finalLayoutAttributesForDisappearingItemAtIndexPath(${1:NSIndexPath})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didChangeStatusBarOrientation:${2:UIInterfaceOrientation})" },{ "trigger": "UIFieldBehavior.dragField \t class UIFieldBehavior -> Self
" , "contents": "UIFieldBehavior.dragField(${1:})" },{ "trigger": "restorationClass \t AnyObject", "contents": "restorationClass" },{ "trigger": "UIBezierPath.bezierPathWithRect \t class UIBezierPath -> Self
" , "contents": "UIBezierPath.bezierPathWithRect(${1:CGRect})" },{ "trigger": "presentAnimated \t func UIPrinterPickerController -> BOOL
" , "contents": "presentAnimated(${1:BOOL}, completionHandler:${2:UIPrinterPickerCompletionHandler?})" },{ "trigger": "editable \t BOOL", "contents": "editable" },{ "trigger": "UITextPosition \t UITextPosition", "contents": "UITextPosition" },{ "trigger": "drawInRect \t func NSString -> CGSize
" , "contents": "drawInRect(${1:CGRect}, withFont:${2:UIFont!}, lineBreakMode:${3:NSLineBreakMode})" },{ "trigger": "UIBlurEffectStyle \t UIBlurEffectStyle", "contents": "UIBlurEffectStyle" },{ "trigger": "EditingDidBegin \t UIControlEvents", "contents": "EditingDidBegin" },{ "trigger": "tableView \t func UITableViewController -> NSIndexPath
" , "contents": "tableView(${1:UITableView}, targetIndexPathForMoveFromRowAtIndexPath:${2:NSIndexPath}, toProposedIndexPath:${3:NSIndexPath})" },{ "trigger": "UIPageViewControllerSpineLocation \t UIPageViewControllerSpineLocation", "contents": "UIPageViewControllerSpineLocation" },{ "trigger": "selectedTextRange \t UITextRange", "contents": "selectedTextRange" },{ "trigger": "windowLevel \t UIWindowLevel", "contents": "windowLevel" },{ "trigger": "UIApplicationLaunchOptionsUserActivityTypeKey \t String", "contents": "UIApplicationLaunchOptionsUserActivityTypeKey" },{ "trigger": "drawAtPoint \t func NSString -> CGSize
" , "contents": "drawAtPoint(${1:CGPoint}, withFont:${2:UIFont!})" },{ "trigger": "splitViewController \t func unknown -> void" , "contents": "splitViewController(${1:UISplitViewController}, willShowViewController:${2:UIViewController}, invalidatingBarButtonItem:${3:UIBarButtonItem})" },{ "trigger": "text \t String", "contents": "text" },{ "trigger": "FlexibleLeftMargin \t UIViewAutoresizing", "contents": "FlexibleLeftMargin" },{ "trigger": "scrollIndicatorInsets \t UIEdgeInsets", "contents": "scrollIndicatorInsets" },{ "trigger": "UIRectCorner \t UIRectCorner", "contents": "UIRectCorner" },{ "trigger": "textStorage \t NSTextStorage", "contents": "textStorage" },{ "trigger": "addBehavior \t func UIDynamicAnimator -> void" , "contents": "addBehavior(${1:UIDynamicBehavior})" },{ "trigger": "UILexicon \t UILexicon", "contents": "UILexicon" },{ "trigger": "canBecomeFirstResponder \t func UIResponder -> BOOL
" , "contents": "canBecomeFirstResponder(${1:})" },{ "trigger": "touchesShouldBegin \t func UIScrollView -> BOOL
" , "contents": "touchesShouldBegin(${1:Set<UITouch>}, withEvent:${2:UIEvent?}, inContentView:${3:UIView})" },{ "trigger": "timestamp \t NSTimeInterval", "contents": "timestamp" },{ "trigger": "setBaseWritingDirection \t func UITextField -> void" , "contents": "setBaseWritingDirection(${1:UITextWritingDirection}, forRange:${2:UITextRange})" },{ "trigger": "caretRectForPosition \t func UITextView -> CGRect
" , "contents": "caretRectForPosition(${1:UITextPosition})" },{ "trigger": "UIUserNotificationTextInputActionButtonTitleKey \t String", "contents": "UIUserNotificationTextInputActionButtonTitleKey" },{ "trigger": "decodeCGRectForKey \t func NSCoder -> CGRect
" , "contents": "decodeCGRectForKey(${1:String})" },{ "trigger": "lineJoinStyle \t CGLineJoin", "contents": "lineJoinStyle" },{ "trigger": "scrollViewShouldScrollToTop \t func UICollectionViewController -> BOOL
" , "contents": "scrollViewShouldScrollToTop(${1:UIScrollView})" },{ "trigger": "inputAssistantItem \t UITextInputAssistantItem", "contents": "inputAssistantItem" },{ "trigger": "UIActivityTypePrint \t String", "contents": "UIActivityTypePrint" },{ "trigger": "UIAccessibilityReduceTransparencyStatusDidChangeNotification \t String", "contents": "UIAccessibilityReduceTransparencyStatusDidChangeNotification" },{ "trigger": "accommodatePresentedSubitemDeletionAtURL \t func UIDocument -> Void
" , "contents": "accommodatePresentedSubitemDeletionAtURL(${1:NSURL}, completionHandler:${2:NSError? -> Void})" },{ "trigger": "UIColor.scrollViewTexturedBackgroundColor \t class UIColor -> UIColor
" , "contents": "UIColor.scrollViewTexturedBackgroundColor(${1:})" },{ "trigger": "tableView \t func UITableViewController -> String?
" , "contents": "tableView(${1:UITableView}, titleForDeleteConfirmationButtonForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "sortedArrayFromArray \t func UILocalizedIndexedCollation -> [AnyObject]
" , "contents": "sortedArrayFromArray(${1:[AnyObject]}, collationStringSelector:${2:Selector})" },{ "trigger": "relinquishPresentedItemToWriter \t func UIDocument -> Void?" , "contents": "relinquishPresentedItemToWriter(${1: -> Void? -> Void})" },{ "trigger": "pageViewController \t func unknown -> void" , "contents": "pageViewController(${1:UIPageViewController}, willTransitionToViewControllers:${2:[UIViewController]})" },{ "trigger": "UITableViewCell \t UITableViewCell", "contents": "UITableViewCell" },{ "trigger": "endUpdates \t func UITableView -> void" , "contents": "endUpdates(${1:})" },{ "trigger": "activityViewController \t func unknown -> UIImage?
" , "contents": "activityViewController(${1:UIActivityViewController}, thumbnailImageForActivityType:${2:String?}, suggestedSize:${3:CGSize})" },{ "trigger": "dismissPopoverAnimated \t func UIPopoverController -> void" , "contents": "dismissPopoverAnimated(${1:BOOL})" },{ "trigger": "UIImage.imageWithCIImage \t class UIImage -> UIImage
" , "contents": "UIImage.imageWithCIImage(${1:CIImage})" },{ "trigger": "UICollectionViewFlowLayoutInvalidationContext \t UICollectionViewFlowLayoutInvalidationContext", "contents": "UICollectionViewFlowLayoutInvalidationContext" },{ "trigger": "UIPopoverBackgroundView.arrowHeight \t class UIPopoverBackgroundView -> CGFloat
" , "contents": "UIPopoverBackgroundView.arrowHeight(${1:})" },{ "trigger": "searchBarShouldEndEditing \t func unknown -> BOOL
" , "contents": "searchBarShouldEndEditing(${1:UISearchBar})" },{ "trigger": "jobName \t String", "contents": "jobName" },{ "trigger": "targetIndexPathForInteractivelyMovingItem \t func UICollectionViewLayout -> NSIndexPath
" , "contents": "targetIndexPathForInteractivelyMovingItem(${1:NSIndexPath}, withPosition:${2:CGPoint})" },{ "trigger": "imageWithRenderingMode \t func UIImage -> UIImage
" , "contents": "imageWithRenderingMode(${1:UIImageRenderingMode})" },{ "trigger": "UIKeyboardDidChangeFrameNotification \t String", "contents": "UIKeyboardDidChangeFrameNotification" },{ "trigger": "beginIgnoringInteractionEvents \t func UIApplication -> void" , "contents": "beginIgnoringInteractionEvents(${1:})" },{ "trigger": "splitViewControllerPreferredInterfaceOrientationForPresentation \t func unknown -> UIInterfaceOrientation
" , "contents": "splitViewControllerPreferredInterfaceOrientationForPresentation(${1:UISplitViewController})" },{ "trigger": "presentedItemDidGainVersion \t func UIDocument -> void" , "contents": "presentedItemDidGainVersion(${1:NSFileVersion})" },{ "trigger": "UIRectFill \t func UIReferenceLibraryViewController -> void" , "contents": "UIRectFill(${1:CGRect})" },{ "trigger": "UIPrintPageRenderer \t UIPrintPageRenderer", "contents": "UIPrintPageRenderer" },{ "trigger": "highlightedImage \t UIImage", "contents": "highlightedImage" },{ "trigger": "scrollRectToVisible \t func UIScrollView -> void" , "contents": "scrollRectToVisible(${1:CGRect}, animated:${2:BOOL})" },{ "trigger": "takePicture \t func UIImagePickerController -> void" , "contents": "takePicture(${1:})" },{ "trigger": "UIForceTouchCapability \t UIForceTouchCapability", "contents": "UIForceTouchCapability" },{ "trigger": "canPerformWithActivityItems \t func UIActivity -> BOOL
" , "contents": "canPerformWithActivityItems(${1:[AnyObject]})" },{ "trigger": "CGAffineTransformFromString \t func unknown -> CGAffineTransform
" , "contents": "CGAffineTransformFromString(${1:String})" },{ "trigger": "setLineDash \t func UIBezierPath -> void" , "contents": "setLineDash(${1:UnsafePointer<CGFloat>}, count:${2:Int}, phase:${3:CGFloat})" },{ "trigger": "UIGestureRecognizerState \t UIGestureRecognizerState", "contents": "UIGestureRecognizerState" },{ "trigger": "DirectionLeftToRight \t NSLayoutFormatOptions", "contents": "DirectionLeftToRight" },{ "trigger": "stretchableImageWithLeftCapWidth \t func UIImage -> UIImage
" , "contents": "stretchableImageWithLeftCapWidth(${1:Int}, topCapHeight:${2:Int})" },{ "trigger": "UIColor.brownColor \t class UIColor -> UIColor
" , "contents": "UIColor.brownColor(${1:})" },{ "trigger": "separateSecondaryViewControllerForSplitViewController \t func UIViewController -> UIViewController?
" , "contents": "separateSecondaryViewControllerForSplitViewController(${1:UISplitViewController})" },{ "trigger": "totalBounds \t CGRect", "contents": "totalBounds" },{ "trigger": "userInteractionEnabled \t BOOL", "contents": "userInteractionEnabled" },{ "trigger": "adaptivePresentationStyleForPresentationController \t func unknown -> UIModalPresentationStyle
" , "contents": "adaptivePresentationStyleForPresentationController(${1:UIPresentationController}, traitCollection:${2:UITraitCollection})" },{ "trigger": "Top \t UIRectEdge", "contents": "Top" },{ "trigger": "UIEdgeInsetsValue \t func NSValue -> UIEdgeInsets
" , "contents": "UIEdgeInsetsValue(${1:})" },{ "trigger": "UIView.setAnimationDelay \t class UIView -> void" , "contents": "UIView.setAnimationDelay(${1:NSTimeInterval})" },{ "trigger": "tabBarController \t func unknown -> UIViewControllerInteractiveTransitioning?
" , "contents": "tabBarController(${1:UITabBarController}, interactionControllerForAnimationController:${2:UIViewControllerAnimatedTransitioning})" },{ "trigger": "UITextBorderStyle \t UITextBorderStyle", "contents": "UITextBorderStyle" },{ "trigger": "overrideTraitCollectionForChildViewController \t func UIViewController -> UITraitCollection?
" , "contents": "overrideTraitCollectionForChildViewController(${1:UIViewController})" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, canPerformAction:${2:Selector}, forItemAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "showsControlCharacters \t BOOL", "contents": "showsControlCharacters" },{ "trigger": "textFieldShouldEndEditing \t func unknown -> BOOL
" , "contents": "textFieldShouldEndEditing(${1:UITextField})" },{ "trigger": "cancelInteractiveTransition \t func unknown -> void" , "contents": "cancelInteractiveTransition(${1:})" },{ "trigger": "willMoveToWindow \t func UIView -> void" , "contents": "willMoveToWindow(${1:UIWindow?})" },{ "trigger": "UIStackViewAlignment \t UIStackViewAlignment", "contents": "UIStackViewAlignment" },{ "trigger": "contentVerticalAlignment \t UIControlContentVerticalAlignment", "contents": "contentVerticalAlignment" },{ "trigger": "invalidateGlyphsForCharacterRange \t func NSLayoutManager -> void" , "contents": "invalidateGlyphsForCharacterRange(${1:NSRange}, changeInLength:${2:Int}, actualCharacterRange:${3:NSRangePointer})" },{ "trigger": "encodeRestorableStateWithCoder \t func UIViewController -> void" , "contents": "encodeRestorableStateWithCoder(${1:NSCoder})" },{ "trigger": "rangeOfMisspelledWordInString \t func UITextChecker -> NSRange
" , "contents": "rangeOfMisspelledWordInString(${1:String}, range:${2:NSRange}, startingAt:${3:Int}, wrap:${4:BOOL}, language:${5:String})" },{ "trigger": "currentMaximumTrackImage \t UIImage", "contents": "currentMaximumTrackImage" },{ "trigger": "selectedSegmentIndex \t Int", "contents": "selectedSegmentIndex" },{ "trigger": "fontDescriptorWithMatrix \t func UIFontDescriptor -> UIFontDescriptor
" , "contents": "fontDescriptorWithMatrix(${1:CGAffineTransform})" },{ "trigger": "NSObject.paste \t class NSObject -> void" , "contents": "NSObject.paste(${1:AnyObject?})" },{ "trigger": "UIReferenceLibraryViewController.dictionaryHasDefinitionForTerm \t class UIReferenceLibraryViewController -> BOOL
" , "contents": "UIReferenceLibraryViewController.dictionaryHasDefinitionForTerm(${1:String})" },{ "trigger": "Recognized \t UIGestureRecognizerState", "contents": "Recognized" },{ "trigger": "BeginFromCurrentState \t UIViewKeyframeAnimationOptions", "contents": "BeginFromCurrentState" },{ "trigger": "extendedLayoutIncludesOpaqueBars \t BOOL", "contents": "extendedLayoutIncludesOpaqueBars" },{ "trigger": "enableInputClicksWhenVisible \t BOOL", "contents": "enableInputClicksWhenVisible" },{ "trigger": "NSObject.accessibilityPerformEscape \t class NSObject -> BOOL
" , "contents": "NSObject.accessibilityPerformEscape(${1:})" },{ "trigger": "NSFileProviderExtension \t NSFileProviderExtension", "contents": "NSFileProviderExtension" },{ "trigger": "accessibilityLanguage \t String", "contents": "accessibilityLanguage" },{ "trigger": "horizontalSizeClass \t UIUserInterfaceSizeClass", "contents": "horizontalSizeClass" },{ "trigger": "dismissPreviewAnimated \t func UIDocumentInteractionController -> void" , "contents": "dismissPreviewAnimated(${1:BOOL})" },{ "trigger": "statusBarFrame \t CGRect", "contents": "statusBarFrame" },{ "trigger": "UITextViewTextDidBeginEditingNotification \t String", "contents": "UITextViewTextDidBeginEditingNotification" },{ "trigger": "pickerView \t func unknown -> void" , "contents": "pickerView(${1:UIPickerView}, didSelectRow:${2:Int}, inComponent:${3:Int})" },{ "trigger": "UITextAttributeTextShadowColor \t String", "contents": "UITextAttributeTextShadowColor" },{ "trigger": "scrollViewWillBeginZooming \t func UITableViewController -> void" , "contents": "scrollViewWillBeginZooming(${1:UIScrollView}, withView:${2:UIView?})" },{ "trigger": "UsesLineFragmentOrigin \t NSStringDrawingOptions", "contents": "UsesLineFragmentOrigin" },{ "trigger": "backIndicatorTransitionMaskImage \t UIImage", "contents": "backIndicatorTransitionMaskImage" },{ "trigger": "showFromTabBar \t func UIActionSheet -> void" , "contents": "showFromTabBar(${1:UITabBar})" },{ "trigger": "canResignFirstResponder \t func UIResponder -> BOOL
" , "contents": "canResignFirstResponder(${1:})" },{ "trigger": "delegate \t UIScrollViewDelegate", "contents": "delegate" },{ "trigger": "UITableViewCellEditingStyle \t UITableViewCellEditingStyle", "contents": "UITableViewCellEditingStyle" },{ "trigger": "encodeWithCoder \t func UIBarItem -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "UIBarItem \t UIBarItem", "contents": "UIBarItem" },{ "trigger": "canOverlapSourceViewRect \t BOOL", "contents": "canOverlapSourceViewRect" },{ "trigger": "TouchDragInside \t UIControlEvents", "contents": "TouchDragInside" },{ "trigger": "UIColor.magentaColor \t class UIColor -> UIColor
" , "contents": "UIColor.magentaColor(${1:})" },{ "trigger": "clearsSelectionOnViewWillAppear \t BOOL", "contents": "clearsSelectionOnViewWillAppear" },{ "trigger": "UIDocumentStateChangedNotification \t String", "contents": "UIDocumentStateChangedNotification" },{ "trigger": "numberOfSectionsInCollectionView \t func unknown -> Int
" , "contents": "numberOfSectionsInCollectionView(${1:UICollectionView})" },{ "trigger": "responder \t UIResponder", "contents": "responder" },{ "trigger": "backgroundImageForBarPosition \t func UINavigationBar -> UIImage?
" , "contents": "backgroundImageForBarPosition(${1:UIBarPosition}, barMetrics:${2:UIBarMetrics})" },{ "trigger": "addClip \t func UIBezierPath -> void" , "contents": "addClip(${1:})" },{ "trigger": "UIViewController \t UIViewController", "contents": "UIViewController" },{ "trigger": "printInteractionControllerParentViewController \t func unknown -> UIViewController
" , "contents": "printInteractionControllerParentViewController(${1:UIPrintInteractionController})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, commitEditingStyle:${2:UITableViewCellEditingStyle}, forRowAtIndexPath:${3:NSIndexPath})" },{ "trigger": "UIFontDescriptor.preferredFontDescriptorWithTextStyle \t class UIFontDescriptor -> UIFontDescriptor
" , "contents": "UIFontDescriptor.preferredFontDescriptorWithTextStyle(${1:String})" },{ "trigger": "UIUserNotificationActionContext \t UIUserNotificationActionContext", "contents": "UIUserNotificationActionContext" },{ "trigger": "trackRectForBounds \t func UISlider -> CGRect
" , "contents": "trackRectForBounds(${1:CGRect})" },{ "trigger": "splitViewController \t func unknown -> void" , "contents": "splitViewController(${1:UISplitViewController}, popoverController:${2:UIPopoverController}, willPresentViewController:${3:UIViewController})" },{ "trigger": "navigationBar \t UINavigationBar", "contents": "navigationBar" },{ "trigger": "setHighlighted \t func UITableViewCell -> void" , "contents": "setHighlighted(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "tabBar \t func unknown -> void" , "contents": "tabBar(${1:UITabBar}, willEndCustomizingItems:${2:[UITabBarItem]}, changed:${3:BOOL})" },{ "trigger": "setTargetRect \t func UIMenuController -> void" , "contents": "setTargetRect(${1:CGRect}, inView:${2:UIView})" },{ "trigger": "indexPathsForSelectedItems \t func UICollectionView -> [NSIndexPath]?
" , "contents": "indexPathsForSelectedItems(${1:})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didChangeStatusBarFrame:${2:CGRect})" },{ "trigger": "lineFragmentUsedRectForGlyphAtIndex \t func NSLayoutManager -> CGRect
" , "contents": "lineFragmentUsedRectForGlyphAtIndex(${1:Int}, effectiveRange:${2:NSRangePointer}, withoutAdditionalLayout:${3:BOOL})" },{ "trigger": "popoverController \t func unknown -> void" , "contents": "popoverController(${1:UIPopoverController}, willRepositionPopoverToRect:${2:UnsafeMutablePointer<CGRect>}, inView:${3:AutoreleasingUnsafeMutablePointer<UIView?>})" },{ "trigger": "pageViewControllerPreferredInterfaceOrientationForPresentation \t func unknown -> UIInterfaceOrientation
" , "contents": "pageViewControllerPreferredInterfaceOrientationForPresentation(${1:UIPageViewController})" },{ "trigger": "gestureRecognizer \t func UITableViewCell -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldRequireFailureOfGestureRecognizer:${2:UIGestureRecognizer})" },{ "trigger": "convertRect \t func UIView -> CGRect
" , "contents": "convertRect(${1:CGRect}, toCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "numberOfComponents \t Int", "contents": "numberOfComponents" },{ "trigger": "popoverBackgroundViewClass \t AnyClass", "contents": "popoverBackgroundViewClass" },{ "trigger": "reversesTitleShadowWhenHighlighted \t BOOL", "contents": "reversesTitleShadowWhenHighlighted" },{ "trigger": "UIButton.buttonWithType \t class UIButton -> Self
" , "contents": "UIButton.buttonWithType(${1:UIButtonType})" },{ "trigger": "guidedAccessRestrictionIdentifiers \t func unknown -> [String]?
" , "contents": "guidedAccessRestrictionIdentifiers(${1:})" },{ "trigger": "textInRange \t func UITextField -> String?
" , "contents": "textInRange(${1:UITextRange})" },{ "trigger": "BottomRight \t UIRectCorner", "contents": "BottomRight" },{ "trigger": "applicationWillTerminate \t func unknown -> void" , "contents": "applicationWillTerminate(${1:UIApplication})" },{ "trigger": "backIndicatorImage \t UIImage", "contents": "backIndicatorImage" },{ "trigger": "UIControlContentVerticalAlignment \t UIControlContentVerticalAlignment", "contents": "UIControlContentVerticalAlignment" },{ "trigger": "alertView \t func unknown -> void" , "contents": "alertView(${1:UIAlertView}, didDismissWithButtonIndex:${2:Int})" },{ "trigger": "accessibilityIncrement \t func NSObject -> void" , "contents": "accessibilityIncrement(${1:})" },{ "trigger": "incrementImageForState \t func UIStepper -> UIImage?
" , "contents": "incrementImageForState(${1:UIControlState})" },{ "trigger": "childViewControllerForStatusBarHidden \t func UIViewController -> UIViewController?
" , "contents": "childViewControllerForStatusBarHidden(${1:})" },{ "trigger": "NSObject.prepareForInterfaceBuilder \t class NSObject -> void" , "contents": "NSObject.prepareForInterfaceBuilder(${1:})" },{ "trigger": "maximumTrackTintColor \t UIColor", "contents": "maximumTrackTintColor" },{ "trigger": "isCustomizing \t func UITabBar -> BOOL
" , "contents": "isCustomizing(${1:})" },{ "trigger": "collectionView \t func unknown -> UICollectionViewTransitionLayout
" , "contents": "collectionView(${1:UICollectionView}, transitionLayoutForOldLayout:${2:UICollectionViewLayout}, newLayout:${3:UICollectionViewLayout})" },{ "trigger": "drawInRect \t func NSString -> CGSize
" , "contents": "drawInRect(${1:CGRect}, withFont:${2:UIFont!})" },{ "trigger": "NSValue.valueWithUIOffset \t class NSValue -> NSValue
" , "contents": "NSValue.valueWithUIOffset(${1:UIOffset})" },{ "trigger": "constraintGreaterThanOrEqualToConstant \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintGreaterThanOrEqualToConstant(${1:CGFloat})" },{ "trigger": "loadNibNamed \t func NSBundle -> [AnyObject]!
" , "contents": "loadNibNamed(${1:String!}, owner:${2:AnyObject!}, options:${3:[NSObject })" },{ "trigger": "categories \t Set", "contents": "categories" },{ "trigger": "buttonTitleAtIndex \t func UIActionSheet -> String?
" , "contents": "buttonTitleAtIndex(${1:Int})" },{ "trigger": "UIKeyInputDownArrow \t String", "contents": "UIKeyInputDownArrow" },{ "trigger": "UIAttachmentBehavior \t UIAttachmentBehavior", "contents": "UIAttachmentBehavior" },{ "trigger": "UITextChecker.availableLanguages \t class UITextChecker -> [AnyObject]
" , "contents": "UITextChecker.availableLanguages(${1:})" },{ "trigger": "proximityState \t BOOL", "contents": "proximityState" },{ "trigger": "UIPrintInfo \t UIPrintInfo", "contents": "UIPrintInfo" },{ "trigger": "delegate \t UISearchBarDelegate", "contents": "delegate" },{ "trigger": "popToRootViewControllerAnimated \t func UINavigationController -> [UIViewController]?
" , "contents": "popToRootViewControllerAnimated(${1:BOOL})" },{ "trigger": "textWillChange \t func unknown -> void" , "contents": "textWillChange(${1:UITextInput?})" },{ "trigger": "UIGraphicsPopContext \t func UIGravityBehavior -> void" , "contents": "UIGraphicsPopContext(${1:})" },{ "trigger": "characterRangeByExtendingPosition \t func UITextField -> UITextRange?
" , "contents": "characterRangeByExtendingPosition(${1:UITextPosition}, inDirection:${2:UITextLayoutDirection})" },{ "trigger": "searchResultsDataSource \t UITableViewDataSource", "contents": "searchResultsDataSource" },{ "trigger": "UIApplicationStateRestorationSystemVersionKey \t String", "contents": "UIApplicationStateRestorationSystemVersionKey" },{ "trigger": "editButtonItem \t func UIViewController -> UIBarButtonItem
" , "contents": "editButtonItem(${1:})" },{ "trigger": "willTransitionToTraitCollection \t func UIViewController -> void" , "contents": "willTransitionToTraitCollection(${1:UITraitCollection}, withTransitionCoordinator:${2:UIViewControllerTransitionCoordinator})" },{ "trigger": "UIKeyInputEscape \t String", "contents": "UIKeyInputEscape" },{ "trigger": "showingDeleteConfirmation \t BOOL", "contents": "showingDeleteConfirmation" },{ "trigger": "navigationController \t func unknown -> UIViewControllerAnimatedTransitioning?
" , "contents": "navigationController(${1:UINavigationController}, animationControllerForOperation:${2:UINavigationControllerOperation}, fromViewController:${3:UIViewController}, toViewController:${4:UIViewController})" },{ "trigger": "tableView \t func unknown -> Int
" , "contents": "tableView(${1:UITableView}, numberOfRowsInSection:${2:Int})" },{ "trigger": "showViewController \t func UIViewController -> void" , "contents": "showViewController(${1:UIViewController}, sender:${2:AnyObject?})" },{ "trigger": "removeFromSuperview \t func UIView -> void" , "contents": "removeFromSuperview(${1:})" },{ "trigger": "viewIfLoaded \t UIView", "contents": "viewIfLoaded" },{ "trigger": "drawFooterForPageAtIndex \t func UIPrintPageRenderer -> void" , "contents": "drawFooterForPageAtIndex(${1:Int}, inRect:${2:CGRect})" },{ "trigger": "NSObject.toggleUnderline \t class NSObject -> void" , "contents": "NSObject.toggleUnderline(${1:AnyObject?})" },{ "trigger": "objectRestorationClass \t AnyObject", "contents": "objectRestorationClass" },{ "trigger": "indexPathsForVisibleSupplementaryElementsOfKind \t func UICollectionView -> [NSIndexPath]
" , "contents": "indexPathsForVisibleSupplementaryElementsOfKind(${1:String})" },{ "trigger": "scrollRangeToVisible \t func UITextView -> void" , "contents": "scrollRangeToVisible(${1:NSRange})" },{ "trigger": "presentOpenInMenuFromRect \t func UIDocumentInteractionController -> BOOL
" , "contents": "presentOpenInMenuFromRect(${1:CGRect}, inView:${2:UIView}, animated:${3:BOOL})" },{ "trigger": "characterRangeAtPoint \t func UITextView -> UITextRange?
" , "contents": "characterRangeAtPoint(${1:CGPoint})" },{ "trigger": "NSObject.setAccessibilityFrame \t class NSObject -> void" , "contents": "NSObject.setAccessibilityFrame(${1:CGRect})" },{ "trigger": "UITableViewRowAction \t UITableViewRowAction", "contents": "UITableViewRowAction" },{ "trigger": "UIPrintInfoOrientation \t UIPrintInfoOrientation", "contents": "UIPrintInfoOrientation" },{ "trigger": "alwaysBounceVertical \t BOOL", "contents": "alwaysBounceVertical" },{ "trigger": "NSDocumentTypeDocumentAttribute \t String", "contents": "NSDocumentTypeDocumentAttribute" },{ "trigger": "endGeneratingDeviceOrientationNotifications \t func UIDevice -> void" , "contents": "endGeneratingDeviceOrientationNotifications(${1:})" },{ "trigger": "resizingMode \t UIImageResizingMode", "contents": "resizingMode" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldHighlightItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didEndDisplayingHeaderView:${2:UIView}, forSection:${3:Int})" },{ "trigger": "NSObject.select \t class NSObject -> void" , "contents": "NSObject.select(${1:AnyObject?})" },{ "trigger": "makeAndModel \t String", "contents": "makeAndModel" },{ "trigger": "Left \t UICollectionViewScrollPosition", "contents": "Left" },{ "trigger": "UIPopoverPresentationController \t UIPopoverPresentationController", "contents": "UIPopoverPresentationController" },{ "trigger": "preferredFocusedView \t UIView", "contents": "preferredFocusedView" },{ "trigger": "highlighted \t BOOL", "contents": "highlighted" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, willFinishLaunchingWithOptions:${2:[NSObject })" },{ "trigger": "getHue \t func UIColor -> BOOL
" , "contents": "getHue(${1:UnsafeMutablePointer<CGFloat>}, saturation:${2:UnsafeMutablePointer<CGFloat>}, brightness:${3:UnsafeMutablePointer<CGFloat>}, alpha:${4:UnsafeMutablePointer<CGFloat>})" },{ "trigger": "UIFontDescriptorCharacterSetAttribute \t String", "contents": "UIFontDescriptorCharacterSetAttribute" },{ "trigger": "UIPreviewAction \t UIPreviewAction", "contents": "UIPreviewAction" },{ "trigger": "show \t func UIAlertView -> void" , "contents": "show(${1:})" },{ "trigger": "UIOffsetMake \t func UIPageControl -> UIOffset
" , "contents": "UIOffsetMake(${1:CGFloat}, _:${2:CGFloat})" },{ "trigger": "positionFromPosition \t func UITextInputStringTokenizer -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, toBoundary:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "presentationStyle \t func unknown -> UIModalPresentationStyle
" , "contents": "presentationStyle(${1:})" },{ "trigger": "updateFloatingCursorAtPoint \t func unknown -> void" , "contents": "updateFloatingCursorAtPoint(${1:CGPoint})" },{ "trigger": "TruncatesLastVisibleLine \t NSStringDrawingOptions", "contents": "TruncatesLastVisibleLine" },{ "trigger": "UISearchBar \t UISearchBar", "contents": "UISearchBar" },{ "trigger": "encodeWithCoder \t func UITextInputMode -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "goBack \t func UIWebView -> void" , "contents": "goBack(${1:})" },{ "trigger": "showsVerticalScrollIndicator \t BOOL", "contents": "showsVerticalScrollIndicator" },{ "trigger": "UIAccessibilityScreenChangedNotification \t UIAccessibilityNotifications", "contents": "UIAccessibilityScreenChangedNotification" },{ "trigger": "layoutManagerDidInvalidateLayout \t func unknown -> void" , "contents": "layoutManagerDidInvalidateLayout(${1:NSLayoutManager})" },{ "trigger": "textStorage \t func unknown -> void" , "contents": "textStorage(${1:NSTextStorage}, didProcessEditing:${2:NSTextStorageEditActions}, range:${3:NSRange}, changeInLength:${4:Int})" },{ "trigger": "setContentCompressionResistancePriority \t func UIView -> void" , "contents": "setContentCompressionResistancePriority(${1:UILayoutPriority}, forAxis:${2:UILayoutConstraintAxis})" },{ "trigger": "presentSearchController \t func unknown -> void" , "contents": "presentSearchController(${1:UISearchController})" },{ "trigger": "keyWindow \t BOOL", "contents": "keyWindow" },{ "trigger": "ensureLayoutForCharacterRange \t func NSLayoutManager -> void" , "contents": "ensureLayoutForCharacterRange(${1:NSRange})" },{ "trigger": "UIBarStyle \t UIBarStyle", "contents": "UIBarStyle" },{ "trigger": "UITransitionContextToViewControllerKey \t String", "contents": "UITransitionContextToViewControllerKey" },{ "trigger": "searchDisplayController \t func unknown -> void" , "contents": "searchDisplayController(${1:UISearchDisplayController}, didHideSearchResultsTableView:${2:UITableView})" },{ "trigger": "shouldChangeTextInRange \t func unknown -> BOOL
" , "contents": "shouldChangeTextInRange(${1:UITextRange}, replacementText:${2:String})" },{ "trigger": "addItem \t func UICollisionBehavior -> void" , "contents": "addItem(${1:UIDynamicItem})" },{ "trigger": "leftCapWidth \t Int", "contents": "leftCapWidth" },{ "trigger": "imageRectForContentRect \t func UIButton -> CGRect
" , "contents": "imageRectForContentRect(${1:CGRect})" },{ "trigger": "autocorrectionType \t UITextAutocorrectionType", "contents": "autocorrectionType" },{ "trigger": "gestureRecognizerShouldBegin \t func unknown -> BOOL
" , "contents": "gestureRecognizerShouldBegin(${1:UIGestureRecognizer})" },{ "trigger": "NSObject.setAccessibilityLabel \t class NSObject -> void" , "contents": "NSObject.setAccessibilityLabel(${1:String?})" },{ "trigger": "collectionView \t UICollectionView", "contents": "collectionView" },{ "trigger": "Normal \t UIControlState", "contents": "Normal" },{ "trigger": "UIApplication \t UIApplication", "contents": "UIApplication" },{ "trigger": "UIApplicationBackgroundFetchIntervalMinimum \t NSTimeInterval", "contents": "UIApplicationBackgroundFetchIntervalMinimum" },{ "trigger": "UIFontDescriptor.fontDescriptorWithFontAttributes \t class UIFontDescriptor -> UIFontDescriptor
" , "contents": "UIFontDescriptor.fontDescriptorWithFontAttributes(${1:[String })" },{ "trigger": "maximumPossibleForce \t CGFloat", "contents": "maximumPossibleForce" },{ "trigger": "documentPicker \t func unknown -> void" , "contents": "documentPicker(${1:UIDocumentPickerViewController}, didPickDocumentAtURL:${2:NSURL})" },{ "trigger": "viewWillDisappear \t func UIViewController -> void" , "contents": "viewWillDisappear(${1:BOOL})" },{ "trigger": "NSObject.shouldGroupAccessibilityChildren \t class NSObject -> BOOL
" , "contents": "NSObject.shouldGroupAccessibilityChildren(${1:})" },{ "trigger": "allowsLinkPreview \t BOOL", "contents": "allowsLinkPreview" },{ "trigger": "UITextWritingDirection \t UITextWritingDirection", "contents": "UITextWritingDirection" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, accessoryButtonTappedForRowWithIndexPath:${2:NSIndexPath})" },{ "trigger": "minimumScaleFactor \t CGFloat", "contents": "minimumScaleFactor" },{ "trigger": "adjustsLetterSpacingToFitWidth \t BOOL", "contents": "adjustsLetterSpacingToFitWidth" },{ "trigger": "registerForPreviewingWithDelegate \t func UIViewController -> UIViewControllerPreviewing
" , "contents": "registerForPreviewingWithDelegate(${1:UIViewControllerPreviewingDelegate}, sourceView:${2:UIView})" },{ "trigger": "currentPage \t Int", "contents": "currentPage" },{ "trigger": "UIAccessibilityElement \t UIAccessibilityElement", "contents": "UIAccessibilityElement" },{ "trigger": "UITableViewFocusUpdateContext \t UITableViewFocusUpdateContext", "contents": "UITableViewFocusUpdateContext" },{ "trigger": "positionFromPosition \t func UITextView -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, inDirection:${2:UITextLayoutDirection}, offset:${3:Int})" },{ "trigger": "touchesBegan \t func UIResponder -> void" , "contents": "touchesBegan(${1:Set<UITouch>}, withEvent:${2:UIEvent?})" },{ "trigger": "preferredMaxLayoutWidth \t CGFloat", "contents": "preferredMaxLayoutWidth" },{ "trigger": "NSObject.accessibilityValue \t class NSObject -> String?
" , "contents": "NSObject.accessibilityValue(${1:})" },{ "trigger": "encodeRestorableStateWithCoder \t func unknown -> void" , "contents": "encodeRestorableStateWithCoder(${1:NSCoder})" },{ "trigger": "defersCurrentPageDisplay \t BOOL", "contents": "defersCurrentPageDisplay" },{ "trigger": "pageIndicatorTintColor \t UIColor", "contents": "pageIndicatorTintColor" },{ "trigger": "documentInteractionControllerWillBeginPreview \t func unknown -> void" , "contents": "documentInteractionControllerWillBeginPreview(${1:UIDocumentInteractionController})" },{ "trigger": "imagePickerController \t func unknown -> void" , "contents": "imagePickerController(${1:UIImagePickerController}, didFinishPickingMediaWithInfo:${2:[String })" },{ "trigger": "exerciseAmbiguityInLayout \t func UIView -> void" , "contents": "exerciseAmbiguityInLayout(${1:})" },{ "trigger": "arrowDirection \t UIMenuControllerArrowDirection", "contents": "arrowDirection" },{ "trigger": "UIPrinterPickerController \t UIPrinterPickerController", "contents": "UIPrinterPickerController" },{ "trigger": "preservesSuperviewLayoutMargins \t BOOL", "contents": "preservesSuperviewLayoutMargins" },{ "trigger": "accessibilityContentForLineNumber \t func unknown -> String?
" , "contents": "accessibilityContentForLineNumber(${1:Int})" },{ "trigger": "UIImage.animatedImageWithImages \t class UIImage -> UIImage?
" , "contents": "UIImage.animatedImageWithImages(${1:[UIImage]}, duration:${2:NSTimeInterval})" },{ "trigger": "focusedView \t UIView", "contents": "focusedView" },{ "trigger": "UIPasteboardNameGeneral \t String", "contents": "UIPasteboardNameGeneral" },{ "trigger": "backButtonBackgroundVerticalPositionAdjustmentForBarMetrics \t func UIBarButtonItem -> CGFloat
" , "contents": "backButtonBackgroundVerticalPositionAdjustmentForBarMetrics(${1:UIBarMetrics})" },{ "trigger": "vertical \t CGFloat", "contents": "vertical" },{ "trigger": "UITextInputMode \t UITextInputMode", "contents": "UITextInputMode" },{ "trigger": "addConstraints \t func UIView -> void" , "contents": "addConstraints(${1:[NSLayoutConstraint]})" },{ "trigger": "UILayoutFittingExpandedSize \t CGSize", "contents": "UILayoutFittingExpandedSize" },{ "trigger": "preferredLayoutAttributesFittingAttributes \t func UICollectionReusableView -> UICollectionViewLayoutAttributes
" , "contents": "preferredLayoutAttributesFittingAttributes(${1:UICollectionViewLayoutAttributes})" },{ "trigger": "fontDescriptorWithFamily \t func UIFontDescriptor -> UIFontDescriptor
" , "contents": "fontDescriptorWithFamily(${1:String})" },{ "trigger": "NSWritingDirectionFormatType \t NSWritingDirectionFormatType", "contents": "NSWritingDirectionFormatType" },{ "trigger": "UIUserNotificationCategory \t UIUserNotificationCategory", "contents": "UIUserNotificationCategory" },{ "trigger": "top \t CGFloat", "contents": "top" },{ "trigger": "UICollisionBehavior \t UICollisionBehavior", "contents": "UICollisionBehavior" },{ "trigger": "translatesReferenceBoundsIntoBoundary \t BOOL", "contents": "translatesReferenceBoundsIntoBoundary" },{ "trigger": "UIRefreshControl \t UIRefreshControl", "contents": "UIRefreshControl" },{ "trigger": "prepareForReuse \t func UICollectionReusableView -> void" , "contents": "prepareForReuse(${1:})" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldUpdateFocusInContext:${2:UICollectionViewFocusUpdateContext})" },{ "trigger": "NSObject.accessibilityElementAtIndex \t class NSObject -> AnyObject?
" , "contents": "NSObject.accessibilityElementAtIndex(${1:Int})" },{ "trigger": "tabBar \t func unknown -> void" , "contents": "tabBar(${1:UITabBar}, didBeginCustomizingItems:${2:[UITabBarItem]})" },{ "trigger": "shadowOffset \t CGSize", "contents": "shadowOffset" },{ "trigger": "numberOfTouches \t func UIGestureRecognizer -> Int
" , "contents": "numberOfTouches(${1:})" },{ "trigger": "navigationBar \t func unknown -> BOOL
" , "contents": "navigationBar(${1:UINavigationBar}, shouldPopItem:${2:UINavigationItem})" },{ "trigger": "flipsForRightToLeftLayoutDirection \t BOOL", "contents": "flipsForRightToLeftLayoutDirection" },{ "trigger": "UIFontDescriptorFaceAttribute \t String", "contents": "UIFontDescriptorFaceAttribute" },{ "trigger": "preciseLocationInView \t func UITouch -> CGPoint
" , "contents": "preciseLocationInView(${1:UIView?})" },{ "trigger": "comparePosition \t func UITextView -> NSComparisonResult
" , "contents": "comparePosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "encodeWithCoder \t func UIBezierPath -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "UIInterfaceOrientationMask \t UIInterfaceOrientationMask", "contents": "UIInterfaceOrientationMask" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, shouldAllowExtensionPointIdentifier:${2:String})" },{ "trigger": "presentedSubitemDidChangeAtURL \t func UIDocument -> void" , "contents": "presentedSubitemDidChangeAtURL(${1:NSURL})" },{ "trigger": "navigationItem \t UINavigationItem", "contents": "navigationItem" },{ "trigger": "makeTextWritingDirectionRightToLeft \t func NSObject -> void" , "contents": "makeTextWritingDirectionRightToLeft(${1:AnyObject?})" },{ "trigger": "CalculationModeDiscrete \t UIViewKeyframeAnimationOptions", "contents": "CalculationModeDiscrete" },{ "trigger": "UITraitCollection.traitCollectionWithForceTouchCapability \t class UITraitCollection -> UITraitCollection
" , "contents": "UITraitCollection.traitCollectionWithForceTouchCapability(${1:UIForceTouchCapability})" },{ "trigger": "convertRect \t func UIView -> CGRect
" , "contents": "convertRect(${1:CGRect}, fromCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, willContinueUserActivityWithType:${2:String})" },{ "trigger": "containerView \t UIView", "contents": "containerView" },{ "trigger": "collectionView \t func UICollectionViewController -> UICollectionViewTransitionLayout
" , "contents": "collectionView(${1:UICollectionView}, transitionLayoutForOldLayout:${2:UICollectionViewLayout}, newLayout:${3:UICollectionViewLayout})" },{ "trigger": "UIStoryboardSegue.segueWithIdentifier \t class UIStoryboardSegue -> Void" , "contents": "UIStoryboardSegue.segueWithIdentifier(${1:String?}, source:${2:UIViewController}, destination:${3:UIViewController}, performHandler:${4: -> Void})" },{ "trigger": "active \t BOOL", "contents": "active" },{ "trigger": "preferredStatusBarUpdateAnimation \t func UIViewController -> UIStatusBarAnimation
" , "contents": "preferredStatusBarUpdateAnimation(${1:})" },{ "trigger": "NSValue.valueWithCGVector \t class NSValue -> NSValue
" , "contents": "NSValue.valueWithCGVector(${1:CGVector})" },{ "trigger": "textLabel \t UILabel", "contents": "textLabel" },{ "trigger": "layoutManager \t NSLayoutManager", "contents": "layoutManager" },{ "trigger": "selectionStyle \t UITableViewCellSelectionStyle", "contents": "selectionStyle" },{ "trigger": "UIPresentationController \t UIPresentationController", "contents": "UIPresentationController" },{ "trigger": "UIImage.imageWithData \t class UIImage -> UIImage?
" , "contents": "UIImage.imageWithData(${1:NSData})" },{ "trigger": "ApplicationReserved \t UIControlEvents", "contents": "ApplicationReserved" },{ "trigger": "insertSegmentWithTitle \t func UISegmentedControl -> void" , "contents": "insertSegmentWithTitle(${1:String?}, atIndex:${2:Int}, animated:${3:BOOL})" },{ "trigger": "UIAccessibilitySpeakScreenStatusDidChangeNotification \t String", "contents": "UIAccessibilitySpeakScreenStatusDidChangeNotification" },{ "trigger": "viewDidAppear \t func UIViewController -> void" , "contents": "viewDidAppear(${1:BOOL})" },{ "trigger": "popViewControllerAnimated \t func UINavigationController -> UIViewController?
" , "contents": "popViewControllerAnimated(${1:BOOL})" },{ "trigger": "allPresses \t func UIPressesEvent -> Set UIPress 
" , "contents": "allPresses(${1:})" },{ "trigger": "CalendarEvent \t UIDataDetectorTypes", "contents": "CalendarEvent" },{ "trigger": "shouldChangeTextInRange \t func UITextField -> BOOL
" , "contents": "shouldChangeTextInRange(${1:UITextRange}, replacementText:${2:String})" },{ "trigger": "replaceRange \t func UITextView -> void" , "contents": "replaceRange(${1:UITextRange}, withText:${2:String})" },{ "trigger": "dismissMenuAnimated \t func UIDocumentInteractionController -> void" , "contents": "dismissMenuAnimated(${1:BOOL})" },{ "trigger": "UIMutableUserNotificationCategory \t UIMutableUserNotificationCategory", "contents": "UIMutableUserNotificationCategory" },{ "trigger": "UITabBar \t UITabBar", "contents": "UITabBar" },{ "trigger": "documentStorageURL \t NSURL", "contents": "documentStorageURL" },{ "trigger": "Alert \t UIKeyboardAppearance", "contents": "Alert" },{ "trigger": "bounces \t BOOL", "contents": "bounces" },{ "trigger": "didTransitionFromLayout \t func UICollectionReusableView -> void" , "contents": "didTransitionFromLayout(${1:UICollectionViewLayout}, toLayout:${2:UICollectionViewLayout})" },{ "trigger": "activityViewController \t func UIActivityItemProvider -> AnyObject?
" , "contents": "activityViewController(${1:UIActivityViewController}, itemForActivityType:${2:String})" },{ "trigger": "fileType \t String", "contents": "fileType" },{ "trigger": "contentStretch \t CGRect", "contents": "contentStretch" },{ "trigger": "contentCompressionResistancePriorityForAxis \t func UIView -> UILayoutPriority
" , "contents": "contentCompressionResistancePriorityForAxis(${1:UILayoutConstraintAxis})" },{ "trigger": "indexPathForPreferredFocusedViewInCollectionView \t func UICollectionViewController -> NSIndexPath?
" , "contents": "indexPathForPreferredFocusedViewInCollectionView(${1:UICollectionView})" },{ "trigger": "beginTrackingWithTouch \t func UIControl -> BOOL
" , "contents": "beginTrackingWithTouch(${1:UITouch}, withEvent:${2:UIEvent?})" },{ "trigger": "UIAccessibilityInvertColorsStatusDidChangeNotification \t String", "contents": "UIAccessibilityInvertColorsStatusDidChangeNotification" },{ "trigger": "UITableViewCellSeparatorStyle \t UITableViewCellSeparatorStyle", "contents": "UITableViewCellSeparatorStyle" },{ "trigger": "flashScrollIndicators \t func UIScrollView -> void" , "contents": "flashScrollIndicators(${1:})" },{ "trigger": "UIPageViewController \t UIPageViewController", "contents": "UIPageViewController" },{ "trigger": "UIView.requiresConstraintBasedLayout \t class UIView -> BOOL
" , "contents": "UIView.requiresConstraintBasedLayout(${1:})" },{ "trigger": "UITextView \t UITextView", "contents": "UITextView" },{ "trigger": "Disabled \t UIControlState", "contents": "Disabled" },{ "trigger": "endTrackingWithTouch \t func UIControl -> void" , "contents": "endTrackingWithTouch(${1:UITouch?}, withEvent:${2:UIEvent?})" },{ "trigger": "tableView \t func UITableViewController -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldShowMenuForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "edited \t func NSTextStorage -> void" , "contents": "edited(${1:NSTextStorageEditActions}, range:${2:NSRange}, changeInLength:${3:Int})" },{ "trigger": "allowsEditing \t BOOL", "contents": "allowsEditing" },{ "trigger": "tabBar \t func unknown -> void" , "contents": "tabBar(${1:UITabBar}, willBeginCustomizingItems:${2:[UITabBarItem]})" },{ "trigger": "NSTextTab.columnTerminatorsForLocale \t class NSTextTab -> NSCharacterSet
" , "contents": "NSTextTab.columnTerminatorsForLocale(${1:NSLocale?})" },{ "trigger": "scrollViewDidScrollToTop \t func UICollectionViewController -> void" , "contents": "scrollViewDidScrollToTop(${1:UIScrollView})" },{ "trigger": "writeContents \t func UIDocument -> void" , "contents": "writeContents(${1:AnyObject}, toURL:${2:NSURL}, forSaveOperation:${3:UIDocumentSaveOperation}, originalContentsURL:${4:NSURL?})" },{ "trigger": "UICollectionViewLayoutAttributes.layoutAttributesForCellWithIndexPath \t class UICollectionViewLayoutAttributes -> Self
" , "contents": "UICollectionViewLayoutAttributes.layoutAttributesForCellWithIndexPath(${1:NSIndexPath})" },{ "trigger": "goForward \t func UIWebView -> void" , "contents": "goForward(${1:})" },{ "trigger": "sourceRect \t CGRect", "contents": "sourceRect" },{ "trigger": "UIFocusHeading \t UIFocusHeading", "contents": "UIFocusHeading" },{ "trigger": "presentationStyle \t UIModalPresentationStyle", "contents": "presentationStyle" },{ "trigger": "titleLabel \t UILabel", "contents": "titleLabel" },{ "trigger": "UITextInputCurrentInputModeDidChangeNotification \t String", "contents": "UITextInputCurrentInputModeDidChangeNotification" },{ "trigger": "presentationIndexForPageViewController \t func unknown -> Int
" , "contents": "presentationIndexForPageViewController(${1:UIPageViewController})" },{ "trigger": "pageViewController \t func unknown -> UIPageViewControllerSpineLocation
" , "contents": "pageViewController(${1:UIPageViewController}, spineLocationForInterfaceOrientation:${2:UIInterfaceOrientation})" },{ "trigger": "stepValue \t Double", "contents": "stepValue" },{ "trigger": "selectionDidChange \t func unknown -> void" , "contents": "selectionDidChange(${1:UITextInput?})" },{ "trigger": "style \t UITableViewRowActionStyle", "contents": "style" },{ "trigger": "enablesReturnKeyAutomatically \t BOOL", "contents": "enablesReturnKeyAutomatically" },{ "trigger": "reloadData \t func UICollectionView -> void" , "contents": "reloadData(${1:})" },{ "trigger": "UIAccessibilityTraitButton \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitButton" },{ "trigger": "UIWindowDidBecomeHiddenNotification \t String", "contents": "UIWindowDidBecomeHiddenNotification" },{ "trigger": "sizeWithFont \t func NSString -> CGSize
" , "contents": "sizeWithFont(${1:UIFont!}, constrainedToSize:${2:CGSize})" },{ "trigger": "maximumValueImage \t UIImage", "contents": "maximumValueImage" },{ "trigger": "setMarkedText \t func unknown -> void" , "contents": "setMarkedText(${1:String?}, selectedRange:${2:NSRange})" },{ "trigger": "attributedPlaceholder \t NSAttributedString", "contents": "attributedPlaceholder" },{ "trigger": "UISemanticContentAttribute \t UISemanticContentAttribute", "contents": "UISemanticContentAttribute" },{ "trigger": "UIFontDescriptorFamilyAttribute \t String", "contents": "UIFontDescriptorFamilyAttribute" },{ "trigger": "UIFont \t UIFont", "contents": "UIFont" },{ "trigger": "AlignAllTrailing \t NSLayoutFormatOptions", "contents": "AlignAllTrailing" },{ "trigger": "UIFontDescriptorMatrixAttribute \t String", "contents": "UIFontDescriptorMatrixAttribute" },{ "trigger": "backgroundImageForState \t func UIStepper -> UIImage?
" , "contents": "backgroundImageForState(${1:UIControlState})" },{ "trigger": "contentRectForBounds \t func UIButton -> CGRect
" , "contents": "contentRectForBounds(${1:CGRect})" },{ "trigger": "dynamicAnimatorDidPause \t func unknown -> void" , "contents": "dynamicAnimatorDidPause(${1:UIDynamicAnimator})" },{ "trigger": "moveToPoint \t func UIBezierPath -> void" , "contents": "moveToPoint(${1:CGPoint})" },{ "trigger": "textView \t func unknown -> BOOL
" , "contents": "textView(${1:UITextView}, shouldInteractWithTextAttachment:${2:NSTextAttachment}, inRange:${3:NSRange})" },{ "trigger": "CurveEaseInOut \t UIViewAnimationOptions", "contents": "CurveEaseInOut" },{ "trigger": "mediaPlaybackAllowsAirPlay \t BOOL", "contents": "mediaPlaybackAllowsAirPlay" },{ "trigger": "UIActivityTypeAssignToContact \t String", "contents": "UIActivityTypeAssignToContact" },{ "trigger": "UINavigationControllerHideShowBarDuration \t CGFloat", "contents": "UINavigationControllerHideShowBarDuration" },{ "trigger": "setNeedsFocusUpdate \t func UIViewController -> void" , "contents": "setNeedsFocusUpdate(${1:})" },{ "trigger": "widthAnchor \t NSLayoutDimension", "contents": "widthAnchor" },{ "trigger": "convertPoint \t func UIView -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, toCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "removeMotionEffect \t func UIView -> void" , "contents": "removeMotionEffect(${1:UIMotionEffect})" },{ "trigger": "UIGraphicsSetPDFContextDestinationForRect \t func UIGravityBehavior -> void" , "contents": "UIGraphicsSetPDFContextDestinationForRect(${1:String}, _:${2:CGRect})" },{ "trigger": "setLeftBarButtonItem \t func UINavigationItem -> void" , "contents": "setLeftBarButtonItem(${1:UIBarButtonItem?}, animated:${2:BOOL})" },{ "trigger": "tableView \t func UITableViewController -> UITableViewCellEditingStyle
" , "contents": "tableView(${1:UITableView}, editingStyleForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIView.appearanceForTraitCollection \t class UIView -> Self
" , "contents": "UIView.appearanceForTraitCollection(${1:UITraitCollection}, whenContainedInInstancesOfClasses:${2:[AnyObject.Type]})" },{ "trigger": "UILexiconEntry \t UILexiconEntry", "contents": "UILexiconEntry" },{ "trigger": "presentFromRect \t func UIPrintInteractionController -> BOOL
" , "contents": "presentFromRect(${1:CGRect}, inView:${2:UIView}, animated:${3:BOOL}, completionHandler:${4:UIPrintInteractionCompletionHandler?})" },{ "trigger": "UI_USER_INTERFACE_IDIOM \t func CIColor -> UIUserInterfaceIdiom
" , "contents": "UI_USER_INTERFACE_IDIOM(${1:})" },{ "trigger": "canGoForward \t BOOL", "contents": "canGoForward" },{ "trigger": "NSShadow \t NSShadow", "contents": "NSShadow" },{ "trigger": "NSFileProviderExtension.writePlaceholderAtURL \t class NSFileProviderExtension -> void" , "contents": "NSFileProviderExtension.writePlaceholderAtURL(${1:NSURL}, withMetadata:${2:[NSObject })" },{ "trigger": "UIFieldBehavior.springField \t class UIFieldBehavior -> Self
" , "contents": "UIFieldBehavior.springField(${1:})" },{ "trigger": "preferredDisplayMode \t UISplitViewControllerDisplayMode", "contents": "preferredDisplayMode" },{ "trigger": "printInteractionController \t func unknown -> UIPrinterCutterBehavior
" , "contents": "printInteractionController(${1:UIPrintInteractionController}, chooseCutterBehavior:${2:[AnyObject]})" },{ "trigger": "NSObject.accessibilityAssistiveTechnologyFocusedIdentifiers \t class NSObject -> Set String ?
" , "contents": "NSObject.accessibilityAssistiveTechnologyFocusedIdentifiers(${1:})" },{ "trigger": "convertRect \t func UIView -> CGRect
" , "contents": "convertRect(${1:CGRect}, toView:${2:UIView?})" },{ "trigger": "invalidationContextForPreferredLayoutAttributes \t func UICollectionViewLayout -> UICollectionViewLayoutInvalidationContext
" , "contents": "invalidationContextForPreferredLayoutAttributes(${1:UICollectionViewLayoutAttributes}, withOriginalAttributes:${2:UICollectionViewLayoutAttributes})" },{ "trigger": "UIImage \t UIImage", "contents": "UIImage" },{ "trigger": "fontAttributes \t func UIFontDescriptor -> [String" , "contents": "fontAttributes(${1:})" },{ "trigger": "getFirstUnlaidCharacterIndex \t func NSLayoutManager -> void" , "contents": "getFirstUnlaidCharacterIndex(${1:UnsafeMutablePointer<Int>}, glyphIndex:${2:UnsafeMutablePointer<Int>})" },{ "trigger": "imageForBounds \t func unknown -> UIImage?
" , "contents": "imageForBounds(${1:CGRect}, textContainer:${2:NSTextContainer?}, characterIndex:${3:Int})" },{ "trigger": "None \t UIUserNotificationType", "contents": "None" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, didUpdateFocusInContext:${2:UICollectionViewFocusUpdateContext}, withAnimationCoordinator:${3:UIFocusAnimationCoordinator})" },{ "trigger": "dismissWithClickedButtonIndex \t func UIAlertView -> void" , "contents": "dismissWithClickedButtonIndex(${1:Int}, animated:${2:BOOL})" },{ "trigger": "tableView \t func unknown -> String?
" , "contents": "tableView(${1:UITableView}, titleForHeaderInSection:${2:Int})" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldSelectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "lineFragmentUsedRectForGlyphAtIndex \t func NSLayoutManager -> CGRect
" , "contents": "lineFragmentUsedRectForGlyphAtIndex(${1:Int}, effectiveRange:${2:NSRangePointer})" },{ "trigger": "sourceView \t UIView", "contents": "sourceView" },{ "trigger": "decelerating \t BOOL", "contents": "decelerating" },{ "trigger": "UIAccessibilityTraitSummaryElement \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitSummaryElement" },{ "trigger": "UIFloatRangeZero \t UIFloatRange", "contents": "UIFloatRangeZero" },{ "trigger": "collectionView \t func UICollectionViewController -> NSIndexPath
" , "contents": "collectionView(${1:UICollectionView}, targetIndexPathForMoveFromItemAtIndexPath:${2:NSIndexPath}, toProposedIndexPath:${3:NSIndexPath})" },{ "trigger": "UISegmentedControlSegment \t UISegmentedControlSegment", "contents": "UISegmentedControlSegment" },{ "trigger": "drawRect \t func UIView -> void" , "contents": "drawRect(${1:CGRect})" },{ "trigger": "authenticationRequired \t BOOL", "contents": "authenticationRequired" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didEndEditingRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIActivityIndicatorView \t UIActivityIndicatorView", "contents": "UIActivityIndicatorView" },{ "trigger": "separatorInset \t UIEdgeInsets", "contents": "separatorInset" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, didHighlightItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "setDividerImage \t func UIStepper -> void" , "contents": "setDividerImage(${1:UIImage?}, forLeftSegmentState:${2:UIControlState}, rightSegmentState:${3:UIControlState})" },{ "trigger": "beginRequestWithExtensionContext \t func UIViewController -> void" , "contents": "beginRequestWithExtensionContext(${1:NSExtensionContext})" },{ "trigger": "NSLayoutYAxisAnchor \t NSLayoutYAxisAnchor", "contents": "NSLayoutYAxisAnchor" },{ "trigger": "completionCurve \t UIViewAnimationCurve", "contents": "completionCurve" },{ "trigger": "sizeThatFits \t func UIView -> CGSize
" , "contents": "sizeThatFits(${1:CGSize})" },{ "trigger": "NSLayoutDimension \t NSLayoutDimension", "contents": "NSLayoutDimension" },{ "trigger": "UICollectionViewScrollPosition \t UICollectionViewScrollPosition", "contents": "UICollectionViewScrollPosition" },{ "trigger": "UIFontWeightSemibold \t CGFloat", "contents": "UIFontWeightSemibold" },{ "trigger": "autosaveWithCompletionHandler \t func UIDocument -> Void?
" , "contents": "autosaveWithCompletionHandler(${1:BOOL -> Void?})" },{ "trigger": "refreshControl \t UIRefreshControl", "contents": "refreshControl" },{ "trigger": "left \t CGFloat", "contents": "left" },{ "trigger": "Down \t UISwipeGestureRecognizerDirection", "contents": "Down" },{ "trigger": "leftView \t UIView", "contents": "leftView" },{ "trigger": "presentedViewController \t UIViewController", "contents": "presentedViewController" },{ "trigger": "Azimuth \t UITouchProperties", "contents": "Azimuth" },{ "trigger": "TraitVertical \t UIFontDescriptorSymbolicTraits", "contents": "TraitVertical" },{ "trigger": "UIFieldBehavior.fieldWithEvaluationBlock \t class UIFieldBehavior -> CGVector" , "contents": "UIFieldBehavior.fieldWithEvaluationBlock(${1:UIFieldBehavior}, CGPoint:${2:}, CGVector:${3:}, CGFloat:${4:}, CGFloat:${5:}, NSTimeInterval:${6:})" },{ "trigger": "searchBarResultsListButtonClicked \t func unknown -> void" , "contents": "searchBarResultsListButtonClicked(${1:UISearchBar})" },{ "trigger": "textView \t func unknown -> BOOL
" , "contents": "textView(${1:UITextView}, shouldInteractWithURL:${2:NSURL}, inRange:${3:NSRange})" },{ "trigger": "showDetailViewController \t func UIViewController -> void" , "contents": "showDetailViewController(${1:UIViewController}, sender:${2:AnyObject?})" },{ "trigger": "didRotateFromInterfaceOrientation \t func UIViewController -> void" , "contents": "didRotateFromInterfaceOrientation(${1:UIInterfaceOrientation})" },{ "trigger": "UIAccessibilityTraitLink \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitLink" },{ "trigger": "isFirstResponder \t func UIResponder -> BOOL
" , "contents": "isFirstResponder(${1:})" },{ "trigger": "UIBarPosition \t UIBarPosition", "contents": "UIBarPosition" },{ "trigger": "UIAccessibilityResumeAssistiveTechnologyNotification \t UIAccessibilityNotifications", "contents": "UIAccessibilityResumeAssistiveTechnologyNotification" },{ "trigger": "deleteItemsAtIndexPaths \t func UICollectionView -> void" , "contents": "deleteItemsAtIndexPaths(${1:[NSIndexPath]})" },{ "trigger": "writeAdditionalContent \t func UIManagedDocument -> void" , "contents": "writeAdditionalContent(${1:AnyObject}, toURL:${2:NSURL}, originalContentsURL:${3:NSURL?})" },{ "trigger": "setZoomScale \t func UIScrollView -> void" , "contents": "setZoomScale(${1:CGFloat}, animated:${2:BOOL})" },{ "trigger": "actionSheetCancel \t func unknown -> void" , "contents": "actionSheetCancel(${1:UIActionSheet})" },{ "trigger": "accessibilityNavigationStyle \t UIAccessibilityNavigationStyle", "contents": "accessibilityNavigationStyle" },{ "trigger": "UIWebPaginationBreakingMode \t UIWebPaginationBreakingMode", "contents": "UIWebPaginationBreakingMode" },{ "trigger": "getRed \t func UIColor -> BOOL
" , "contents": "getRed(${1:UnsafeMutablePointer<CGFloat>}, green:${2:UnsafeMutablePointer<CGFloat>}, blue:${3:UnsafeMutablePointer<CGFloat>}, alpha:${4:UnsafeMutablePointer<CGFloat>})" },{ "trigger": "AlignAllRight \t NSLayoutFormatOptions", "contents": "AlignAllRight" },{ "trigger": "NSTabColumnTerminatorsAttributeName \t String", "contents": "NSTabColumnTerminatorsAttributeName" },{ "trigger": "searchResultsTableView \t UITableView", "contents": "searchResultsTableView" },{ "trigger": "UIGraphicsEndImageContext \t func UIGravityBehavior -> void" , "contents": "UIGraphicsEndImageContext(${1:})" },{ "trigger": "adaptivePresentationStyleForTraitCollection \t func UIPresentationController -> UIModalPresentationStyle
" , "contents": "adaptivePresentationStyleForTraitCollection(${1:UITraitCollection})" },{ "trigger": "UIApplicationDidChangeStatusBarOrientationNotification \t String", "contents": "UIApplicationDidChangeStatusBarOrientationNotification" },{ "trigger": "NSTextAlignment \t NSTextAlignment", "contents": "NSTextAlignment" },{ "trigger": "definesPresentationContext \t BOOL", "contents": "definesPresentationContext" },{ "trigger": "cancelLocalNotification \t func UIApplication -> void" , "contents": "cancelLocalNotification(${1:UILocalNotification})" },{ "trigger": "UIVibrancyEffect \t UIVibrancyEffect", "contents": "UIVibrancyEffect" },{ "trigger": "requireGestureRecognizerToFail \t func UIGestureRecognizer -> void" , "contents": "requireGestureRecognizerToFail(${1:UIGestureRecognizer})" },{ "trigger": "tableView \t func UIPickerView -> BOOL
" , "contents": "tableView(${1:UITableView}, canMoveRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "paragraphSpacingBefore \t CGFloat", "contents": "paragraphSpacingBefore" },{ "trigger": "localizedSubtitle \t String", "contents": "localizedSubtitle" },{ "trigger": "removeItem \t func UICollisionBehavior -> void" , "contents": "removeItem(${1:UIDynamicItem})" },{ "trigger": "flatness \t CGFloat", "contents": "flatness" },{ "trigger": "dataSource \t UITableViewDataSource", "contents": "dataSource" },{ "trigger": "accessibilityElementDidBecomeFocused \t func NSObject -> void" , "contents": "accessibilityElementDidBecomeFocused(${1:})" },{ "trigger": "drawStrikethroughForGlyphRange \t func NSLayoutManager -> void" , "contents": "drawStrikethroughForGlyphRange(${1:NSRange}, strikethroughType:${2:NSUnderlineStyle}, baselineOffset:${3:CGFloat}, lineFragmentRect:${4:CGRect}, lineFragmentGlyphRange:${5:NSRange}, containerOrigin:${6:CGPoint})" },{ "trigger": "contentHuggingPriorityForAxis \t func UIView -> UILayoutPriority
" , "contents": "contentHuggingPriorityForAxis(${1:UILayoutConstraintAxis})" },{ "trigger": "CGPath \t CGPath", "contents": "CGPath" },{ "trigger": "drawInRect \t func NSString -> CGSize
" , "contents": "drawInRect(${1:CGRect}, withFont:${2:UIFont!}, lineBreakMode:${3:NSLineBreakMode}, alignment:${4:NSTextAlignment})" },{ "trigger": "Address \t UIDataDetectorTypes", "contents": "Address" },{ "trigger": "glyphRangeForTextContainer \t func NSLayoutManager -> NSRange
" , "contents": "glyphRangeForTextContainer(${1:NSTextContainer})" },{ "trigger": "attributedTitleForState \t func UIButton -> NSAttributedString?
" , "contents": "attributedTitleForState(${1:UIControlState})" },{ "trigger": "UIBarButtonItemStyle \t UIBarButtonItemStyle", "contents": "UIBarButtonItemStyle" },{ "trigger": "end \t UITextPosition", "contents": "end" },{ "trigger": "setValue \t func UIPasteboard -> void" , "contents": "setValue(${1:AnyObject}, forPasteboardType:${2:String})" },{ "trigger": "scrollViewShouldScrollToTop \t func unknown -> BOOL
" , "contents": "scrollViewShouldScrollToTop(${1:UIScrollView})" },{ "trigger": "selectionWillChange \t func unknown -> void" , "contents": "selectionWillChange(${1:UITextInput?})" },{ "trigger": "NSObject.accessibilityActivate \t class NSObject -> BOOL
" , "contents": "NSObject.accessibilityActivate(${1:})" },{ "trigger": "UIWebViewNavigationType \t UIWebViewNavigationType", "contents": "UIWebViewNavigationType" },{ "trigger": "characterRangeAtPoint \t func unknown -> UITextRange?
" , "contents": "characterRangeAtPoint(${1:CGPoint})" },{ "trigger": "UITextInputStringTokenizer \t UITextInputStringTokenizer", "contents": "UITextInputStringTokenizer" },{ "trigger": "textDidChange \t func unknown -> void" , "contents": "textDidChange(${1:UITextInput?})" },{ "trigger": "familyName \t String", "contents": "familyName" },{ "trigger": "scheduleLocalNotification \t func UIApplication -> void" , "contents": "scheduleLocalNotification(${1:UILocalNotification})" },{ "trigger": "tabBarControllerSupportedInterfaceOrientations \t func unknown -> UIInterfaceOrientationMask
" , "contents": "tabBarControllerSupportedInterfaceOrientations(${1:UITabBarController})" },{ "trigger": "UIPageViewControllerTransitionStyle \t UIPageViewControllerTransitionStyle", "contents": "UIPageViewControllerTransitionStyle" },{ "trigger": "UIApplicationDidEnterBackgroundNotification \t String", "contents": "UIApplicationDidEnterBackgroundNotification" },{ "trigger": "UIEdgeInsetsEqualToEdgeInsets \t func UIEvent -> BOOL
" , "contents": "UIEdgeInsetsEqualToEdgeInsets(${1:UIEdgeInsets}, _:${2:UIEdgeInsets})" },{ "trigger": "NSViewSizeDocumentAttribute \t String", "contents": "NSViewSizeDocumentAttribute" },{ "trigger": "UISplitViewController \t UISplitViewController", "contents": "UISplitViewController" },{ "trigger": "UIAccessibilityConvertFrameToScreenCoordinates \t func UIAccessibilityCustomAction -> CGRect
" , "contents": "UIAccessibilityConvertFrameToScreenCoordinates(${1:CGRect}, _:${2:UIView})" },{ "trigger": "accessibilityLabel \t String", "contents": "accessibilityLabel" },{ "trigger": "addChildViewController \t func UIViewController -> void" , "contents": "addChildViewController(${1:UIViewController})" },{ "trigger": "UIDynamicItemGroup \t UIDynamicItemGroup", "contents": "UIDynamicItemGroup" },{ "trigger": "prepareForTransitionFromLayout \t func UICollectionViewLayout -> void" , "contents": "prepareForTransitionFromLayout(${1:UICollectionViewLayout})" },{ "trigger": "textRangeFromPosition \t func unknown -> UITextRange?
" , "contents": "textRangeFromPosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "LandscapeLeft \t UIInterfaceOrientationMask", "contents": "LandscapeLeft" },{ "trigger": "zIndex \t Int", "contents": "zIndex" },{ "trigger": "layoutAttributesForItemAtIndexPath \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForItemAtIndexPath(${1:NSIndexPath})" },{ "trigger": "None \t UICollectionViewScrollPosition", "contents": "None" },{ "trigger": "FlexibleRightMargin \t UIViewAutoresizing", "contents": "FlexibleRightMargin" },{ "trigger": "UISlider \t UISlider", "contents": "UISlider" },{ "trigger": "angle \t CGFloat", "contents": "angle" },{ "trigger": "UIStackViewDistribution \t UIStackViewDistribution", "contents": "UIStackViewDistribution" },{ "trigger": "tableView \t func unknown -> CGFloat
" , "contents": "tableView(${1:UITableView}, estimatedHeightForFooterInSection:${2:Int})" },{ "trigger": "setContentOffset \t func UIScrollView -> void" , "contents": "setContentOffset(${1:CGPoint}, animated:${2:BOOL})" },{ "trigger": "setBackgroundVerticalPositionAdjustment \t func UIBarButtonItem -> void" , "contents": "setBackgroundVerticalPositionAdjustment(${1:CGFloat}, forBarMetrics:${2:UIBarMetrics})" },{ "trigger": "on \t BOOL", "contents": "on" },{ "trigger": "layoutManager \t func unknown -> BOOL
" , "contents": "layoutManager(${1:NSLayoutManager}, shouldSetLineFragmentRect:${2:UnsafeMutablePointer<CGRect>}, lineFragmentUsedRect:${3:UnsafeMutablePointer<CGRect>}, baselineOffset:${4:UnsafeMutablePointer<CGFloat>}, inTextContainer:${5:NSTextContainer}, forGlyphRange:${6:NSRange})" },{ "trigger": "UINib.nibWithNibName \t class UINib -> UINib
" , "contents": "UINib.nibWithNibName(${1:String}, bundle:${2:NSBundle?})" },{ "trigger": "addItem \t func UIPushBehavior -> void" , "contents": "addItem(${1:UIDynamicItem})" },{ "trigger": "firstItem \t AnyObject", "contents": "firstItem" },{ "trigger": "customView \t UIView", "contents": "customView" },{ "trigger": "searchBar \t func unknown -> void" , "contents": "searchBar(${1:UISearchBar}, textDidChange:${2:String})" },{ "trigger": "copyWithZone \t func UIColor -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "lineHeightMultiple \t CGFloat", "contents": "lineHeightMultiple" },{ "trigger": "presentedItemURL \t NSURL", "contents": "presentedItemURL" },{ "trigger": "UITextFieldTextDidBeginEditingNotification \t String", "contents": "UITextFieldTextDidBeginEditingNotification" },{ "trigger": "showFromToolbar \t func UIActionSheet -> void" , "contents": "showFromToolbar(${1:UIToolbar})" },{ "trigger": "UIUserInterfaceSizeClass \t UIUserInterfaceSizeClass", "contents": "UIUserInterfaceSizeClass" },{ "trigger": "Left \t UIFocusHeading", "contents": "Left" },{ "trigger": "repeatInterval \t NSCalendarUnit", "contents": "repeatInterval" },{ "trigger": "Application \t UIControlState", "contents": "Application" },{ "trigger": "UIApplicationWillResignActiveNotification \t String", "contents": "UIApplicationWillResignActiveNotification" },{ "trigger": "UICollectionViewLayout \t UICollectionViewLayout", "contents": "UICollectionViewLayout" },{ "trigger": "presentOpenInMenuFromBarButtonItem \t func UIDocumentInteractionController -> BOOL
" , "contents": "presentOpenInMenuFromBarButtonItem(${1:UIBarButtonItem}, animated:${2:BOOL})" },{ "trigger": "alertViewShouldEnableFirstOtherButton \t func unknown -> BOOL
" , "contents": "alertViewShouldEnableFirstOtherButton(${1:UIAlertView})" },{ "trigger": "NSKernAttributeName \t String", "contents": "NSKernAttributeName" },{ "trigger": "UILabel \t UILabel", "contents": "UILabel" },{ "trigger": "numberOfButtons \t Int", "contents": "numberOfButtons" },{ "trigger": "showFromRect \t func UIActionSheet -> void" , "contents": "showFromRect(${1:CGRect}, inView:${2:UIView}, animated:${3:BOOL})" },{ "trigger": "NumericPad \t UIKeyModifierFlags", "contents": "NumericPad" },{ "trigger": "NSTextStorageWillProcessEditingNotification \t String", "contents": "NSTextStorageWillProcessEditingNotification" },{ "trigger": "UIDocumentMenuOrder \t UIDocumentMenuOrder", "contents": "UIDocumentMenuOrder" },{ "trigger": "UIImagePickerControllerOriginalImage \t String", "contents": "UIImagePickerControllerOriginalImage" },{ "trigger": "addLayoutManager \t func NSTextStorage -> void" , "contents": "addLayoutManager(${1:NSLayoutManager})" },{ "trigger": "icon \t UIApplicationShortcutIcon", "contents": "icon" },{ "trigger": "closestPositionToPoint \t func UITextField -> UITextPosition?
" , "contents": "closestPositionToPoint(${1:CGPoint})" },{ "trigger": "splitViewController \t func unknown -> void" , "contents": "splitViewController(${1:UISplitViewController}, willChangeToDisplayMode:${2:UISplitViewControllerDisplayMode})" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, canFocusItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "didPresentActionSheet \t func UIDocumentInteractionController -> void" , "contents": "didPresentActionSheet(${1:UIActionSheet})" },{ "trigger": "NSUnderlineColorAttributeName \t String", "contents": "NSUnderlineColorAttributeName" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didUnhighlightRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "barTintColor \t UIColor", "contents": "barTintColor" },{ "trigger": "completionsForPartialWordRange \t func UITextChecker -> [AnyObject]?
" , "contents": "completionsForPartialWordRange(${1:NSRange}, inString:${2:String?}, language:${3:String})" },{ "trigger": "rectForRowAtIndexPath \t func UITableView -> CGRect
" , "contents": "rectForRowAtIndexPath(${1:NSIndexPath})" },{ "trigger": "tableView \t func unknown -> String?
" , "contents": "tableView(${1:UITableView}, titleForFooterInSection:${2:Int})" },{ "trigger": "insertTextContainer \t func NSLayoutManager -> void" , "contents": "insertTextContainer(${1:NSTextContainer}, atIndex:${2:Int})" },{ "trigger": "UIModalPresentationStyle \t UIModalPresentationStyle", "contents": "UIModalPresentationStyle" },{ "trigger": "copyWithZone \t func UILocalNotification -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "addMotionEffect \t func UIView -> void" , "contents": "addMotionEffect(${1:UIMotionEffect})" },{ "trigger": "allowedChildViewControllersForUnwindingFromSource \t func UIViewController -> [UIViewController]
" , "contents": "allowedChildViewControllersForUnwindingFromSource(${1:UIStoryboardUnwindSegueSource})" },{ "trigger": "NSBackgroundColorAttributeName \t String", "contents": "NSBackgroundColorAttributeName" },{ "trigger": "splitViewControllerSupportedInterfaceOrientations \t func unknown -> UIInterfaceOrientationMask
" , "contents": "splitViewControllerSupportedInterfaceOrientations(${1:UISplitViewController})" },{ "trigger": "UIGravityBehavior \t UIGravityBehavior", "contents": "UIGravityBehavior" },{ "trigger": "modalInPopover \t BOOL", "contents": "modalInPopover" },{ "trigger": "finalFrameForViewController \t func unknown -> CGRect
" , "contents": "finalFrameForViewController(${1:UIViewController})" },{ "trigger": "activityViewController \t func unknown -> String
" , "contents": "activityViewController(${1:UIActivityViewController}, dataTypeIdentifierForActivityType:${2:String?})" },{ "trigger": "UIUserNotificationAction \t UIUserNotificationAction", "contents": "UIUserNotificationAction" },{ "trigger": "currentTitle \t String", "contents": "currentTitle" },{ "trigger": "rightBarButtonItem \t UIBarButtonItem", "contents": "rightBarButtonItem" },{ "trigger": "UIPinchGestureRecognizer \t UIPinchGestureRecognizer", "contents": "UIPinchGestureRecognizer" },{ "trigger": "didAnimateFirstHalfOfRotationToInterfaceOrientation \t func UIViewController -> void" , "contents": "didAnimateFirstHalfOfRotationToInterfaceOrientation(${1:UIInterfaceOrientation})" },{ "trigger": "estimatedProperties \t UITouchProperties", "contents": "estimatedProperties" },{ "trigger": "UIViewAutoresizing \t UIViewAutoresizing", "contents": "UIViewAutoresizing" },{ "trigger": "EditedCharacters \t NSTextStorageEditActions", "contents": "EditedCharacters" },{ "trigger": "setViewControllers \t func UITabBarController -> void" , "contents": "setViewControllers(${1:[UIViewController]?}, animated:${2:BOOL})" },{ "trigger": "supportedJobTypes \t UIPrinterJobTypes", "contents": "supportedJobTypes" },{ "trigger": "maximumNumberOfTouches \t Int", "contents": "maximumNumberOfTouches" },{ "trigger": "selectedPrinter \t UIPrinter", "contents": "selectedPrinter" },{ "trigger": "TouchDragOutside \t UIControlEvents", "contents": "TouchDragOutside" },{ "trigger": "indexPathsForVisibleItems \t func UICollectionView -> [NSIndexPath]
" , "contents": "indexPathsForVisibleItems(${1:})" },{ "trigger": "modelIdentifierForElementAtIndexPath \t func unknown -> String?
" , "contents": "modelIdentifierForElementAtIndexPath(${1:NSIndexPath}, inView:${2:UIView})" },{ "trigger": "accommodatePresentedItemDeletionWithCompletionHandler \t func UIDocument -> Void
" , "contents": "accommodatePresentedItemDeletionWithCompletionHandler(${1:NSError? -> Void})" },{ "trigger": "restoreUserActivityState \t func UIResponder -> void" , "contents": "restoreUserActivityState(${1:NSUserActivity})" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, shouldSaveApplicationState:${2:NSCoder})" },{ "trigger": "setEditing \t func UITableView -> void" , "contents": "setEditing(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "setActions \t func UIMutableUserNotificationCategory -> void" , "contents": "setActions(${1:[UIUserNotificationAction]?}, forContext:${2:UIUserNotificationActionContext})" },{ "trigger": "comparePosition \t func unknown -> NSComparisonResult
" , "contents": "comparePosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "multiplier \t CGFloat", "contents": "multiplier" },{ "trigger": "UIAccessibilityAnnouncementDidFinishNotification \t String", "contents": "UIAccessibilityAnnouncementDidFinishNotification" },{ "trigger": "NSObject.increaseSize \t class NSObject -> void" , "contents": "NSObject.increaseSize(${1:AnyObject?})" },{ "trigger": "UITextViewTextDidEndEditingNotification \t String", "contents": "UITextViewTextDidEndEditingNotification" },{ "trigger": "numberOfRowsInSection \t func UITableView -> Int
" , "contents": "numberOfRowsInSection(${1:Int})" },{ "trigger": "UIPrintJobFailedError \t Int", "contents": "UIPrintJobFailedError" },{ "trigger": "UIInterfaceOrientationIsLandscape \t func UIInterfaceOrientationMask -> BOOL
" , "contents": "UIInterfaceOrientationIsLandscape(${1:UIInterfaceOrientation})" },{ "trigger": "useLayoutToLayoutNavigationTransitions \t BOOL", "contents": "useLayoutToLayoutNavigationTransitions" },{ "trigger": "numberOfItems \t Int", "contents": "numberOfItems" },{ "trigger": "rightView \t UIView", "contents": "rightView" },{ "trigger": "selectionWillChange \t func UIInputViewController -> void" , "contents": "selectionWillChange(${1:UITextInput?})" },{ "trigger": "UIFloatRangeMake \t func UIFocusAnimationCoordinator -> UIFloatRange
" , "contents": "UIFloatRangeMake(${1:CGFloat}, _:${2:CGFloat})" },{ "trigger": "pushViewController \t func UINavigationController -> void" , "contents": "pushViewController(${1:UIViewController}, animated:${2:BOOL})" },{ "trigger": "pressesCancelled \t func UIResponder -> void" , "contents": "pressesCancelled(${1:Set<UIPress>}, withEvent:${2:UIPressesEvent?})" },{ "trigger": "userInterfaceLayoutDirection \t UIUserInterfaceLayoutDirection", "contents": "userInterfaceLayoutDirection" },{ "trigger": "tableView \t func UITableViewController -> CGFloat
" , "contents": "tableView(${1:UITableView}, heightForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "All \t UIRectEdge", "contents": "All" },{ "trigger": "UIAccessibilityShakeToUndoDidChangeNotification \t String", "contents": "UIAccessibilityShakeToUndoDidChangeNotification" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didUpdateUserActivity:${2:NSUserActivity})" },{ "trigger": "setStatusBarStyle \t func UIApplication -> void" , "contents": "setStatusBarStyle(${1:UIStatusBarStyle}, animated:${2:BOOL})" },{ "trigger": "updateFocusIfNeeded \t func UIViewController -> void" , "contents": "updateFocusIfNeeded(${1:})" },{ "trigger": "NSObject.accessibilityLabel \t class NSObject -> String?
" , "contents": "NSObject.accessibilityLabel(${1:})" },{ "trigger": "NSValue.valueWithCGSize \t class NSValue -> NSValue
" , "contents": "NSValue.valueWithCGSize(${1:CGSize})" },{ "trigger": "setWidth \t func UISegmentedControl -> void" , "contents": "setWidth(${1:CGFloat}, forSegmentAtIndex:${2:Int})" },{ "trigger": "editing \t BOOL", "contents": "editing" },{ "trigger": "UIPageControl \t UIPageControl", "contents": "UIPageControl" },{ "trigger": "hidesWhenStopped \t BOOL", "contents": "hidesWhenStopped" },{ "trigger": "Location \t UITouchProperties", "contents": "Location" },{ "trigger": "NSUserActivityDocumentURLKey \t String", "contents": "NSUserActivityDocumentURLKey" },{ "trigger": "encodeWithCoder \t func UILocalNotification -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "allowsRotation \t BOOL", "contents": "allowsRotation" },{ "trigger": "printerPickerControllerDidDismiss \t func unknown -> void" , "contents": "printerPickerControllerDidDismiss(${1:UIPrinterPickerController})" },{ "trigger": "popoverVisible \t BOOL", "contents": "popoverVisible" },{ "trigger": "Badge \t UIUserNotificationType", "contents": "Badge" },{ "trigger": "FlexibleTopMargin \t UIViewAutoresizing", "contents": "FlexibleTopMargin" },{ "trigger": "UIBezierPath.bezierPathWithOvalInRect \t class UIBezierPath -> Self
" , "contents": "UIBezierPath.bezierPathWithOvalInRect(${1:CGRect})" },{ "trigger": "setCollectionViewLayout \t func UICollectionView -> void" , "contents": "setCollectionViewLayout(${1:UICollectionViewLayout}, animated:${2:BOOL})" },{ "trigger": "delegate \t UISearchDisplayDelegate", "contents": "delegate" },{ "trigger": "actionsForContext \t func UIUserNotificationCategory -> [UIUserNotificationAction]?
" , "contents": "actionsForContext(${1:UIUserNotificationActionContext})" },{ "trigger": "attachmentBoundsForTextContainer \t func NSTextAttachment -> CGRect
" , "contents": "attachmentBoundsForTextContainer(${1:NSTextContainer?}, proposedLineFragment:${2:CGRect}, glyphPosition:${3:CGPoint}, characterIndex:${4:Int})" },{ "trigger": "locationInView \t func UITouch -> CGPoint
" , "contents": "locationInView(${1:UIView?})" },{ "trigger": "UIVideoEditorController.canEditVideoAtPath \t class UIVideoEditorController -> BOOL
" , "contents": "UIVideoEditorController.canEditVideoAtPath(${1:String})" },{ "trigger": "unwindAction \t Selector", "contents": "unwindAction" },{ "trigger": "updateFocusIfNeeded \t func unknown -> void" , "contents": "updateFocusIfNeeded(${1:})" },{ "trigger": "UIAccessibilityNavigationStyle \t UIAccessibilityNavigationStyle", "contents": "UIAccessibilityNavigationStyle" },{ "trigger": "relinquishPresentedItemToReader \t func UIDocument -> Void?" , "contents": "relinquishPresentedItemToReader(${1: -> Void? -> Void})" },{ "trigger": "copyWithZone \t func NSParagraphStyle -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "actionSheet \t func UIDocumentInteractionController -> void" , "contents": "actionSheet(${1:UIActionSheet}, willDismissWithButtonIndex:${2:Int})" },{ "trigger": "shouldPerformSegueWithIdentifier \t func UIViewController -> BOOL
" , "contents": "shouldPerformSegueWithIdentifier(${1:String}, sender:${2:AnyObject?})" },{ "trigger": "minimumNumberOfTouches \t Int", "contents": "minimumNumberOfTouches" },{ "trigger": "editingStyle \t UITableViewCellEditingStyle", "contents": "editingStyle" },{ "trigger": "TraitMonoSpace \t UIFontDescriptorSymbolicTraits", "contents": "TraitMonoSpace" },{ "trigger": "UIAccessibilityIsMonoAudioEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsMonoAudioEnabled(${1:})" },{ "trigger": "constraintGreaterThanOrEqualToAnchor \t func NSLayoutAnchor -> NSLayoutConstraint!
" , "contents": "constraintGreaterThanOrEqualToAnchor(${1:NSLayoutAnchor!}, constant:${2:CGFloat})" },{ "trigger": "autoresizesSubviews \t BOOL", "contents": "autoresizesSubviews" },{ "trigger": "dismissalTransitionDidEnd \t func UIPresentationController -> void" , "contents": "dismissalTransitionDidEnd(${1:BOOL})" },{ "trigger": "NSUnderlineStyle \t NSUnderlineStyle", "contents": "NSUnderlineStyle" },{ "trigger": "SystemReserved \t UIControlEvents", "contents": "SystemReserved" },{ "trigger": "UITableViewScrollPosition \t UITableViewScrollPosition", "contents": "UITableViewScrollPosition" },{ "trigger": "shouldUpdateFocusInContext \t func UIView -> BOOL
" , "contents": "shouldUpdateFocusInContext(${1:UIFocusUpdateContext})" },{ "trigger": "textRangeFromPosition \t func UITextField -> UITextRange?
" , "contents": "textRangeFromPosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "insertDictationResult \t func UITextView -> void" , "contents": "insertDictationResult(${1:[UIDictationPhrase]})" },{ "trigger": "UIColor.colorWithCIColor \t class UIColor -> UIColor
" , "contents": "UIColor.colorWithCIColor(${1:CIColor})" },{ "trigger": "UIApplicationShortcutIcon \t UIApplicationShortcutIcon", "contents": "UIApplicationShortcutIcon" },{ "trigger": "Next \t UIFocusHeading", "contents": "Next" },{ "trigger": "UIBackgroundFetchResult \t UIBackgroundFetchResult", "contents": "UIBackgroundFetchResult" },{ "trigger": "searchDisplayController \t func unknown -> BOOL
" , "contents": "searchDisplayController(${1:UISearchDisplayController}, shouldReloadTableForSearchString:${2:String?})" },{ "trigger": "registerImage \t func UIImageAsset -> void" , "contents": "registerImage(${1:UIImage}, withTraitCollection:${2:UITraitCollection})" },{ "trigger": "usedRectForTextContainer \t func NSLayoutManager -> CGRect
" , "contents": "usedRectForTextContainer(${1:NSTextContainer})" },{ "trigger": "nextLayout \t UICollectionViewLayout", "contents": "nextLayout" },{ "trigger": "UISearchBarIcon \t UISearchBarIcon", "contents": "UISearchBarIcon" },{ "trigger": "printFormatter \t UIPrintFormatter", "contents": "printFormatter" },{ "trigger": "UIOffsetFromString \t func UIPageControl -> UIOffset
" , "contents": "UIOffsetFromString(${1:String})" },{ "trigger": "subtype \t UIEventSubtype", "contents": "subtype" },{ "trigger": "keyboardDismissMode \t UIScrollViewKeyboardDismissMode", "contents": "keyboardDismissMode" },{ "trigger": "titleTextAttributesForState \t func UISegmentedControl -> [NSObject" , "contents": "titleTextAttributesForState(${1:UIControlState})" },{ "trigger": "UIFontWidthTrait \t String", "contents": "UIFontWidthTrait" },{ "trigger": "traitCollection \t UITraitCollection", "contents": "traitCollection" },{ "trigger": "delegate \t UIActionSheetDelegate", "contents": "delegate" },{ "trigger": "clearButtonRectForBounds \t func UITextField -> CGRect
" , "contents": "clearButtonRectForBounds(${1:CGRect})" },{ "trigger": "sendEvent \t func UIWindow -> void" , "contents": "sendEvent(${1:UIEvent})" },{ "trigger": "LayoutSubviews \t UIViewKeyframeAnimationOptions", "contents": "LayoutSubviews" },{ "trigger": "UIFontWeightLight \t CGFloat", "contents": "UIFontWeightLight" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didFailToContinueUserActivityWithType:${2:String}, error:${3:NSError})" },{ "trigger": "NSObject.accessibilityLanguage \t class NSObject -> String?
" , "contents": "NSObject.accessibilityLanguage(${1:})" },{ "trigger": "scrollView \t UIScrollView", "contents": "scrollView" },{ "trigger": "progressTintColor \t UIColor", "contents": "progressTintColor" },{ "trigger": "UIPress \t UIPress", "contents": "UIPress" },{ "trigger": "adjustTextPositionByCharacterOffset \t func unknown -> void" , "contents": "adjustTextPositionByCharacterOffset(${1:Int})" },{ "trigger": "translucent \t BOOL", "contents": "translucent" },{ "trigger": "NSObject.decreaseSize \t class NSObject -> void" , "contents": "NSObject.decreaseSize(${1:AnyObject?})" },{ "trigger": "UIActivityTypeSaveToCameraRoll \t String", "contents": "UIActivityTypeSaveToCameraRoll" },{ "trigger": "invalidateEverything \t BOOL", "contents": "invalidateEverything" },{ "trigger": "constraintsAffectingLayoutForAxis \t func UIView -> [NSLayoutConstraint]
" , "contents": "constraintsAffectingLayoutForAxis(${1:UILayoutConstraintAxis})" },{ "trigger": "scrollViewDidScrollToTop \t func UITableViewController -> void" , "contents": "scrollViewDidScrollToTop(${1:UIScrollView})" },{ "trigger": "enumerateLineFragmentsForGlyphRange \t func NSLayoutManager -> Void
" , "contents": "enumerateLineFragmentsForGlyphRange(${1:NSRange}, usingBlock:${2:CGRect}, CGRect:${3:}, NSTextContainer:${4:}, NSRange:${5:}, UnsafeMutablePointer<BOOL>:${6:})" },{ "trigger": "willPresentActionSheet \t func unknown -> void" , "contents": "willPresentActionSheet(${1:UIActionSheet})" },{ "trigger": "UIImagePickerControllerSourceType \t UIImagePickerControllerSourceType", "contents": "UIImagePickerControllerSourceType" },{ "trigger": "setBackButtonBackgroundImage \t func UIBarButtonItem -> void" , "contents": "setBackButtonBackgroundImage(${1:UIImage?}, forState:${2:UIControlState}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "setMinimumBackgroundFetchInterval \t func UIApplication -> void" , "contents": "setMinimumBackgroundFetchInterval(${1:NSTimeInterval})" },{ "trigger": "UTI \t String", "contents": "UTI" },{ "trigger": "NSTextEffectLetterpressStyle \t String", "contents": "NSTextEffectLetterpressStyle" },{ "trigger": "viewWillAppear \t func UIViewController -> void" , "contents": "viewWillAppear(${1:BOOL})" },{ "trigger": "addChildBehavior \t func UIDynamicBehavior -> void" , "contents": "addChildBehavior(${1:UIDynamicBehavior})" },{ "trigger": "UIFont.monospacedDigitSystemFontOfSize \t class UIFont -> UIFont
" , "contents": "UIFont.monospacedDigitSystemFontOfSize(${1:CGFloat}, weight:${2:CGFloat})" },{ "trigger": "Top \t UICollectionViewScrollPosition", "contents": "Top" },{ "trigger": "scrollViewDidEndDragging \t func UICollectionViewController -> void" , "contents": "scrollViewDidEndDragging(${1:UIScrollView}, willDecelerate:${2:BOOL})" },{ "trigger": "invalidateFlowLayoutAttributes \t BOOL", "contents": "invalidateFlowLayoutAttributes" },{ "trigger": "placeholderItem \t AnyObject", "contents": "placeholderItem" },{ "trigger": "delegate \t UINavigationControllerDelegate", "contents": "delegate" },{ "trigger": "showsNumberOfCopies \t BOOL", "contents": "showsNumberOfCopies" },{ "trigger": "UIStoryboard.storyboardWithName \t class UIStoryboard -> UIStoryboard
" , "contents": "UIStoryboard.storyboardWithName(${1:String}, bundle:${2:NSBundle?})" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, handleWatchKitExtensionRequest:${2:[NSObject }, reply:${3:[NSObject })" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didEndEditingRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIAccessibilityTraitUpdatesFrequently \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitUpdatesFrequently" },{ "trigger": "CGGlyphAtIndex \t func NSLayoutManager -> CGGlyph
" , "contents": "CGGlyphAtIndex(${1:Int})" },{ "trigger": "accessibilityViewIsModal \t BOOL", "contents": "accessibilityViewIsModal" },{ "trigger": "addCurveToPoint \t func UIBezierPath -> void" , "contents": "addCurveToPoint(${1:CGPoint}, controlPoint1:${2:CGPoint}, controlPoint2:${3:CGPoint})" },{ "trigger": "scrollsToTop \t BOOL", "contents": "scrollsToTop" },{ "trigger": "Right \t UIPopoverArrowDirection", "contents": "Right" },{ "trigger": "onTintColor \t UIColor", "contents": "onTintColor" },{ "trigger": "convertPoint \t func UIView -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, toView:${2:UIView?})" },{ "trigger": "pressesForGestureRecognizer \t func UIPressesEvent -> Set UIPress 
" , "contents": "pressesForGestureRecognizer(${1:UIGestureRecognizer})" },{ "trigger": "popoverControllerDidDismissPopover \t func unknown -> void" , "contents": "popoverControllerDidDismissPopover(${1:UIPopoverController})" },{ "trigger": "gestureRecognizer \t func UITableViewCell -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldBeRequiredToFailByGestureRecognizer:${2:UIGestureRecognizer})" },{ "trigger": "coalescedTouchesForTouch \t func UIEvent -> [UITouch]?
" , "contents": "coalescedTouchesForTouch(${1:UITouch})" },{ "trigger": "UITextInputMode.activeInputModes \t class UITextInputMode -> [String]
" , "contents": "UITextInputMode.activeInputModes(${1:})" },{ "trigger": "animationControllerForPresentedController \t func unknown -> UIViewControllerAnimatedTransitioning?
" , "contents": "animationControllerForPresentedController(${1:UIViewController}, presentingController:${2:UIViewController}, sourceController:${3:UIViewController})" },{ "trigger": "isViewLoaded \t func UIViewController -> BOOL
" , "contents": "isViewLoaded(${1:})" },{ "trigger": "UIGraphicsAddPDFContextDestinationAtPoint \t func UIGravityBehavior -> void" , "contents": "UIGraphicsAddPDFContextDestinationAtPoint(${1:String}, _:${2:CGPoint})" },{ "trigger": "updateUserActivityState \t func UIResponder -> void" , "contents": "updateUserActivityState(${1:NSUserActivity})" },{ "trigger": "arrowOffset \t CGFloat", "contents": "arrowOffset" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, didEndDisplayingCell:${2:UICollectionViewCell}, forItemAtIndexPath:${3:NSIndexPath})" },{ "trigger": "modalPresentationCapturesStatusBarAppearance \t BOOL", "contents": "modalPresentationCapturesStatusBarAppearance" },{ "trigger": "gestureRecognizer \t func UITableViewCell -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldRecognizeSimultaneouslyWithGestureRecognizer:${2:UIGestureRecognizer})" },{ "trigger": "UIActivityTypePostToWeibo \t String", "contents": "UIActivityTypePostToWeibo" },{ "trigger": "setItems \t func UIToolbar -> void" , "contents": "setItems(${1:[UIBarButtonItem]?}, animated:${2:BOOL})" },{ "trigger": "removeLayoutGuide \t func UIView -> void" , "contents": "removeLayoutGuide(${1:UILayoutGuide})" },{ "trigger": "UIAccessibilityPageScrolledNotification \t UIAccessibilityNotifications", "contents": "UIAccessibilityPageScrolledNotification" },{ "trigger": "UIImagePickerControllerMediaURL \t String", "contents": "UIImagePickerControllerMediaURL" },{ "trigger": "numberOfSegments \t Int", "contents": "numberOfSegments" },{ "trigger": "detailTextLabel \t UILabel", "contents": "detailTextLabel" },{ "trigger": "sizeWithFont \t func NSString -> CGSize
" , "contents": "sizeWithFont(${1:UIFont!}, forWidth:${2:CGFloat}, lineBreakMode:${3:NSLineBreakMode})" },{ "trigger": "loadViewIfNeeded \t func UIViewController -> void" , "contents": "loadViewIfNeeded(${1:})" },{ "trigger": "Closed \t UIDocumentState", "contents": "Closed" },{ "trigger": "minimumLineHeight \t CGFloat", "contents": "minimumLineHeight" },{ "trigger": "ClassSlabSerifs \t UIFontDescriptorSymbolicTraits", "contents": "ClassSlabSerifs" },{ "trigger": "Landscape \t UIInterfaceOrientationMask", "contents": "Landscape" },{ "trigger": "layoutFrame \t CGRect", "contents": "layoutFrame" },{ "trigger": "attributedTitle \t NSAttributedString", "contents": "attributedTitle" },{ "trigger": "setBackgroundImage \t func UISegmentedControl -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forState:${2:UIControlState}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "UIImage.imageWithCIImage \t class UIImage -> UIImage
" , "contents": "UIImage.imageWithCIImage(${1:CIImage}, scale:${2:CGFloat}, orientation:${3:UIImageOrientation})" },{ "trigger": "insertDictationResult \t func UITextField -> void" , "contents": "insertDictationResult(${1:[UIDictationPhrase]})" },{ "trigger": "backgroundImageForState \t func UIButton -> UIImage?
" , "contents": "backgroundImageForState(${1:UIControlState})" },{ "trigger": "insertSubview \t func UIView -> void" , "contents": "insertSubview(${1:UIView}, belowSubview:${2:UIView})" },{ "trigger": "invalidateDecorationElementsOfKind \t func UICollectionViewLayoutInvalidationContext -> void" , "contents": "invalidateDecorationElementsOfKind(${1:String}, atIndexPaths:${2:[NSIndexPath]})" },{ "trigger": "needsUpdateConstraints \t func UIView -> BOOL
" , "contents": "needsUpdateConstraints(${1:})" },{ "trigger": "UIAcceleration \t UIAcceleration", "contents": "UIAcceleration" },{ "trigger": "setNeedsFocusUpdate \t func UIPresentationController -> void" , "contents": "setNeedsFocusUpdate(${1:})" },{ "trigger": "UITextFieldViewMode \t UITextFieldViewMode", "contents": "UITextFieldViewMode" },{ "trigger": "application \t func unknown -> UIInterfaceOrientationMask
" , "contents": "application(${1:UIApplication}, supportedInterfaceOrientationsForWindow:${2:UIWindow?})" },{ "trigger": "shouldAutomaticallyForwardAppearanceMethods \t func UIViewController -> BOOL
" , "contents": "shouldAutomaticallyForwardAppearanceMethods(${1:})" },{ "trigger": "layoutManager \t func unknown -> void" , "contents": "layoutManager(${1:NSLayoutManager}, didCompleteLayoutForTextContainer:${2:NSTextContainer?}, atEnd:${3:BOOL})" },{ "trigger": "UIView.transitionWithView \t class UIView -> Void?," , "contents": "UIView.transitionWithView(${1:UIView}, duration:${2:NSTimeInterval}, options:${3:UIViewAnimationOptions}, animations:${4: -> Void?}, completion:${5:BOOL -> Void?})" },{ "trigger": "searchResultsController \t UIViewController", "contents": "searchResultsController" },{ "trigger": "setPositionAdjustment \t func UISearchBar -> void" , "contents": "setPositionAdjustment(${1:UIOffset}, forSearchBarIcon:${2:UISearchBarIcon})" },{ "trigger": "documentInteractionControllerRectForPreview \t func unknown -> CGRect
" , "contents": "documentInteractionControllerRectForPreview(${1:UIDocumentInteractionController})" },{ "trigger": "updateViewConstraints \t func UIViewController -> void" , "contents": "updateViewConstraints(${1:})" },{ "trigger": "NSBaselineOffsetAttributeName \t String", "contents": "NSBaselineOffsetAttributeName" },{ "trigger": "drawTextInRect \t func UITextField -> void" , "contents": "drawTextInRect(${1:CGRect})" },{ "trigger": "remoteControlReceivedWithEvent \t func UIResponder -> void" , "contents": "remoteControlReceivedWithEvent(${1:UIEvent?})" },{ "trigger": "invalidateDisplayForCharacterRange \t func NSLayoutManager -> void" , "contents": "invalidateDisplayForCharacterRange(${1:NSRange})" },{ "trigger": "searchDisplayController \t func unknown -> void" , "contents": "searchDisplayController(${1:UISearchDisplayController}, willUnloadSearchResultsTableView:${2:UITableView})" },{ "trigger": "CGRectFromString \t func unknown -> CGRect
" , "contents": "CGRectFromString(${1:String})" },{ "trigger": "splitViewController \t func unknown -> BOOL
" , "contents": "splitViewController(${1:UISplitViewController}, shouldHideViewController:${2:UIViewController}, inOrientation:${3:UIInterfaceOrientation})" },{ "trigger": "FlexibleHeight \t UIViewAutoresizing", "contents": "FlexibleHeight" },{ "trigger": "copyWithZone \t func UIPrintFormatter -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "UIStoryboardSegue \t UIStoryboardSegue", "contents": "UIStoryboardSegue" },{ "trigger": "CGSizeFromString \t func unknown -> CGSize
" , "contents": "CGSizeFromString(${1:String})" },{ "trigger": "UITextStorageDirection \t UITextStorageDirection", "contents": "UITextStorageDirection" },{ "trigger": "inputViewController \t UIInputViewController", "contents": "inputViewController" },{ "trigger": "positionWithinRange \t func UITextField -> UITextPosition?
" , "contents": "positionWithinRange(${1:UITextRange}, farthestInDirection:${2:UITextLayoutDirection})" },{ "trigger": "topAnchor \t NSLayoutYAxisAnchor", "contents": "topAnchor" },{ "trigger": "allowsImageEditing \t BOOL", "contents": "allowsImageEditing" },{ "trigger": "delaysContentTouches \t BOOL", "contents": "delaysContentTouches" },{ "trigger": "NSViewModeDocumentAttribute \t String", "contents": "NSViewModeDocumentAttribute" },{ "trigger": "beginGeneratingDeviceOrientationNotifications \t func UIDevice -> void" , "contents": "beginGeneratingDeviceOrientationNotifications(${1:})" },{ "trigger": "setHidesBackButton \t func UINavigationItem -> void" , "contents": "setHidesBackButton(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "numberOfSectionsInCollectionView \t func UICollectionViewController -> Int
" , "contents": "numberOfSectionsInCollectionView(${1:UICollectionView})" },{ "trigger": "sizeForChildContentContainer \t func UIPresentationController -> CGSize
" , "contents": "sizeForChildContentContainer(${1:UIContentContainer}, withParentContainerSize:${2:CGSize})" },{ "trigger": "UIFontWeightBold \t CGFloat", "contents": "UIFontWeightBold" },{ "trigger": "tintColorDidChange \t func UIView -> void" , "contents": "tintColorDidChange(${1:})" },{ "trigger": "addItem \t func UIDynamicItemBehavior -> void" , "contents": "addItem(${1:UIDynamicItem})" },{ "trigger": "decelerationRate \t CGFloat", "contents": "decelerationRate" },{ "trigger": "UILayoutPriorityFittingSizeLevel \t UILayoutPriority", "contents": "UILayoutPriorityFittingSizeLevel" },{ "trigger": "layoutAttributesForSupplementaryElementOfKind \t func UICollectionView -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForSupplementaryElementOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "PrimaryActionTriggered \t UIControlEvents", "contents": "PrimaryActionTriggered" },{ "trigger": "UIPasteboardNameFind \t String", "contents": "UIPasteboardNameFind" },{ "trigger": "UIDocumentPickerViewController \t UIDocumentPickerViewController", "contents": "UIDocumentPickerViewController" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, didEndDisplayingSupplementaryView:${2:UICollectionReusableView}, forElementOfKind:${3:String}, atIndexPath:${4:NSIndexPath})" },{ "trigger": "FlexibleBottomMargin \t UIViewAutoresizing", "contents": "FlexibleBottomMargin" },{ "trigger": "drawAtPoint \t func UIImage -> void" , "contents": "drawAtPoint(${1:CGPoint}, blendMode:${2:CGBlendMode}, alpha:${3:CGFloat})" },{ "trigger": "defaultTabInterval \t CGFloat", "contents": "defaultTabInterval" },{ "trigger": "setImage \t func UIButton -> void" , "contents": "setImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "beginFloatingCursorAtPoint \t func UITextField -> void" , "contents": "beginFloatingCursorAtPoint(${1:CGPoint})" },{ "trigger": "willAnimateFirstHalfOfRotationToInterfaceOrientation \t func UIViewController -> void" , "contents": "willAnimateFirstHalfOfRotationToInterfaceOrientation(${1:UIInterfaceOrientation}, duration:${2:NSTimeInterval})" },{ "trigger": "insertSections \t func UICollectionView -> void" , "contents": "insertSections(${1:NSIndexSet})" },{ "trigger": "providerIdentifier \t String", "contents": "providerIdentifier" },{ "trigger": "accessibilityIdentifier \t String", "contents": "accessibilityIdentifier" },{ "trigger": "constraintLessThanOrEqualToAnchor \t func NSLayoutAnchor -> NSLayoutConstraint!
" , "contents": "constraintLessThanOrEqualToAnchor(${1:NSLayoutAnchor!}, constant:${2:CGFloat})" },{ "trigger": "copyWithZone \t func UIBezierPath -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "NSObject.accessibilityPerformMagicTap \t class NSObject -> BOOL
" , "contents": "NSObject.accessibilityPerformMagicTap(${1:})" },{ "trigger": "loading \t BOOL", "contents": "loading" },{ "trigger": "layoutIfNeeded \t func UIView -> void" , "contents": "layoutIfNeeded(${1:})" },{ "trigger": "UIFloatRangeIsInfinite \t func UIFocusAnimationCoordinator -> BOOL
" , "contents": "UIFloatRangeIsInfinite(${1:UIFloatRange})" },{ "trigger": "presentOptionsMenuFromBarButtonItem \t func UIDocumentInteractionController -> BOOL
" , "contents": "presentOptionsMenuFromBarButtonItem(${1:UIBarButtonItem}, animated:${2:BOOL})" },{ "trigger": "UINib.nibWithData \t class UINib -> UINib
" , "contents": "UINib.nibWithData(${1:NSData}, bundle:${2:NSBundle?})" },{ "trigger": "minimumFontSize \t CGFloat", "contents": "minimumFontSize" },{ "trigger": "allowsPictureInPictureMediaPlayback \t BOOL", "contents": "allowsPictureInPictureMediaPlayback" },{ "trigger": "tableFooterView \t UIView", "contents": "tableFooterView" },{ "trigger": "zoomScale \t CGFloat", "contents": "zoomScale" },{ "trigger": "cellForItemAtIndexPath \t func UICollectionView -> UICollectionViewCell?
" , "contents": "cellForItemAtIndexPath(${1:NSIndexPath})" },{ "trigger": "isDescendantOfView \t func UIView -> BOOL
" , "contents": "isDescendantOfView(${1:UIView})" },{ "trigger": "CGImage \t CGImage", "contents": "CGImage" },{ "trigger": "UIUserNotificationActionResponseTypedTextKey \t String", "contents": "UIUserNotificationActionResponseTypedTextKey" },{ "trigger": "delegate \t NSTextStorageDelegate", "contents": "delegate" },{ "trigger": "invalidationContextForInteractivelyMovingItems \t func UICollectionViewLayout -> UICollectionViewLayoutInvalidationContext
" , "contents": "invalidationContextForInteractivelyMovingItems(${1:[NSIndexPath]}, withTargetPosition:${2:CGPoint}, previousIndexPaths:${3:[NSIndexPath]}, previousPosition:${4:CGPoint})" },{ "trigger": "didUpdateFocusInContext \t func UIPresentationController -> void" , "contents": "didUpdateFocusInContext(${1:UIFocusUpdateContext}, withAnimationCoordinator:${2:UIFocusAnimationCoordinator})" },{ "trigger": "UIGraphicsBeginPDFContextToData \t func UIGravityBehavior -> void" , "contents": "UIGraphicsBeginPDFContextToData(${1:NSMutableData}, _:${2:CGRect}, _:${3:[NSObject })" },{ "trigger": "UIRectClip \t func UIRectCorner -> void" , "contents": "UIRectClip(${1:CGRect})" },{ "trigger": "UIFontDescriptor.fontDescriptorWithName \t class UIFontDescriptor -> UIFontDescriptor
" , "contents": "UIFontDescriptor.fontDescriptorWithName(${1:String}, size:${2:CGFloat})" },{ "trigger": "scrollViewDidScroll \t func UITableViewController -> void" , "contents": "scrollViewDidScroll(${1:UIScrollView})" },{ "trigger": "returnKeyType \t UIReturnKeyType", "contents": "returnKeyType" },{ "trigger": "textDidChange \t func UIInputViewController -> void" , "contents": "textDidChange(${1:UITextInput?})" },{ "trigger": "nextFocusedView \t UIView", "contents": "nextFocusedView" },{ "trigger": "ensureLayoutForTextContainer \t func NSLayoutManager -> void" , "contents": "ensureLayoutForTextContainer(${1:NSTextContainer})" },{ "trigger": "prompt \t String", "contents": "prompt" },{ "trigger": "traitCollectionDidChange \t func UIPresentationController -> void" , "contents": "traitCollectionDidChange(${1:UITraitCollection?})" },{ "trigger": "hidesAccessoryWhenEditing \t BOOL", "contents": "hidesAccessoryWhenEditing" },{ "trigger": "reloadData \t func UITableView -> void" , "contents": "reloadData(${1:})" },{ "trigger": "registerNib \t func UICollectionViewLayout -> void" , "contents": "registerNib(${1:UINib?}, forDecorationViewOfKind:${2:String})" },{ "trigger": "presentFromRect \t func UIPrinterPickerController -> BOOL
" , "contents": "presentFromRect(${1:CGRect}, inView:${2:UIView}, animated:${3:BOOL}, completionHandler:${4:UIPrinterPickerCompletionHandler?})" },{ "trigger": "UIDynamicItemBehavior \t UIDynamicItemBehavior", "contents": "UIDynamicItemBehavior" },{ "trigger": "pressesEnded \t func UIResponder -> void" , "contents": "pressesEnded(${1:Set<UIPress>}, withEvent:${2:UIPressesEvent?})" },{ "trigger": "tabBarController \t func unknown -> BOOL
" , "contents": "tabBarController(${1:UITabBarController}, shouldSelectViewController:${2:UIViewController})" },{ "trigger": "tableView \t func UITableViewController -> UIView?
" , "contents": "tableView(${1:UITableView}, viewForHeaderInSection:${2:Int})" },{ "trigger": "UIAccessibilityTraitAdjustable \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitAdjustable" },{ "trigger": "contentSize \t CGSize", "contents": "contentSize" },{ "trigger": "screen \t UIScreen", "contents": "screen" },{ "trigger": "matchingFontDescriptorsWithMandatoryKeys \t func UIFontDescriptor -> [UIFontDescriptor]
" , "contents": "matchingFontDescriptorsWithMandatoryKeys(${1:Set<String>?})" },{ "trigger": "splitViewController \t func unknown -> BOOL
" , "contents": "splitViewController(${1:UISplitViewController}, collapseSecondaryViewController:${2:UIViewController}, ontoPrimaryViewController:${3:UIViewController})" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, handleActionWithIdentifier:${2:String?}, forLocalNotification:${3:UILocalNotification}, withResponseInfo:${4:[NSObject }, completionHandler:${5: -> Void})" },{ "trigger": "tableView \t func UITableViewController -> BOOL
" , "contents": "tableView(${1:UITableView}, canMoveRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "setFinishedSelectedImage \t func UITabBarItem -> void" , "contents": "setFinishedSelectedImage(${1:UIImage?}, withFinishedUnselectedImage:${2:UIImage?})" },{ "trigger": "popoverArrowDirection \t UIPopoverArrowDirection", "contents": "popoverArrowDirection" },{ "trigger": "searchResultsButtonSelected \t BOOL", "contents": "searchResultsButtonSelected" },{ "trigger": "touchesEstimatedPropertiesUpdated \t func UIResponder -> void" , "contents": "touchesEstimatedPropertiesUpdated(${1:Set<NSObject>})" },{ "trigger": "textRangeFromPosition \t func UITextView -> UITextRange?
" , "contents": "textRangeFromPosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "fileNameExtensionForType \t func UIDocument -> String
" , "contents": "fileNameExtensionForType(${1:String?}, saveOperation:${2:UIDocumentSaveOperation})" },{ "trigger": "encodeWithCoder \t func UIViewController -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "friction \t CGFloat", "contents": "friction" },{ "trigger": "UIFont.systemFontSize \t class UIFont -> CGFloat
" , "contents": "UIFont.systemFontSize(${1:})" },{ "trigger": "itemChangedAtURL \t func NSFileProviderExtension -> void" , "contents": "itemChangedAtURL(${1:NSURL})" },{ "trigger": "locationOfTouch \t func UIGestureRecognizer -> CGPoint
" , "contents": "locationOfTouch(${1:Int}, inView:${2:UIView?})" },{ "trigger": "dataSource \t UIPickerViewDataSource", "contents": "dataSource" },{ "trigger": "presentsWithGesture \t BOOL", "contents": "presentsWithGesture" },{ "trigger": "setData \t func UIPasteboard -> void" , "contents": "setData(${1:NSData}, forPasteboardType:${2:String})" },{ "trigger": "elapsedTime \t func UIDynamicAnimator -> NSTimeInterval
" , "contents": "elapsedTime(${1:})" },{ "trigger": "mutableCopyWithZone \t func UIUserNotificationAction -> AnyObject
" , "contents": "mutableCopyWithZone(${1:NSZone})" },{ "trigger": "UIColor.cyanColor \t class UIColor -> UIColor
" , "contents": "UIColor.cyanColor(${1:})" },{ "trigger": "copyWithZone \t func UIMotionEffect -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "NSStringDrawingOptions \t NSStringDrawingOptions", "contents": "NSStringDrawingOptions" },{ "trigger": "textView \t func unknown -> BOOL
" , "contents": "textView(${1:UITextView}, shouldChangeTextInRange:${2:NSRange}, replacementText:${3:String})" },{ "trigger": "documentContextBeforeInput \t String", "contents": "documentContextBeforeInput" },{ "trigger": "orientation \t UIDeviceOrientation", "contents": "orientation" },{ "trigger": "NSPlainTextDocumentType \t String", "contents": "NSPlainTextDocumentType" },{ "trigger": "tokenizer \t UITextInputTokenizer", "contents": "tokenizer" },{ "trigger": "addArrangedSubview \t func UIStackView -> void" , "contents": "addArrangedSubview(${1:UIView})" },{ "trigger": "NSStrokeWidthAttributeName \t String", "contents": "NSStrokeWidthAttributeName" },{ "trigger": "drawInRect \t func UIPrintFormatter -> void" , "contents": "drawInRect(${1:CGRect}, forPageAtIndex:${2:Int})" },{ "trigger": "UIView.commitAnimations \t class UIView -> void" , "contents": "UIView.commitAnimations(${1:})" },{ "trigger": "glyphRangeForBoundingRect \t func NSLayoutManager -> NSRange
" , "contents": "glyphRangeForBoundingRect(${1:CGRect}, inTextContainer:${2:NSTextContainer})" },{ "trigger": "updateFloatingCursorAtPoint \t func UITextView -> void" , "contents": "updateFloatingCursorAtPoint(${1:CGPoint})" },{ "trigger": "UIScreen \t UIScreen", "contents": "UIScreen" },{ "trigger": "attachedBehaviorType \t UIAttachmentBehaviorType", "contents": "attachedBehaviorType" },{ "trigger": "completionWithItemsHandler \t UIActivityViewControllerCompletionWithItemsHandler", "contents": "completionWithItemsHandler" },{ "trigger": "usesFontLeading \t BOOL", "contents": "usesFontLeading" },{ "trigger": "Bottom \t UICollectionViewScrollPosition", "contents": "Bottom" },{ "trigger": "charge \t CGFloat", "contents": "charge" },{ "trigger": "UIFontWeightRegular \t CGFloat", "contents": "UIFontWeightRegular" },{ "trigger": "glyphIndexForPoint \t func NSLayoutManager -> Int
" , "contents": "glyphIndexForPoint(${1:CGPoint}, inTextContainer:${2:NSTextContainer})" },{ "trigger": "instantiateViewControllerWithIdentifier \t func UIStoryboard -> UIViewController
" , "contents": "instantiateViewControllerWithIdentifier(${1:String})" },{ "trigger": "dismissModalViewControllerAnimated \t func UIViewController -> void" , "contents": "dismissModalViewControllerAnimated(${1:BOOL})" },{ "trigger": "showsPaperSelectionForLoadedPapers \t BOOL", "contents": "showsPaperSelectionForLoadedPapers" },{ "trigger": "effect \t UIVisualEffect", "contents": "effect" },{ "trigger": "Portrait \t UIInterfaceOrientationMask", "contents": "Portrait" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, willEncodeRestorableStateWithCoder:${2:NSCoder})" },{ "trigger": "presentationControllerForPresentedViewController \t func UISearchController -> UIPresentationController?
" , "contents": "presentationControllerForPresentedViewController(${1:UIViewController}, presentingViewController:${2:UIViewController}, sourceViewController:${3:UIViewController})" },{ "trigger": "selectionRectsForRange \t func unknown -> [AnyObject]
" , "contents": "selectionRectsForRange(${1:UITextRange})" },{ "trigger": "minimumTrackingAdjustment \t CGFloat", "contents": "minimumTrackingAdjustment" },{ "trigger": "UITextAttributeFont \t String", "contents": "UITextAttributeFont" },{ "trigger": "accessibilityTraits \t UIAccessibilityTraits", "contents": "accessibilityTraits" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, didSelectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "NSControlCharacterWhitespaceAction \t Int", "contents": "NSControlCharacterWhitespaceAction" },{ "trigger": "presentPopoverFromBarButtonItem \t func UIPopoverController -> void" , "contents": "presentPopoverFromBarButtonItem(${1:UIBarButtonItem}, permittedArrowDirections:${2:UIPopoverArrowDirection}, animated:${3:BOOL})" },{ "trigger": "setDividerImage \t func UISegmentedControl -> void" , "contents": "setDividerImage(${1:UIImage?}, forLeftSegmentState:${2:UIControlState}, rightSegmentState:${3:UIControlState}, barMetrics:${4:UIBarMetrics})" },{ "trigger": "UITextInputMode.supportsSecureCoding \t class UITextInputMode -> BOOL
" , "contents": "UITextInputMode.supportsSecureCoding(${1:})" },{ "trigger": "tabBar \t UITabBar", "contents": "tabBar" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didDecodeRestorableStateWithCoder:${2:NSCoder})" },{ "trigger": "presentLocalNotificationNow \t func UIApplication -> void" , "contents": "presentLocalNotificationNow(${1:UILocalNotification})" },{ "trigger": "UIView.addKeyframeWithRelativeStartTime \t class UIView -> Void
" , "contents": "UIView.addKeyframeWithRelativeStartTime(${1:Double}, relativeDuration:${2:Double}, animations:${3: -> Void})" },{ "trigger": "scopeBarButtonDividerImageForLeftSegmentState \t func UISearchBar -> UIImage?
" , "contents": "scopeBarButtonDividerImageForLeftSegmentState(${1:UIControlState}, rightSegmentState:${2:UIControlState})" },{ "trigger": "UITextAttributeTextColor \t String", "contents": "UITextAttributeTextColor" },{ "trigger": "renderingMode \t UIImageRenderingMode", "contents": "renderingMode" },{ "trigger": "numberOfSections \t Int", "contents": "numberOfSections" },{ "trigger": "applyTransform \t func UIBezierPath -> void" , "contents": "applyTransform(${1:CGAffineTransform})" },{ "trigger": "addBoundaryWithIdentifier \t func UICollisionBehavior -> void" , "contents": "addBoundaryWithIdentifier(${1:NSCopying}, fromPoint:${2:CGPoint}, toPoint:${3:CGPoint})" },{ "trigger": "becomeFirstResponder \t func UIResponder -> BOOL
" , "contents": "becomeFirstResponder(${1:})" },{ "trigger": "UIInputView \t UIInputView", "contents": "UIInputView" },{ "trigger": "collisionBehavior \t func unknown -> void" , "contents": "collisionBehavior(${1:UICollisionBehavior}, endedContactForItem:${2:UIDynamicItem}, withBoundaryIdentifier:${3:NSCopying?})" },{ "trigger": "bezierPathByReversingPath \t func UIBezierPath -> UIBezierPath
" , "contents": "bezierPathByReversingPath(${1:})" },{ "trigger": "dimsBackgroundDuringPresentation \t BOOL", "contents": "dimsBackgroundDuringPresentation" },{ "trigger": "color \t UIColor", "contents": "color" },{ "trigger": "leadingAnchor \t NSLayoutXAxisAnchor", "contents": "leadingAnchor" },{ "trigger": "UIPageViewControllerOptionSpineLocationKey \t String", "contents": "UIPageViewControllerOptionSpineLocationKey" },{ "trigger": "NSObject.delete \t class NSObject -> void" , "contents": "NSObject.delete(${1:AnyObject?})" },{ "trigger": "UIUserNotificationSettings \t UIUserNotificationSettings", "contents": "UIUserNotificationSettings" },{ "trigger": "insertSubview \t func UIView -> void" , "contents": "insertSubview(${1:UIView}, atIndex:${2:Int})" },{ "trigger": "copyWithZone \t func UIUserNotificationCategory -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "isBeingDismissed \t func UIViewController -> BOOL
" , "contents": "isBeingDismissed(${1:})" },{ "trigger": "copyWithZone \t func NSShadow -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "UIMenuControllerArrowDirection \t UIMenuControllerArrowDirection", "contents": "UIMenuControllerArrowDirection" },{ "trigger": "UISimpleTextPrintFormatter \t UISimpleTextPrintFormatter", "contents": "UISimpleTextPrintFormatter" },{ "trigger": "isPosition \t func unknown -> BOOL
" , "contents": "isPosition(${1:UITextPosition}, withinTextUnit:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "drawUnderlineForGlyphRange \t func NSLayoutManager -> void" , "contents": "drawUnderlineForGlyphRange(${1:NSRange}, underlineType:${2:NSUnderlineStyle}, baselineOffset:${3:CGFloat}, lineFragmentRect:${4:CGRect}, lineFragmentGlyphRange:${5:NSRange}, containerOrigin:${6:CGPoint})" },{ "trigger": "UIDeviceOrientation \t UIDeviceOrientation", "contents": "UIDeviceOrientation" },{ "trigger": "spacing \t CGFloat", "contents": "spacing" },{ "trigger": "minimumInteritemSpacing \t CGFloat", "contents": "minimumInteritemSpacing" },{ "trigger": "UIUserNotificationActionBehavior \t UIUserNotificationActionBehavior", "contents": "UIUserNotificationActionBehavior" },{ "trigger": "NSMutableParagraphStyle \t NSMutableParagraphStyle", "contents": "NSMutableParagraphStyle" },{ "trigger": "searchResultsDelegate \t UITableViewDelegate", "contents": "searchResultsDelegate" },{ "trigger": "setBackgroundImage \t func UINavigationBar -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forBarMetrics:${2:UIBarMetrics})" },{ "trigger": "trackTintColor \t UIColor", "contents": "trackTintColor" },{ "trigger": "applicationDidBecomeActive \t func unknown -> void" , "contents": "applicationDidBecomeActive(${1:UIApplication})" },{ "trigger": "shouldUpdateFocusInContext \t func UIPresentationController -> BOOL
" , "contents": "shouldUpdateFocusInContext(${1:UIFocusUpdateContext})" },{ "trigger": "setGlyphs \t func NSLayoutManager -> void" , "contents": "setGlyphs(${1:UnsafePointer<CGGlyph>}, properties:${2:UnsafePointer<NSGlyphProperty>}, characterIndexes:${3:UnsafePointer<Int>}, font:${4:UIFont}, forGlyphRange:${5:NSRange})" },{ "trigger": "NSObject.toggleBoldface \t class NSObject -> void" , "contents": "NSObject.toggleBoldface(${1:AnyObject?})" },{ "trigger": "tableView \t func UITableViewController -> [UITableViewRowAction]?
" , "contents": "tableView(${1:UITableView}, editActionsForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "interactivePopGestureRecognizer \t UIGestureRecognizer", "contents": "interactivePopGestureRecognizer" },{ "trigger": "extensionContext \t NSExtensionContext", "contents": "extensionContext" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, willDisplayCell:${2:UICollectionViewCell}, forItemAtIndexPath:${3:NSIndexPath})" },{ "trigger": "presentingViewController \t UIViewController", "contents": "presentingViewController" },{ "trigger": "minimumValueImageRectForBounds \t func UISlider -> CGRect
" , "contents": "minimumValueImageRectForBounds(${1:CGRect})" },{ "trigger": "touchesForWindow \t func UIEvent -> Set UITouch ?
" , "contents": "touchesForWindow(${1:UIWindow})" },{ "trigger": "UIFocusGuide \t UIFocusGuide", "contents": "UIFocusGuide" },{ "trigger": "sizeWithFont \t func NSString -> CGSize
" , "contents": "sizeWithFont(${1:UIFont!}, minFontSize:${2:CGFloat}, actualFontSize:${3:UnsafeMutablePointer<CGFloat>}, forWidth:${4:CGFloat}, lineBreakMode:${5:NSLineBreakMode})" },{ "trigger": "UIApplicationStateRestorationTimestampKey \t String", "contents": "UIApplicationStateRestorationTimestampKey" },{ "trigger": "UIView.appearance \t class UIView -> Self
" , "contents": "UIView.appearance(${1:})" },{ "trigger": "navigationBar \t func unknown -> void" , "contents": "navigationBar(${1:UINavigationBar}, didPushItem:${2:UINavigationItem})" },{ "trigger": "isMovingToParentViewController \t func UIViewController -> BOOL
" , "contents": "isMovingToParentViewController(${1:})" },{ "trigger": "NSObject.accessibilityActivationPoint \t class NSObject -> CGPoint
" , "contents": "NSObject.accessibilityActivationPoint(${1:})" },{ "trigger": "relation \t NSLayoutRelation", "contents": "relation" },{ "trigger": "boundingRectWithSize \t func NSString -> CGRect
" , "contents": "boundingRectWithSize(${1:CGSize}, options:${2:NSStringDrawingOptions}, attributes:${3:[String }, context:${4:NSStringDrawingContext?})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didEndDisplayingCell:${2:UITableViewCell}, forRowAtIndexPath:${3:NSIndexPath})" },{ "trigger": "pickerView \t func unknown -> Int
" , "contents": "pickerView(${1:UIPickerView}, numberOfRowsInComponent:${2:Int})" },{ "trigger": "displayMode \t UISplitViewControllerDisplayMode", "contents": "displayMode" },{ "trigger": "documentInteractionController \t func unknown -> BOOL
" , "contents": "documentInteractionController(${1:UIDocumentInteractionController}, canPerformAction:${2:Selector})" },{ "trigger": "UIColor.underPageBackgroundColor \t class UIColor -> UIColor
" , "contents": "UIColor.underPageBackgroundColor(${1:})" },{ "trigger": "UIGraphicsPushContext \t func UIGravityBehavior -> void" , "contents": "UIGraphicsPushContext(${1:CGContext})" },{ "trigger": "setPopoverContentSize \t func UIPopoverController -> void" , "contents": "setPopoverContentSize(${1:CGSize}, animated:${2:BOOL})" },{ "trigger": "clearKeepAliveTimeout \t func UIApplication -> void" , "contents": "clearKeepAliveTimeout(${1:})" },{ "trigger": "NSObject.accessibilityElements \t class NSObject -> [AnyObject]?
" , "contents": "NSObject.accessibilityElements(${1:})" },{ "trigger": "decodeUIOffsetForKey \t func NSCoder -> UIOffset
" , "contents": "decodeUIOffsetForKey(${1:String})" },{ "trigger": "sender \t AnyObject", "contents": "sender" },{ "trigger": "constraintGreaterThanOrEqualToAnchor \t func NSLayoutAnchor -> NSLayoutConstraint!
" , "contents": "constraintGreaterThanOrEqualToAnchor(${1:NSLayoutAnchor!})" },{ "trigger": "contentsForType \t func UIDocument -> AnyObject
" , "contents": "contentsForType(${1:String})" },{ "trigger": "scrollViewWillBeginDragging \t func UICollectionViewController -> void" , "contents": "scrollViewWillBeginDragging(${1:UIScrollView})" },{ "trigger": "UITabBarSystemItem \t UITabBarSystemItem", "contents": "UITabBarSystemItem" },{ "trigger": "idleTimerDisabled \t BOOL", "contents": "idleTimerDisabled" },{ "trigger": "accessibilityScrollStatusForScrollView \t func unknown -> String?
" , "contents": "accessibilityScrollStatusForScrollView(${1:UIScrollView})" },{ "trigger": "collisionBehavior \t func unknown -> void" , "contents": "collisionBehavior(${1:UICollisionBehavior}, beganContactForItem:${2:UIDynamicItem}, withBoundaryIdentifier:${3:NSCopying?}, atPoint:${4:CGPoint})" },{ "trigger": "minuteInterval \t Int", "contents": "minuteInterval" },{ "trigger": "UIImage.imageWithCGImage \t class UIImage -> UIImage
" , "contents": "UIImage.imageWithCGImage(${1:CGImage}, scale:${2:CGFloat}, orientation:${3:UIImageOrientation})" },{ "trigger": "textInputView \t UIView", "contents": "textInputView" },{ "trigger": "pageViewController \t func unknown -> void" , "contents": "pageViewController(${1:UIPageViewController}, didFinishAnimating:${2:BOOL}, previousViewControllers:${3:[UIViewController]}, transitionCompleted:${4:BOOL})" },{ "trigger": "UIFontDescriptorSymbolicTraits \t UIFontDescriptorSymbolicTraits", "contents": "UIFontDescriptorSymbolicTraits" },{ "trigger": "registerNib \t func UICollectionView -> void" , "contents": "registerNib(${1:UINib?}, forCellWithReuseIdentifier:${2:String})" },{ "trigger": "convertPoint \t func unknown -> CGPoint
" , "contents": "convertPoint(${1:CGPoint}, fromCoordinateSpace:${2:UICoordinateSpace})" },{ "trigger": "NSPaperSizeDocumentAttribute \t String", "contents": "NSPaperSizeDocumentAttribute" },{ "trigger": "copyWithZone \t func UIKeyCommand -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "request \t NSURLRequest", "contents": "request" },{ "trigger": "NSGlyphProperty \t NSGlyphProperty", "contents": "NSGlyphProperty" },{ "trigger": "modelConfiguration \t String", "contents": "modelConfiguration" },{ "trigger": "NSStringFromCGVector \t func NSTextAlignment -> String
" , "contents": "NSStringFromCGVector(${1:CGVector})" },{ "trigger": "drawRect \t func UIView -> void" , "contents": "drawRect(${1:CGRect}, forViewPrintFormatter:${2:UIViewPrintFormatter})" },{ "trigger": "UINavigationController \t UINavigationController", "contents": "UINavigationController" },{ "trigger": "UIColor.yellowColor \t class UIColor -> UIColor
" , "contents": "UIColor.yellowColor(${1:})" },{ "trigger": "setSearchFieldBackgroundImage \t func UISearchBar -> void" , "contents": "setSearchFieldBackgroundImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "displayModeButtonItem \t func UISplitViewController -> UIBarButtonItem
" , "contents": "displayModeButtonItem(${1:})" },{ "trigger": "lastBaselineAnchor \t NSLayoutYAxisAnchor", "contents": "lastBaselineAnchor" },{ "trigger": "highlightedTextColor \t UIColor", "contents": "highlightedTextColor" },{ "trigger": "textForGuidedAccessRestrictionWithIdentifier \t func unknown -> String?
" , "contents": "textForGuidedAccessRestrictionWithIdentifier(${1:String})" },{ "trigger": "supportsFocus \t BOOL", "contents": "supportsFocus" },{ "trigger": "UIContentSizeCategoryExtraSmall \t String", "contents": "UIContentSizeCategoryExtraSmall" },{ "trigger": "UIPopoverBackgroundView \t UIPopoverBackgroundView", "contents": "UIPopoverBackgroundView" },{ "trigger": "menuVisible \t BOOL", "contents": "menuVisible" },{ "trigger": "input \t String", "contents": "input" },{ "trigger": "tableView \t func UIPickerView -> UITableViewCell
" , "contents": "tableView(${1:UITableView}, cellForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIApplicationSignificantTimeChangeNotification \t String", "contents": "UIApplicationSignificantTimeChangeNotification" },{ "trigger": "UIFontTextStyleHeadline \t String", "contents": "UIFontTextStyleHeadline" },{ "trigger": "setMenuVisible \t func UIMenuController -> void" , "contents": "setMenuVisible(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "removeSegmentAtIndex \t func UISegmentedControl -> void" , "contents": "removeSegmentAtIndex(${1:Int}, animated:${2:BOOL})" },{ "trigger": "UIActivityTypeAirDrop \t String", "contents": "UIActivityTypeAirDrop" },{ "trigger": "reload \t func UIWebView -> void" , "contents": "reload(${1:})" },{ "trigger": "animateTransition \t func unknown -> void" , "contents": "animateTransition(${1:UIViewControllerContextTransitioning})" },{ "trigger": "encodeRestorableStateWithCoder \t func UIView -> void" , "contents": "encodeRestorableStateWithCoder(${1:NSCoder})" },{ "trigger": "firstRectForRange \t func UITextField -> CGRect
" , "contents": "firstRectForRange(${1:UITextRange})" },{ "trigger": "UIWebView \t UIWebView", "contents": "UIWebView" },{ "trigger": "NSDefaultTabIntervalDocumentAttribute \t String", "contents": "NSDefaultTabIntervalDocumentAttribute" },{ "trigger": "UIDynamicAnimator \t UIDynamicAnimator", "contents": "UIDynamicAnimator" },{ "trigger": "savePresentedItemChangesWithCompletionHandler \t func UIDocument -> Void
" , "contents": "savePresentedItemChangesWithCompletionHandler(${1:NSError? -> Void})" },{ "trigger": "showsTouchWhenHighlighted \t BOOL", "contents": "showsTouchWhenHighlighted" },{ "trigger": "layoutAttributesForElementsInRect \t func UICollectionViewLayout -> [UICollectionViewLayoutAttributes]?
" , "contents": "layoutAttributesForElementsInRect(${1:CGRect})" },{ "trigger": "textAlignment \t NSTextAlignment", "contents": "textAlignment" },{ "trigger": "UIAccessibilityIsGrayscaleEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsGrayscaleEnabled(${1:})" },{ "trigger": "searchBar \t UISearchBar", "contents": "searchBar" },{ "trigger": "keyboardAppearance \t UIKeyboardAppearance", "contents": "keyboardAppearance" },{ "trigger": "distribution \t UIStackViewDistribution", "contents": "distribution" },{ "trigger": "UITextAttributeTextShadowOffset \t String", "contents": "UITextAttributeTextShadowOffset" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, didUnhighlightItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "cameraDevice \t UIImagePickerControllerCameraDevice", "contents": "cameraDevice" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, handleOpenURL:${2:NSURL})" },{ "trigger": "UICollisionBehaviorMode \t UICollisionBehaviorMode", "contents": "UICollisionBehaviorMode" },{ "trigger": "titlePositionAdjustment \t UIOffset", "contents": "titlePositionAdjustment" },{ "trigger": "itemWidth \t CGFloat", "contents": "itemWidth" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, shouldRestoreApplicationState:${2:NSCoder})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, willDisplayFooterView:${2:UIView}, forSection:${3:Int})" },{ "trigger": "headerReferenceSize \t CGSize", "contents": "headerReferenceSize" },{ "trigger": "NSStrikethroughColorAttributeName \t String", "contents": "NSStrikethroughColorAttributeName" },{ "trigger": "UIOffsetEqualToOffset \t func UIPageControl -> BOOL
" , "contents": "UIOffsetEqualToOffset(${1:UIOffset}, _:${2:UIOffset})" },{ "trigger": "UIBezierPath \t UIBezierPath", "contents": "UIBezierPath" },{ "trigger": "tracking \t BOOL", "contents": "tracking" },{ "trigger": "updateItemUsingCurrentState \t func UIDynamicAnimator -> void" , "contents": "updateItemUsingCurrentState(${1:UIDynamicItem})" },{ "trigger": "UICollectionReusableView \t UICollectionReusableView", "contents": "UICollectionReusableView" },{ "trigger": "UIApplicationDidChangeStatusBarFrameNotification \t String", "contents": "UIApplicationDidChangeStatusBarFrameNotification" },{ "trigger": "UIAccessibilityIsSwitchControlRunning \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsSwitchControlRunning(${1:})" },{ "trigger": "decodeRestorableStateWithCoder \t func UIView -> void" , "contents": "decodeRestorableStateWithCoder(${1:NSCoder})" },{ "trigger": "UITextAutocapitalizationType \t UITextAutocapitalizationType", "contents": "UITextAutocapitalizationType" },{ "trigger": "UIBezierPath.bezierPathWithRoundedRect \t class UIBezierPath -> Self
" , "contents": "UIBezierPath.bezierPathWithRoundedRect(${1:CGRect}, cornerRadius:${2:CGFloat})" },{ "trigger": "UIPrinterPickerController.printerPickerControllerWithInitiallySelectedPrinter \t class UIPrinterPickerController -> UIPrinterPickerController
" , "contents": "UIPrinterPickerController.printerPickerControllerWithInitiallySelectedPrinter(${1:UIPrinter?})" },{ "trigger": "imageFlippedForRightToLeftLayoutDirection \t func UIImage -> UIImage
" , "contents": "imageFlippedForRightToLeftLayoutDirection(${1:})" },{ "trigger": "dividerImageForLeftSegmentState \t func UIStepper -> UIImage?
" , "contents": "dividerImageForLeftSegmentState(${1:UIControlState}, rightSegmentState:${2:UIControlState})" },{ "trigger": "guidedAccessRestrictionWithIdentifier \t func unknown -> void" , "contents": "guidedAccessRestrictionWithIdentifier(${1:String}, didChangeState:${2:UIGuidedAccessRestrictionState})" },{ "trigger": "UIFontTextStyleCallout \t String", "contents": "UIFontTextStyleCallout" },{ "trigger": "printInteractionControllerDidDismissPrinterOptions \t func unknown -> void" , "contents": "printInteractionControllerDidDismissPrinterOptions(${1:UIPrintInteractionController})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didSelectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "fixedCoordinateSpace \t UICoordinateSpace", "contents": "fixedCoordinateSpace" },{ "trigger": "dataForPasteboardType \t func UIPasteboard -> [AnyObject]?
" , "contents": "dataForPasteboardType(${1:String}, inItemSet:${2:NSIndexSet?})" },{ "trigger": "unknown.arrowHeight \t static unknown -> CGFloat
" , "contents": "unknown.arrowHeight(${1:})" },{ "trigger": "UIProgressView \t UIProgressView", "contents": "UIProgressView" },{ "trigger": "UIWindowDidBecomeKeyNotification \t String", "contents": "UIWindowDidBecomeKeyNotification" },{ "trigger": "imageAsset \t UIImageAsset", "contents": "imageAsset" },{ "trigger": "viewDidDisappear \t func UIViewController -> void" , "contents": "viewDidDisappear(${1:BOOL})" },{ "trigger": "velocityInView \t func UIPanGestureRecognizer -> CGPoint
" , "contents": "velocityInView(${1:UIView?})" },{ "trigger": "stopAnimating \t func UIImageView -> void" , "contents": "stopAnimating(${1:})" },{ "trigger": "UITabBarController \t UITabBarController", "contents": "UITabBarController" },{ "trigger": "currentUserNotificationSettings \t func UIApplication -> UIUserNotificationSettings?
" , "contents": "currentUserNotificationSettings(${1:})" },{ "trigger": "magnitude \t CGFloat", "contents": "magnitude" },{ "trigger": "UIView.animateWithDuration \t class UIView -> Void," , "contents": "UIView.animateWithDuration(${1:NSTimeInterval}, delay:${2:NSTimeInterval}, usingSpringWithDamping:${3:CGFloat}, initialSpringVelocity:${4:CGFloat}, options:${5:UIViewAnimationOptions}, animations:${6: -> Void}, completion:${7:BOOL -> Void?})" },{ "trigger": "UIAccessibilityIsClosedCaptioningEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsClosedCaptioningEnabled(${1:})" },{ "trigger": "advanceToNextInputMode \t func UIInputViewController -> void" , "contents": "advanceToNextInputMode(${1:})" },{ "trigger": "barHideOnTapGestureRecognizer \t UITapGestureRecognizer", "contents": "barHideOnTapGestureRecognizer" },{ "trigger": "updateInteractiveTransition \t func UIPercentDrivenInteractiveTransition -> void" , "contents": "updateInteractiveTransition(${1:CGFloat})" },{ "trigger": "UITransitionContextToViewKey \t String", "contents": "UITransitionContextToViewKey" },{ "trigger": "presentedSubitemAtURL \t func UIDocument -> void" , "contents": "presentedSubitemAtURL(${1:NSURL}, didMoveToURL:${2:NSURL})" },{ "trigger": "obscuresBackgroundDuringPresentation \t BOOL", "contents": "obscuresBackgroundDuringPresentation" },{ "trigger": "extraLineFragmentUsedRect \t CGRect", "contents": "extraLineFragmentUsedRect" },{ "trigger": "UIBackgroundRefreshStatus \t UIBackgroundRefreshStatus", "contents": "UIBackgroundRefreshStatus" },{ "trigger": "UIBlurEffect.effectWithStyle \t class UIBlurEffect -> UIBlurEffect
" , "contents": "UIBlurEffect.effectWithStyle(${1:UIBlurEffectStyle})" },{ "trigger": "rangeEnclosingPosition \t func unknown -> UITextRange?
" , "contents": "rangeEnclosingPosition(${1:UITextPosition}, withGranularity:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "NSObject.setAccessibilityTraits \t class NSObject -> void" , "contents": "NSObject.setAccessibilityTraits(${1:UIAccessibilityTraits})" },{ "trigger": "UIAlertController.alertControllerWithTitle \t class UIAlertController -> Self
" , "contents": "UIAlertController.alertControllerWithTitle(${1:String?}, message:${2:String?}, preferredStyle:${3:UIAlertControllerStyle})" },{ "trigger": "NSIndexPath.indexPathForRow \t class NSIndexPath -> Self
" , "contents": "NSIndexPath.indexPathForRow(${1:Int}, inSection:${2:Int})" },{ "trigger": "hidesBarsOnSwipe \t BOOL", "contents": "hidesBarsOnSwipe" },{ "trigger": "NSLayoutAnchor \t NSLayoutAnchor", "contents": "NSLayoutAnchor" },{ "trigger": "UIBarItem.appearanceWhenContainedInInstancesOfClasses \t class UIBarItem -> Self
" , "contents": "UIBarItem.appearanceWhenContainedInInstancesOfClasses(${1:[AnyObject.Type]})" },{ "trigger": "setExtraLineFragmentRect \t func NSLayoutManager -> void" , "contents": "setExtraLineFragmentRect(${1:CGRect}, usedRect:${2:CGRect}, textContainer:${3:NSTextContainer})" },{ "trigger": "setAttributedTitle \t func UIButton -> void" , "contents": "setAttributedTitle(${1:NSAttributedString?}, forState:${2:UIControlState})" },{ "trigger": "NSTextStorageDidProcessEditingNotification \t String", "contents": "NSTextStorageDidProcessEditingNotification" },{ "trigger": "layoutManager \t func unknown -> BOOL
" , "contents": "layoutManager(${1:NSLayoutManager}, shouldBreakLineByWordBeforeCharacterAtIndex:${2:Int})" },{ "trigger": "generatesDeviceOrientationNotifications \t BOOL", "contents": "generatesDeviceOrientationNotifications" },{ "trigger": "adjustsImageWhenDisabled \t BOOL", "contents": "adjustsImageWhenDisabled" },{ "trigger": "clipsToBounds \t BOOL", "contents": "clipsToBounds" },{ "trigger": "set \t func UIColor -> void" , "contents": "set(${1:})" },{ "trigger": "caretRectForPosition \t func unknown -> CGRect
" , "contents": "caretRectForPosition(${1:UITextPosition})" },{ "trigger": "positionWithinRange \t func UITextView -> UITextPosition?
" , "contents": "positionWithinRange(${1:UITextRange}, atCharacterOffset:${2:Int})" },{ "trigger": "tableView \t func unknown -> [UITableViewRowAction]?
" , "contents": "tableView(${1:UITableView}, editActionsForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "getLineDash \t func UIBezierPath -> void" , "contents": "getLineDash(${1:UnsafeMutablePointer<CGFloat>}, count:${2:UnsafeMutablePointer<Int>}, phase:${3:UnsafeMutablePointer<CGFloat>})" },{ "trigger": "shouldInvalidateLayoutForBoundsChange \t func UICollectionViewLayout -> BOOL
" , "contents": "shouldInvalidateLayoutForBoundsChange(${1:CGRect})" },{ "trigger": "y \t UIAccelerationValue", "contents": "y" },{ "trigger": "shouldPresentInFullscreen \t func UIPresentationController -> BOOL
" , "contents": "shouldPresentInFullscreen(${1:})" },{ "trigger": "willPresentSearchController \t func unknown -> void" , "contents": "willPresentSearchController(${1:UISearchController})" },{ "trigger": "tableView \t func UITableViewController -> NSIndexPath?
" , "contents": "tableView(${1:UITableView}, willDeselectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "Receipt \t UIPrinterJobTypes", "contents": "Receipt" },{ "trigger": "UIImage.imageWithCGImage \t class UIImage -> UIImage
" , "contents": "UIImage.imageWithCGImage(${1:CGImage})" },{ "trigger": "NSObject.accessibilityDecrement \t class NSObject -> void" , "contents": "NSObject.accessibilityDecrement(${1:})" },{ "trigger": "UIColor.supportsSecureCoding \t class UIColor -> BOOL
" , "contents": "UIColor.supportsSecureCoding(${1:})" },{ "trigger": "minimumLineSpacing \t CGFloat", "contents": "minimumLineSpacing" },{ "trigger": "truncatedGlyphRangeInLineFragmentForGlyphAtIndex \t func NSLayoutManager -> NSRange
" , "contents": "truncatedGlyphRangeInLineFragmentForGlyphAtIndex(${1:Int})" },{ "trigger": "UIViewAnimationTransition \t UIViewAnimationTransition", "contents": "UIViewAnimationTransition" },{ "trigger": "itemPositioning \t UITabBarItemPositioning", "contents": "itemPositioning" },{ "trigger": "pasteboardTypes \t func UIPasteboard -> [String]
" , "contents": "pasteboardTypes(${1:})" },{ "trigger": "canCancelContentTouches \t BOOL", "contents": "canCancelContentTouches" },{ "trigger": "NSValue.valueWithCGRect \t class NSValue -> NSValue
" , "contents": "NSValue.valueWithCGRect(${1:CGRect})" },{ "trigger": "UIPageViewControllerOptionInterPageSpacingKey \t String", "contents": "UIPageViewControllerOptionInterPageSpacingKey" },{ "trigger": "attachmentSizeForGlyphAtIndex \t func NSLayoutManager -> CGSize
" , "contents": "attachmentSizeForGlyphAtIndex(${1:Int})" },{ "trigger": "style \t UIAlertActionStyle", "contents": "style" },{ "trigger": "gapBetweenPages \t CGFloat", "contents": "gapBetweenPages" },{ "trigger": "searchDisplayController \t func unknown -> void" , "contents": "searchDisplayController(${1:UISearchDisplayController}, willHideSearchResultsTableView:${2:UITableView})" },{ "trigger": "layoutManager \t func unknown -> void" , "contents": "layoutManager(${1:NSLayoutManager}, textContainer:${2:NSTextContainer}, didChangeGeometryFromSize:${3:CGSize})" },{ "trigger": "completionCurve \t func unknown -> UIViewAnimationCurve
" , "contents": "completionCurve(${1:})" },{ "trigger": "presentedSubitemDidAppearAtURL \t func UIDocument -> void" , "contents": "presentedSubitemDidAppearAtURL(${1:NSURL})" },{ "trigger": "UIColor.colorWithHue \t class UIColor -> UIColor
" , "contents": "UIColor.colorWithHue(${1:CGFloat}, saturation:${2:CGFloat}, brightness:${3:CGFloat}, alpha:${4:CGFloat})" },{ "trigger": "contentScaleFactor \t CGFloat", "contents": "contentScaleFactor" },{ "trigger": "TouchCancel \t UIControlEvents", "contents": "TouchCancel" },{ "trigger": "encodeUIEdgeInsets \t func NSCoder -> void" , "contents": "encodeUIEdgeInsets(${1:UIEdgeInsets}, forKey:${2:String})" },{ "trigger": "layoutOrientation \t NSTextLayoutOrientation", "contents": "layoutOrientation" },{ "trigger": "CGVectorFromString \t func unknown -> CGVector
" , "contents": "CGVectorFromString(${1:String})" },{ "trigger": "shadowColor \t AnyObject", "contents": "shadowColor" },{ "trigger": "dequeueReusableCellWithReuseIdentifier \t func UICollectionView -> UICollectionViewCell
" , "contents": "dequeueReusableCellWithReuseIdentifier(${1:String}, forIndexPath:${2:NSIndexPath})" },{ "trigger": "insertItemsAtIndexPaths \t func UICollectionView -> void" , "contents": "insertItemsAtIndexPaths(${1:[NSIndexPath]})" },{ "trigger": "scrollViewDidEndDecelerating \t func UITableViewController -> void" , "contents": "scrollViewDidEndDecelerating(${1:UIScrollView})" },{ "trigger": "UIAccessibilityIsBoldTextEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsBoldTextEnabled(${1:})" },{ "trigger": "positionFromPosition \t func UITextField -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, offset:${2:Int})" },{ "trigger": "progressViewStyle \t UIProgressViewStyle", "contents": "progressViewStyle" },{ "trigger": "NSObject.toggleItalics \t class NSObject -> void" , "contents": "NSObject.toggleItalics(${1:AnyObject?})" },{ "trigger": "setBackgroundImage \t func UISearchBar -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forBarPosition:${2:UIBarPosition}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "textViewDidEndEditing \t func unknown -> void" , "contents": "textViewDidEndEditing(${1:UITextView})" },{ "trigger": "tabBar \t func UITabBarController -> void" , "contents": "tabBar(${1:UITabBar}, didEndCustomizingItems:${2:[UITabBarItem]}, changed:${3:BOOL})" },{ "trigger": "UIScreenModeDidChangeNotification \t String", "contents": "UIScreenModeDidChangeNotification" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didEndDisplayingCell:${2:UITableViewCell}, forRowAtIndexPath:${3:NSIndexPath})" },{ "trigger": "maximumZoomScale \t CGFloat", "contents": "maximumZoomScale" },{ "trigger": "nibName \t String", "contents": "nibName" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, didDeselectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "setTranslatesReferenceBoundsIntoBoundaryWithInsets \t func UICollisionBehavior -> void" , "contents": "setTranslatesReferenceBoundsIntoBoundaryWithInsets(${1:UIEdgeInsets})" },{ "trigger": "batteryMonitoringEnabled \t BOOL", "contents": "batteryMonitoringEnabled" },{ "trigger": "NSControlCharacterHorizontalTabAction \t Int", "contents": "NSControlCharacterHorizontalTabAction" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, canFocusItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "tableView \t func UITableViewController -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldHighlightRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIMutableUserNotificationAction \t UIMutableUserNotificationAction", "contents": "UIMutableUserNotificationAction" },{ "trigger": "setTitleTextAttributes \t func UISegmentedControl -> void" , "contents": "setTitleTextAttributes(${1:[NSObject }, forState:${2:UIControlState})" },{ "trigger": "mirroredScreen \t UIScreen", "contents": "mirroredScreen" },{ "trigger": "startProvidingItemAtURL \t func NSFileProviderExtension -> Void
" , "contents": "startProvidingItemAtURL(${1:NSURL}, completionHandler:${2:NSError? -> Void})" },{ "trigger": "prepareForReuse \t func UITableViewCell -> void" , "contents": "prepareForReuse(${1:})" },{ "trigger": "setImage \t func UISegmentedControl -> void" , "contents": "setImage(${1:UIImage?}, forSegmentAtIndex:${2:Int})" },{ "trigger": "setTitle \t func UIButton -> void" , "contents": "setTitle(${1:String?}, forState:${2:UIControlState})" },{ "trigger": "showInView \t func UIActionSheet -> void" , "contents": "showInView(${1:UIView})" },{ "trigger": "addConstraint \t func UIView -> void" , "contents": "addConstraint(${1:NSLayoutConstraint})" },{ "trigger": "UIAccessibilityTraitCausesPageTurn \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitCausesPageTurn" },{ "trigger": "delegate \t UIDocumentInteractionControllerDelegate", "contents": "delegate" },{ "trigger": "UIFontWeightUltraLight \t CGFloat", "contents": "UIFontWeightUltraLight" },{ "trigger": "documentMenu \t func unknown -> void" , "contents": "documentMenu(${1:UIDocumentMenuViewController}, didPickDocumentPicker:${2:UIDocumentPickerViewController})" },{ "trigger": "drawAtPoint \t func NSString -> CGSize
" , "contents": "drawAtPoint(${1:CGPoint}, forWidth:${2:CGFloat}, withFont:${3:UIFont!}, minFontSize:${4:CGFloat}, actualFontSize:${5:UnsafeMutablePointer<CGFloat>}, lineBreakMode:${6:NSLineBreakMode}, baselineAdjustment:${7:UIBaselineAdjustment})" },{ "trigger": "selectable \t BOOL", "contents": "selectable" },{ "trigger": "numberOfTapsRequired \t Int", "contents": "numberOfTapsRequired" },{ "trigger": "UITableViewCellFocusStyle \t UITableViewCellFocusStyle", "contents": "UITableViewCellFocusStyle" },{ "trigger": "webViewDidFinishLoad \t func unknown -> void" , "contents": "webViewDidFinishLoad(${1:UIWebView})" },{ "trigger": "regionByIntersectionWithRegion \t func UIRegion -> Self
" , "contents": "regionByIntersectionWithRegion(${1:UIRegion})" },{ "trigger": "storyboard \t UIStoryboard", "contents": "storyboard" },{ "trigger": "estimatedPropertiesExpectingUpdates \t UITouchProperties", "contents": "estimatedPropertiesExpectingUpdates" },{ "trigger": "UIBarItem.appearanceForTraitCollection \t class UIBarItem -> Self
" , "contents": "UIBarItem.appearanceForTraitCollection(${1:UITraitCollection}, whenContainedInInstancesOfClasses:${2:[AnyObject.Type]})" },{ "trigger": "tabBar \t func UITabBarController -> void" , "contents": "tabBar(${1:UITabBar}, didSelectItem:${2:UITabBarItem})" },{ "trigger": "collectionView \t func unknown -> CGFloat
" , "contents": "collectionView(${1:UICollectionView}, layout:${2:UICollectionViewLayout}, minimumInteritemSpacingForSectionAtIndex:${3:Int})" },{ "trigger": "UIAccessibilityTraitStaticText \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitStaticText" },{ "trigger": "setTitlePositionAdjustment \t func UIBarButtonItem -> void" , "contents": "setTitlePositionAdjustment(${1:UIOffset}, forBarMetrics:${2:UIBarMetrics})" },{ "trigger": "frictionTorque \t CGFloat", "contents": "frictionTorque" },{ "trigger": "readFromFileURL \t func NSMutableAttributedString -> void" , "contents": "readFromFileURL(${1:NSURL}, options:${2:[NSObject }, documentAttributes:${3:AutoreleasingUnsafeMutablePointer<NSDictionary?>})" },{ "trigger": "selectedItem \t UITabBarItem", "contents": "selectedItem" },{ "trigger": "NSObject.setAccessibilityNavigationStyle \t class NSObject -> void" , "contents": "NSObject.setAccessibilityNavigationStyle(${1:UIAccessibilityNavigationStyle})" },{ "trigger": "UITraitCollection.traitCollectionWithDisplayScale \t class UITraitCollection -> UITraitCollection
" , "contents": "UITraitCollection.traitCollectionWithDisplayScale(${1:CGFloat})" },{ "trigger": "numberOfGlyphs \t Int", "contents": "numberOfGlyphs" },{ "trigger": "encodeWithCoder \t func UIImageAsset -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "tableView \t func UITableViewController -> UITableViewCell
" , "contents": "tableView(${1:UITableView}, cellForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIImageView \t UIImageView", "contents": "UIImageView" },{ "trigger": "animateAlongsideTransitionInView \t func unknown -> Void?," , "contents": "animateAlongsideTransitionInView(${1:UIView?}, animation:${2:UIViewControllerTransitionCoordinatorContext -> Void?}, completion:${3:UIViewControllerTransitionCoordinatorContext -> Void?})" },{ "trigger": "separatorEffect \t UIVisualEffect", "contents": "separatorEffect" },{ "trigger": "selectedBackgroundView \t UIView", "contents": "selectedBackgroundView" },{ "trigger": "adjustsFontSizeToFitWidth \t BOOL", "contents": "adjustsFontSizeToFitWidth" },{ "trigger": "TransitionFlipFromTop \t UIViewAnimationOptions", "contents": "TransitionFlipFromTop" },{ "trigger": "searchTextPositionAdjustment \t UIOffset", "contents": "searchTextPositionAdjustment" },{ "trigger": "UISnapBehavior \t UISnapBehavior", "contents": "UISnapBehavior" },{ "trigger": "pickerView \t func unknown -> String?
" , "contents": "pickerView(${1:UIPickerView}, accessibilityHintForComponent:${2:Int})" },{ "trigger": "interactionControllerForPresentation \t func UISearchController -> UIViewControllerInteractiveTransitioning?
" , "contents": "interactionControllerForPresentation(${1:UIViewControllerAnimatedTransitioning})" },{ "trigger": "NSAttributedString.attributedStringWithAttachment \t class NSAttributedString -> NSAttributedString
" , "contents": "NSAttributedString.attributedStringWithAttachment(${1:NSTextAttachment})" },{ "trigger": "prepareForPopoverPresentation \t func unknown -> void" , "contents": "prepareForPopoverPresentation(${1:UIPopoverPresentationController})" },{ "trigger": "willDismissSearchController \t func unknown -> void" , "contents": "willDismissSearchController(${1:UISearchController})" },{ "trigger": "presentedSubitemAtURL \t func UIDocument -> void" , "contents": "presentedSubitemAtURL(${1:NSURL}, didLoseVersion:${2:NSFileVersion})" },{ "trigger": "UITextInputTextBackgroundColorKey \t String", "contents": "UITextInputTextBackgroundColorKey" },{ "trigger": "CGSizeValue \t func NSValue -> CGSize
" , "contents": "CGSizeValue(${1:})" },{ "trigger": "UIScreenBrightnessDidChangeNotification \t String", "contents": "UIScreenBrightnessDidChangeNotification" },{ "trigger": "alertBody \t String", "contents": "alertBody" },{ "trigger": "hyphenationFactor \t Float", "contents": "hyphenationFactor" },{ "trigger": "automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers \t func UIViewController -> BOOL
" , "contents": "automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers(${1:})" },{ "trigger": "NSControlCharacterLineBreakAction \t Int", "contents": "NSControlCharacterLineBreakAction" },{ "trigger": "finalLayoutAttributesForDisappearingDecorationElementOfKind \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "finalLayoutAttributesForDisappearingDecorationElementOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "representedElementCategory \t UICollectionElementCategory", "contents": "representedElementCategory" },{ "trigger": "setTitleTextAttributes \t func UIBarItem -> void" , "contents": "setTitleTextAttributes(${1:[String }, forState:${2:UIControlState})" },{ "trigger": "UICollectionViewTransitionLayout \t UICollectionViewTransitionLayout", "contents": "UICollectionViewTransitionLayout" },{ "trigger": "UIScrollViewDecelerationRateFast \t CGFloat", "contents": "UIScrollViewDecelerationRateFast" },{ "trigger": "clearsOnInsertion \t BOOL", "contents": "clearsOnInsertion" },{ "trigger": "UINavigationItem \t UINavigationItem", "contents": "UINavigationItem" },{ "trigger": "LandscapePhone \t UIBarMetrics", "contents": "LandscapePhone" },{ "trigger": "canPerformAction \t func UIResponder -> BOOL
" , "contents": "canPerformAction(${1:Selector}, withSender:${2:AnyObject?})" },{ "trigger": "NSParagraphStyle.defaultParagraphStyle \t class NSParagraphStyle -> NSParagraphStyle
" , "contents": "NSParagraphStyle.defaultParagraphStyle(${1:})" },{ "trigger": "minimumValue \t Double", "contents": "minimumValue" },{ "trigger": "addBoundaryWithIdentifier \t func UICollisionBehavior -> void" , "contents": "addBoundaryWithIdentifier(${1:NSCopying}, forPath:${2:UIBezierPath})" },{ "trigger": "stringByEvaluatingJavaScriptFromString \t func UIWebView -> String?
" , "contents": "stringByEvaluatingJavaScriptFromString(${1:String})" },{ "trigger": "NSWritingDirectionAttributeName \t String", "contents": "NSWritingDirectionAttributeName" },{ "trigger": "maximum \t CGFloat", "contents": "maximum" },{ "trigger": "Right \t UIFocusHeading", "contents": "Right" },{ "trigger": "UIAccessibilityFocusedElement \t func unknown -> AnyObject?
" , "contents": "UIAccessibilityFocusedElement(${1:String?})" },{ "trigger": "drawAsPatternInRect \t func UIImage -> void" , "contents": "drawAsPatternInRect(${1:CGRect})" },{ "trigger": "UIAccessibilityDarkerSystemColorsStatusDidChangeNotification \t String", "contents": "UIAccessibilityDarkerSystemColorsStatusDidChangeNotification" },{ "trigger": "setContentViewController \t func UIPopoverController -> void" , "contents": "setContentViewController(${1:UIViewController}, animated:${2:BOOL})" },{ "trigger": "Down \t UIPopoverArrowDirection", "contents": "Down" },{ "trigger": "scrollViewWillBeginDecelerating \t func UICollectionViewController -> void" , "contents": "scrollViewWillBeginDecelerating(${1:UIScrollView})" },{ "trigger": "UIBarButtonItemGroup \t UIBarButtonItemGroup", "contents": "UIBarButtonItemGroup" },{ "trigger": "UIImagePickerControllerLivePhoto \t String", "contents": "UIImagePickerControllerLivePhoto" },{ "trigger": "setStatusBarOrientation \t func UIApplication -> void" , "contents": "setStatusBarOrientation(${1:UIInterfaceOrientation}, animated:${2:BOOL})" },{ "trigger": "collectionView \t func unknown -> UICollectionReusableView
" , "contents": "collectionView(${1:UICollectionView}, viewForSupplementaryElementOfKind:${2:String}, atIndexPath:${3:NSIndexPath})" },{ "trigger": "UITabBarItem \t UITabBarItem", "contents": "UITabBarItem" },{ "trigger": "Link \t UIDataDetectorTypes", "contents": "Link" },{ "trigger": "UIColor.redColor \t class UIColor -> UIColor
" , "contents": "UIColor.redColor(${1:})" },{ "trigger": "deleteBackward \t func UITextView -> void" , "contents": "deleteBackward(${1:})" },{ "trigger": "activationMode \t UIUserNotificationActivationMode", "contents": "activationMode" },{ "trigger": "force \t CGFloat", "contents": "force" },{ "trigger": "setNeedsStatusBarAppearanceUpdate \t func UIViewController -> void" , "contents": "setNeedsStatusBarAppearanceUpdate(${1:})" },{ "trigger": "selectItemAtIndexPath \t func UICollectionView -> void" , "contents": "selectItemAtIndexPath(${1:NSIndexPath?}, animated:${2:BOOL}, scrollPosition:${3:UICollectionViewScrollPosition})" },{ "trigger": "awakeFromNib \t func NSObject -> void" , "contents": "awakeFromNib(${1:})" },{ "trigger": "valueForPasteboardType \t func UIPasteboard -> AnyObject?
" , "contents": "valueForPasteboardType(${1:String})" },{ "trigger": "TransitionCrossDissolve \t UIViewAnimationOptions", "contents": "TransitionCrossDissolve" },{ "trigger": "updateInteractiveMovementTargetPosition \t func UICollectionView -> void" , "contents": "updateInteractiveMovementTargetPosition(${1:CGPoint})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, moveRowAtIndexPath:${2:NSIndexPath}, toIndexPath:${3:NSIndexPath})" },{ "trigger": "invalidateDisplayForGlyphRange \t func NSLayoutManager -> void" , "contents": "invalidateDisplayForGlyphRange(${1:NSRange})" },{ "trigger": "hidesForSinglePage \t BOOL", "contents": "hidesForSinglePage" },{ "trigger": "UIEventSubtype \t UIEventSubtype", "contents": "UIEventSubtype" },{ "trigger": "UINibExternalObjects \t String", "contents": "UINibExternalObjects" },{ "trigger": "applicationShouldRequestHealthAuthorization \t func unknown -> void" , "contents": "applicationShouldRequestHealthAuthorization(${1:UIApplication})" },{ "trigger": "setStatusBarHidden \t func UIApplication -> void" , "contents": "setStatusBarHidden(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "UIApplicationLaunchOptionsBluetoothCentralsKey \t String", "contents": "UIApplicationLaunchOptionsBluetoothCentralsKey" },{ "trigger": "itemSpacing \t CGFloat", "contents": "itemSpacing" },{ "trigger": "UILineBreakMode \t UILineBreakMode", "contents": "UILineBreakMode" },{ "trigger": "UIKeyboardFrameBeginUserInfoKey \t String", "contents": "UIKeyboardFrameBeginUserInfoKey" },{ "trigger": "UICollectionElementKindSectionFooter \t String", "contents": "UICollectionElementKindSectionFooter" },{ "trigger": "decodeCGVectorForKey \t func NSCoder -> CGVector
" , "contents": "decodeCGVectorForKey(${1:String})" },{ "trigger": "UIColor.darkTextColor \t class UIColor -> UIColor
" , "contents": "UIColor.darkTextColor(${1:})" },{ "trigger": "UIPushBehavior \t UIPushBehavior", "contents": "UIPushBehavior" },{ "trigger": "percentComplete \t CGFloat", "contents": "percentComplete" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldShowMenuForItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "tableView \t func UITableViewController -> CGFloat
" , "contents": "tableView(${1:UITableView}, estimatedHeightForFooterInSection:${2:Int})" },{ "trigger": "UIImage.animatedResizableImageNamed \t class UIImage -> UIImage?
" , "contents": "UIImage.animatedResizableImageNamed(${1:String}, capInsets:${2:UIEdgeInsets}, duration:${3:NSTimeInterval})" },{ "trigger": "applicationWillEnterForeground \t func unknown -> void" , "contents": "applicationWillEnterForeground(${1:UIApplication})" },{ "trigger": "tableView \t func unknown -> CGFloat
" , "contents": "tableView(${1:UITableView}, heightForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didEndDisplayingFooterView:${2:UIView}, forSection:${3:Int})" },{ "trigger": "UIFont.preferredFontForTextStyle \t class UIFont -> UIFont
" , "contents": "UIFont.preferredFontForTextStyle(${1:String})" },{ "trigger": "searchResultsTitle \t String", "contents": "searchResultsTitle" },{ "trigger": "UIUserNotificationActivationMode \t UIUserNotificationActivationMode", "contents": "UIUserNotificationActivationMode" },{ "trigger": "activityViewController \t func UIActivity -> UIViewController?
" , "contents": "activityViewController(${1:})" },{ "trigger": "willPresentActionSheet \t func UIDocumentInteractionController -> void" , "contents": "willPresentActionSheet(${1:UIActionSheet})" },{ "trigger": "toggleBoldface \t func NSObject -> void" , "contents": "toggleBoldface(${1:AnyObject?})" },{ "trigger": "representativeItem \t UIBarButtonItem", "contents": "representativeItem" },{ "trigger": "UITableViewHeaderFooterView \t UITableViewHeaderFooterView", "contents": "UITableViewHeaderFooterView" },{ "trigger": "overscanCompensationInsets \t UIEdgeInsets", "contents": "overscanCompensationInsets" },{ "trigger": "copyWithZone \t func UIRegion -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "UIPrinter.printerWithURL \t class UIPrinter -> UIPrinter
" , "contents": "UIPrinter.printerWithURL(${1:NSURL})" },{ "trigger": "UIAccessibilityReduceMotionStatusDidChangeNotification \t String", "contents": "UIAccessibilityReduceMotionStatusDidChangeNotification" },{ "trigger": "constraintLessThanOrEqualToAnchor \t func NSLayoutAnchor -> NSLayoutConstraint!
" , "contents": "constraintLessThanOrEqualToAnchor(${1:NSLayoutAnchor!})" },{ "trigger": "UILocalNotification \t UILocalNotification", "contents": "UILocalNotification" },{ "trigger": "sourceViewController \t UIViewController", "contents": "sourceViewController" },{ "trigger": "UIKeyboardDidShowNotification \t String", "contents": "UIKeyboardDidShowNotification" },{ "trigger": "collectionView \t func UICollectionViewController -> CGPoint
" , "contents": "collectionView(${1:UICollectionView}, targetContentOffsetForProposedContentOffset:${2:CGPoint})" },{ "trigger": "cancelsTouchesInView \t BOOL", "contents": "cancelsTouchesInView" },{ "trigger": "UIUserNotificationSettings.settingsForTypes \t class UIUserNotificationSettings -> Self
" , "contents": "UIUserNotificationSettings.settingsForTypes(${1:UIUserNotificationType}, categories:${2:Set<UIUserNotificationCategory>?})" },{ "trigger": "keyPathsAndRelativeValuesForViewerOffset \t func UIMotionEffect -> [String" , "contents": "keyPathsAndRelativeValuesForViewerOffset(${1:UIOffset})" },{ "trigger": "drawInRect \t func NSAttributedString -> void" , "contents": "drawInRect(${1:CGRect})" },{ "trigger": "hidesBarsWhenVerticallyCompact \t BOOL", "contents": "hidesBarsWhenVerticallyCompact" },{ "trigger": "UIImage.imageWithData \t class UIImage -> UIImage?
" , "contents": "UIImage.imageWithData(${1:NSData}, scale:${2:CGFloat})" },{ "trigger": "cancelButtonIndex \t Int", "contents": "cancelButtonIndex" },{ "trigger": "activityViewController \t func UIActivityItemProvider -> String
" , "contents": "activityViewController(${1:UIActivityViewController}, dataTypeIdentifierForActivityType:${2:String?})" },{ "trigger": "encodeWithCoder \t func UICollectionViewLayout -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "batteryState \t UIDeviceBatteryState", "contents": "batteryState" },{ "trigger": "superview \t UIView", "contents": "superview" },{ "trigger": "scrollViewDidEndDecelerating \t func UICollectionViewController -> void" , "contents": "scrollViewDidEndDecelerating(${1:UIScrollView})" },{ "trigger": "Photo \t UIPrinterJobTypes", "contents": "Photo" },{ "trigger": "possibleTitles \t Set", "contents": "possibleTitles" },{ "trigger": "UIUserInterfaceLayoutDirection \t UIUserInterfaceLayoutDirection", "contents": "UIUserInterfaceLayoutDirection" },{ "trigger": "setOverrideTraitCollection \t func UIViewController -> void" , "contents": "setOverrideTraitCollection(${1:UITraitCollection?}, forChildViewController:${2:UIViewController})" },{ "trigger": "firstBaselineAnchor \t NSLayoutYAxisAnchor", "contents": "firstBaselineAnchor" },{ "trigger": "panGestureRecognizer \t UIPanGestureRecognizer", "contents": "panGestureRecognizer" },{ "trigger": "processEditingForTextStorage \t func NSLayoutManager -> void" , "contents": "processEditingForTextStorage(${1:NSTextStorage}, edited:${2:NSTextStorageEditActions}, range:${3:NSRange}, changeInLength:${4:Int}, invalidatedRange:${5:NSRange})" },{ "trigger": "printInteractionControllerWillStartJob \t func unknown -> void" , "contents": "printInteractionControllerWillStartJob(${1:UIPrintInteractionController})" },{ "trigger": "UINavigationBar \t UINavigationBar", "contents": "UINavigationBar" },{ "trigger": "UIFieldBehavior.linearGravityFieldWithVector \t class UIFieldBehavior -> Self
" , "contents": "UIFieldBehavior.linearGravityFieldWithVector(${1:CGVector})" },{ "trigger": "priority \t UILayoutPriority", "contents": "priority" },{ "trigger": "snapshotViewAfterScreenUpdates \t func UIScreen -> UIView
" , "contents": "snapshotViewAfterScreenUpdates(${1:BOOL})" },{ "trigger": "tableView \t func UIPickerView -> Int
" , "contents": "tableView(${1:UITableView}, sectionForSectionIndexTitle:${2:String}, atIndex:${3:Int})" },{ "trigger": "encodeUIOffset \t func NSCoder -> void" , "contents": "encodeUIOffset(${1:UIOffset}, forKey:${2:String})" },{ "trigger": "indexPathForElementWithModelIdentifier \t func unknown -> NSIndexPath?
" , "contents": "indexPathForElementWithModelIdentifier(${1:String}, inView:${2:UIView})" },{ "trigger": "UIMenuControllerDidShowMenuNotification \t String", "contents": "UIMenuControllerDidShowMenuNotification" },{ "trigger": "FlexibleWidth \t UIViewAutoresizing", "contents": "FlexibleWidth" },{ "trigger": "setRightBarButtonItem \t func UINavigationItem -> void" , "contents": "setRightBarButtonItem(${1:UIBarButtonItem?}, animated:${2:BOOL})" },{ "trigger": "setIncrementImage \t func UIStepper -> void" , "contents": "setIncrementImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "cancelInteractiveTransition \t func UIPercentDrivenInteractiveTransition -> void" , "contents": "cancelInteractiveTransition(${1:})" },{ "trigger": "showsInvisibleCharacters \t BOOL", "contents": "showsInvisibleCharacters" },{ "trigger": "UIActionSheet \t UIActionSheet", "contents": "UIActionSheet" },{ "trigger": "UISplitViewControllerAutomaticDimension \t CGFloat", "contents": "UISplitViewControllerAutomaticDimension" },{ "trigger": "showsScopeBar \t BOOL", "contents": "showsScopeBar" },{ "trigger": "UIApplicationProtectedDataDidBecomeAvailable \t String", "contents": "UIApplicationProtectedDataDidBecomeAvailable" },{ "trigger": "insertSegmentWithImage \t func UISegmentedControl -> void" , "contents": "insertSegmentWithImage(${1:UIImage?}, atIndex:${2:Int}, animated:${3:BOOL})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, willDisplayCell:${2:UITableViewCell}, forRowAtIndexPath:${3:NSIndexPath})" },{ "trigger": "UIAccessibilityIsSpeakScreenEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsSpeakScreenEnabled(${1:})" },{ "trigger": "Altitude \t UITouchProperties", "contents": "Altitude" },{ "trigger": "sendEvent \t func UIApplication -> void" , "contents": "sendEvent(${1:UIEvent})" },{ "trigger": "UIMenuController \t UIMenuController", "contents": "UIMenuController" },{ "trigger": "updateFocusIfNeeded \t func UIPresentationController -> void" , "contents": "updateFocusIfNeeded(${1:})" },{ "trigger": "NSObject.isAccessibilityElement \t class NSObject -> BOOL
" , "contents": "NSObject.isAccessibilityElement(${1:})" },{ "trigger": "UIContentSizeCategoryExtraExtraExtraLarge \t String", "contents": "UIContentSizeCategoryExtraExtraExtraLarge" },{ "trigger": "tableView \t func unknown -> UIView?
" , "contents": "tableView(${1:UITableView}, viewForFooterInSection:${2:Int})" },{ "trigger": "maximumNumberOfLines \t Int", "contents": "maximumNumberOfLines" },{ "trigger": "reuseIdentifier \t String", "contents": "reuseIdentifier" },{ "trigger": "delegate \t UIPopoverPresentationControllerDelegate", "contents": "delegate" },{ "trigger": "UIViewNoIntrinsicMetric \t CGFloat", "contents": "UIViewNoIntrinsicMetric" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didReceiveLocalNotification:${2:UILocalNotification})" },{ "trigger": "setEnabled \t func UISegmentedControl -> void" , "contents": "setEnabled(${1:BOOL}, forSegmentAtIndex:${2:Int})" },{ "trigger": "sectionIndexTitlesForTableView \t func UITableViewController -> [String]?
" , "contents": "sectionIndexTitlesForTableView(${1:UITableView})" },{ "trigger": "UIImageResizingMode \t UIImageResizingMode", "contents": "UIImageResizingMode" },{ "trigger": "UIAccessibilitySpeechAttributePunctuation \t String", "contents": "UIAccessibilitySpeechAttributePunctuation" },{ "trigger": "frequency \t CGFloat", "contents": "frequency" },{ "trigger": "makeKeyWindow \t func UIWindow -> void" , "contents": "makeKeyWindow(${1:})" },{ "trigger": "UIActivityTypePostToTencentWeibo \t String", "contents": "UIActivityTypePostToTencentWeibo" },{ "trigger": "indexPathForCell \t func UICollectionView -> NSIndexPath?
" , "contents": "indexPathForCell(${1:UICollectionViewCell})" },{ "trigger": "addItems \t func UIPasteboard -> void" , "contents": "addItems(${1:[[String })" },{ "trigger": "CGColor \t CGColor", "contents": "CGColor" },{ "trigger": "baseWritingDirectionForPosition \t func unknown -> UITextWritingDirection
" , "contents": "baseWritingDirectionForPosition(${1:UITextPosition}, inDirection:${2:UITextStorageDirection})" },{ "trigger": "encodeWithCoder \t func NSParagraphStyle -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "UINib \t UINib", "contents": "UINib" },{ "trigger": "TransitionNone \t UIViewAnimationOptions", "contents": "TransitionNone" },{ "trigger": "tapCount \t Int", "contents": "tapCount" },{ "trigger": "UIMenuControllerMenuFrameDidChangeNotification \t String", "contents": "UIMenuControllerMenuFrameDidChangeNotification" },{ "trigger": "isAnimating \t func UIActivityIndicatorView -> BOOL
" , "contents": "isAnimating(${1:})" },{ "trigger": "Everything \t UICollisionBehaviorMode", "contents": "Everything" },{ "trigger": "indexOfAccessibilityElement \t func NSObject -> Int
" , "contents": "indexOfAccessibilityElement(${1:AnyObject})" },{ "trigger": "UIMotionEffect \t UIMotionEffect", "contents": "UIMotionEffect" },{ "trigger": "textStylingAtPosition \t func unknown -> [String" , "contents": "textStylingAtPosition(${1:UITextPosition}, inDirection:${2:UITextStorageDirection})" },{ "trigger": "type \t UIInterpolatingMotionEffectType", "contents": "type" },{ "trigger": "getWhite \t func UIColor -> BOOL
" , "contents": "getWhite(${1:UnsafeMutablePointer<CGFloat>}, alpha:${2:UnsafeMutablePointer<CGFloat>})" },{ "trigger": "Label \t UIPrinterJobTypes", "contents": "Label" },{ "trigger": "endRefreshing \t func UIRefreshControl -> void" , "contents": "endRefreshing(${1:})" },{ "trigger": "UIVisualEffect \t UIVisualEffect", "contents": "UIVisualEffect" },{ "trigger": "type \t String", "contents": "type" },{ "trigger": "UIWebPaginationMode \t UIWebPaginationMode", "contents": "UIWebPaginationMode" },{ "trigger": "containsPasteboardTypes \t func UIPasteboard -> BOOL
" , "contents": "containsPasteboardTypes(${1:[String]})" },{ "trigger": "snapshotViewAfterScreenUpdates \t func UIView -> UIView
" , "contents": "snapshotViewAfterScreenUpdates(${1:BOOL})" },{ "trigger": "UIPrinter \t UIPrinter", "contents": "UIPrinter" },{ "trigger": "itemSize \t CGSize", "contents": "itemSize" },{ "trigger": "preferredContentSize \t CGSize", "contents": "preferredContentSize" },{ "trigger": "extraLineFragmentTextContainer \t NSTextContainer", "contents": "extraLineFragmentTextContainer" },{ "trigger": "NSViewZoomDocumentAttribute \t String", "contents": "NSViewZoomDocumentAttribute" },{ "trigger": "majorRadiusTolerance \t CGFloat", "contents": "majorRadiusTolerance" },{ "trigger": "UIKeyInputUpArrow \t String", "contents": "UIKeyInputUpArrow" },{ "trigger": "UITraitCollection.traitCollectionWithUserInterfaceIdiom \t class UITraitCollection -> UITraitCollection
" , "contents": "UITraitCollection.traitCollectionWithUserInterfaceIdiom(${1:UIUserInterfaceIdiom})" },{ "trigger": "contents \t NSData", "contents": "contents" },{ "trigger": "UIContentSizeCategoryMedium \t String", "contents": "UIContentSizeCategoryMedium" },{ "trigger": "nativeBounds \t CGRect", "contents": "nativeBounds" },{ "trigger": "previouslyFocusedIndexPath \t NSIndexPath", "contents": "previouslyFocusedIndexPath" },{ "trigger": "UIReturnKeyType \t UIReturnKeyType", "contents": "UIReturnKeyType" },{ "trigger": "None \t UIRectEdge", "contents": "None" },{ "trigger": "scrollViewShouldScrollToTop \t func UIWebView -> BOOL
" , "contents": "scrollViewShouldScrollToTop(${1:UIScrollView})" },{ "trigger": "pageCount \t Int", "contents": "pageCount" },{ "trigger": "updateSearchResultsForSearchController \t func unknown -> void" , "contents": "updateSearchResultsForSearchController(${1:UISearchController})" },{ "trigger": "cellForRowAtIndexPath \t func UITableView -> UITableViewCell?
" , "contents": "cellForRowAtIndexPath(${1:NSIndexPath})" },{ "trigger": "NSObject.accessibilityElementDidLoseFocus \t class NSObject -> void" , "contents": "NSObject.accessibilityElementDidLoseFocus(${1:})" },{ "trigger": "endAppearanceTransition \t func UIViewController -> void" , "contents": "endAppearanceTransition(${1:})" },{ "trigger": "UIView.layerClass \t class UIView -> AnyClass
" , "contents": "UIView.layerClass(${1:})" },{ "trigger": "ShowingDeleteConfirmationMask \t UITableViewCellStateMask", "contents": "ShowingDeleteConfirmationMask" },{ "trigger": "scrollViewWillBeginDragging \t func UIWebView -> void" , "contents": "scrollViewWillBeginDragging(${1:UIScrollView})" },{ "trigger": "UIImagePickerController.availableMediaTypesForSourceType \t class UIImagePickerController -> [String]?
" , "contents": "UIImagePickerController.availableMediaTypesForSourceType(${1:UIImagePickerControllerSourceType})" },{ "trigger": "willRotateToInterfaceOrientation \t func UIViewController -> void" , "contents": "willRotateToInterfaceOrientation(${1:UIInterfaceOrientation}, duration:${2:NSTimeInterval})" },{ "trigger": "activityDidFinish \t func UIActivity -> void" , "contents": "activityDidFinish(${1:BOOL})" },{ "trigger": "paginationBreakingMode \t UIWebPaginationBreakingMode", "contents": "paginationBreakingMode" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, moveItemAtIndexPath:${2:NSIndexPath}, toIndexPath:${3:NSIndexPath})" },{ "trigger": "preferredAction \t UIAlertAction", "contents": "preferredAction" },{ "trigger": "layoutManager \t func unknown -> CGFloat
" , "contents": "layoutManager(${1:NSLayoutManager}, paragraphSpacingBeforeGlyphAtIndex:${2:Int}, withProposedLineFragmentRect:${3:CGRect})" },{ "trigger": "UIGraphicsBeginImageContextWithOptions \t func UIGravityBehavior -> void" , "contents": "UIGraphicsBeginImageContextWithOptions(${1:CGSize}, _:${2:BOOL}, _:${3:CGFloat})" },{ "trigger": "addLinearVelocity \t func UIDynamicItemBehavior -> void" , "contents": "addLinearVelocity(${1:CGPoint}, forItem:${2:UIDynamicItem})" },{ "trigger": "closestPositionToPoint \t func unknown -> UITextPosition?
" , "contents": "closestPositionToPoint(${1:CGPoint})" },{ "trigger": "activityViewController \t func unknown -> AnyObject?
" , "contents": "activityViewController(${1:UIActivityViewController}, itemForActivityType:${2:String})" },{ "trigger": "Up \t UISwipeGestureRecognizerDirection", "contents": "Up" },{ "trigger": "backgroundImageForState \t func UIBarButtonItem -> UIImage?
" , "contents": "backgroundImageForState(${1:UIControlState}, style:${2:UIBarButtonItemStyle}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "fillWithBlendMode \t func UIBezierPath -> void" , "contents": "fillWithBlendMode(${1:CGBlendMode}, alpha:${2:CGFloat})" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, canMoveItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "targetTransform \t func unknown -> CGAffineTransform
" , "contents": "targetTransform(${1:})" },{ "trigger": "setContentHuggingPriority \t func UIView -> void" , "contents": "setContentHuggingPriority(${1:UILayoutPriority}, forAxis:${2:UILayoutConstraintAxis})" },{ "trigger": "delegate \t UIPrintInteractionControllerDelegate", "contents": "delegate" },{ "trigger": "getGlyphsInRange \t func NSLayoutManager -> Int
" , "contents": "getGlyphsInRange(${1:NSRange}, glyphs:${2:UnsafeMutablePointer<CGGlyph>}, properties:${3:UnsafeMutablePointer<NSGlyphProperty>}, characterIndexes:${4:UnsafeMutablePointer<Int>}, bidiLevels:${5:UnsafeMutablePointer<UInt8>})" },{ "trigger": "installsStandardGestureForInteractiveMovement \t BOOL", "contents": "installsStandardGestureForInteractiveMovement" },{ "trigger": "layoutManager \t func unknown -> Int
" , "contents": "layoutManager(${1:NSLayoutManager}, shouldGenerateGlyphs:${2:UnsafePointer<CGGlyph>}, properties:${3:UnsafePointer<NSGlyphProperty>}, characterIndexes:${4:UnsafePointer<Int>}, font:${5:UIFont}, forGlyphRange:${6:NSRange})" },{ "trigger": "copyWithZone \t func UIFontDescriptor -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "UIMenuControllerWillShowMenuNotification \t String", "contents": "UIMenuControllerWillShowMenuNotification" },{ "trigger": "beginBackgroundTaskWithExpirationHandler \t func UIApplication -> Void?" , "contents": "beginBackgroundTaskWithExpirationHandler(${1: -> Void?})" },{ "trigger": "scrollToItemAtIndexPath \t func UICollectionView -> void" , "contents": "scrollToItemAtIndexPath(${1:NSIndexPath}, atScrollPosition:${2:UICollectionViewScrollPosition}, animated:${3:BOOL})" },{ "trigger": "actionSheet \t func unknown -> void" , "contents": "actionSheet(${1:UIActionSheet}, didDismissWithButtonIndex:${2:Int})" },{ "trigger": "delegate \t UIViewControllerPreviewingDelegate", "contents": "delegate" },{ "trigger": "finishInteractiveTransition \t func UIPercentDrivenInteractiveTransition -> void" , "contents": "finishInteractiveTransition(${1:})" },{ "trigger": "didUpdateFocusInContext \t func UIView -> void" , "contents": "didUpdateFocusInContext(${1:UIFocusUpdateContext}, withAnimationCoordinator:${2:UIFocusAnimationCoordinator})" },{ "trigger": "UIFloatRange \t UIFloatRange", "contents": "UIFloatRange" },{ "trigger": "encodeCGSize \t func NSCoder -> void" , "contents": "encodeCGSize(${1:CGSize}, forKey:${2:String})" },{ "trigger": "adjustsImageWhenHighlighted \t BOOL", "contents": "adjustsImageWhenHighlighted" },{ "trigger": "touchesForView \t func UIEvent -> Set UITouch ?
" , "contents": "touchesForView(${1:UIView})" },{ "trigger": "didMoveToSuperview \t func UIView -> void" , "contents": "didMoveToSuperview(${1:})" },{ "trigger": "tabBarController \t func unknown -> UIViewControllerAnimatedTransitioning?
" , "contents": "tabBarController(${1:UITabBarController}, animationControllerForTransitionFromViewController:${2:UIViewController}, toViewController:${3:UIViewController})" },{ "trigger": "popToViewController \t func UINavigationController -> [UIViewController]?
" , "contents": "popToViewController(${1:UIViewController}, animated:${2:BOOL})" },{ "trigger": "footerHeight \t CGFloat", "contents": "footerHeight" },{ "trigger": "tableView \t UITableView", "contents": "tableView" },{ "trigger": "documentInteractionControllerViewForPreview \t func unknown -> UIView?
" , "contents": "documentInteractionControllerViewForPreview(${1:UIDocumentInteractionController})" },{ "trigger": "axis \t UILayoutConstraintAxis", "contents": "axis" },{ "trigger": "NSValue.valueWithUIEdgeInsets \t class NSValue -> NSValue
" , "contents": "NSValue.valueWithUIEdgeInsets(${1:UIEdgeInsets})" },{ "trigger": "capInsets \t UIEdgeInsets", "contents": "capInsets" },{ "trigger": "performSegueWithIdentifier \t func UIViewController -> void" , "contents": "performSegueWithIdentifier(${1:String}, sender:${2:AnyObject?})" },{ "trigger": "UIKeyCommand \t UIKeyCommand", "contents": "UIKeyCommand" },{ "trigger": "removeDictationResultPlaceholder \t func unknown -> void" , "contents": "removeDictationResultPlaceholder(${1:AnyObject}, willInsertResult:${2:BOOL})" },{ "trigger": "toggleItalics \t func NSObject -> void" , "contents": "toggleItalics(${1:AnyObject?})" },{ "trigger": "UIApplicationInvalidInterfaceOrientationException \t String", "contents": "UIApplicationInvalidInterfaceOrientationException" },{ "trigger": "addTextFieldWithConfigurationHandler \t func UIAlertController -> Void?
" , "contents": "addTextFieldWithConfigurationHandler(${1:UITextField -> Void?})" },{ "trigger": "dictationRecognitionFailed \t func UITextView -> void" , "contents": "dictationRecognitionFailed(${1:})" },{ "trigger": "UIContentSizeCategoryNewValueKey \t String", "contents": "UIContentSizeCategoryNewValueKey" },{ "trigger": "DirectionMask \t NSLayoutFormatOptions", "contents": "DirectionMask" },{ "trigger": "targetDisplayModeForActionInSplitViewController \t func unknown -> UISplitViewControllerDisplayMode
" , "contents": "targetDisplayModeForActionInSplitViewController(${1:UISplitViewController})" },{ "trigger": "printInteractionController \t func unknown -> UIPrintPaper
" , "contents": "printInteractionController(${1:UIPrintInteractionController}, choosePaper:${2:[UIPrintPaper]})" },{ "trigger": "actualTrackingAdjustment \t CGFloat", "contents": "actualTrackingAdjustment" },{ "trigger": "bounds \t CGRect", "contents": "bounds" },{ "trigger": "sizeForChildContentContainer \t func UIViewController -> CGSize
" , "contents": "sizeForChildContentContainer(${1:UIContentContainer}, withParentContainerSize:${2:CGSize})" },{ "trigger": "printPaper \t UIPrintPaper", "contents": "printPaper" },{ "trigger": "constraintLessThanOrEqualToAnchor \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintLessThanOrEqualToAnchor(${1:NSLayoutDimension!}, multiplier:${2:CGFloat}, constant:${3:CGFloat})" },{ "trigger": "OverrideInheritedDuration \t UIViewAnimationOptions", "contents": "OverrideInheritedDuration" },{ "trigger": "contentPositionAdjustmentForSegmentType \t func UISegmentedControl -> UIOffset
" , "contents": "contentPositionAdjustmentForSegmentType(${1:UISegmentedControlSegment}, barMetrics:${2:UIBarMetrics})" },{ "trigger": "tableView \t func UITableViewController -> Int
" , "contents": "tableView(${1:UITableView}, sectionForSectionIndexTitle:${2:String}, atIndex:${3:Int})" },{ "trigger": "UIFont.italicSystemFontOfSize \t class UIFont -> UIFont
" , "contents": "UIFont.italicSystemFontOfSize(${1:CGFloat})" },{ "trigger": "interactionControllerForDismissal \t func unknown -> UIViewControllerInteractiveTransitioning?
" , "contents": "interactionControllerForDismissal(${1:UIViewControllerAnimatedTransitioning})" },{ "trigger": "dragging \t BOOL", "contents": "dragging" },{ "trigger": "popoverBackgroundViewClass \t AnyObject", "contents": "popoverBackgroundViewClass" },{ "trigger": "inputDelegate \t UITextInputDelegate", "contents": "inputDelegate" },{ "trigger": "item \t Int", "contents": "item" },{ "trigger": "imageWithTraitCollection \t func UIImageAsset -> UIImage
" , "contents": "imageWithTraitCollection(${1:UITraitCollection})" },{ "trigger": "NSObject.makeTextWritingDirectionLeftToRight \t class NSObject -> void" , "contents": "NSObject.makeTextWritingDirectionLeftToRight(${1:AnyObject?})" },{ "trigger": "layoutMargins \t UIEdgeInsets", "contents": "layoutMargins" },{ "trigger": "replaceRange \t func unknown -> void" , "contents": "replaceRange(${1:UITextRange}, withText:${2:String})" },{ "trigger": "UIFont.smallSystemFontSize \t class UIFont -> CGFloat
" , "contents": "UIFont.smallSystemFontSize(${1:})" },{ "trigger": "characterOffsetOfPosition \t func unknown -> Int
" , "contents": "characterOffsetOfPosition(${1:UITextPosition}, withinRange:${2:UITextRange})" },{ "trigger": "UIStoryboardUnwindSegueSource \t UIStoryboardUnwindSegueSource", "contents": "UIStoryboardUnwindSegueSource" },{ "trigger": "BlackOpaque \t UIBarStyle", "contents": "BlackOpaque" },{ "trigger": "UITextChecker.hasLearnedWord \t class UITextChecker -> BOOL
" , "contents": "UITextChecker.hasLearnedWord(${1:String})" },{ "trigger": "tableView \t func UITableViewController -> CGFloat
" , "contents": "tableView(${1:UITableView}, heightForFooterInSection:${2:Int})" },{ "trigger": "UIImage.imageNamed \t class UIImage -> UIImage?
" , "contents": "UIImage.imageNamed(${1:String})" },{ "trigger": "UIKeyModifierFlags \t UIKeyModifierFlags", "contents": "UIKeyModifierFlags" },{ "trigger": "UIGraphicsBeginPDFPage \t func UIGravityBehavior -> void" , "contents": "UIGraphicsBeginPDFPage(${1:})" },{ "trigger": "UIManagedDocument.persistentStoreName \t class UIManagedDocument -> String
" , "contents": "UIManagedDocument.persistentStoreName(${1:})" },{ "trigger": "UIActivityTypeMail \t String", "contents": "UIActivityTypeMail" },{ "trigger": "titleForState \t func UIButton -> String?
" , "contents": "titleForState(${1:UIControlState})" },{ "trigger": "UIFloatRangeIsEqualToRange \t func UIFocusAnimationCoordinator -> BOOL
" , "contents": "UIFloatRangeIsEqualToRange(${1:UIFloatRange}, _:${2:UIFloatRange})" },{ "trigger": "numberOfRowsInComponent \t func UIPickerView -> Int
" , "contents": "numberOfRowsInComponent(${1:Int})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, didHighlightRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UITextChecker.unlearnWord \t class UITextChecker -> void" , "contents": "UITextChecker.unlearnWord(${1:String})" },{ "trigger": "targetContentOffsetForProposedContentOffset \t func UICollectionViewLayout -> CGPoint
" , "contents": "targetContentOffsetForProposedContentOffset(${1:CGPoint})" },{ "trigger": "frameForAlignmentRect \t func UIView -> CGRect
" , "contents": "frameForAlignmentRect(${1:CGRect})" },{ "trigger": "dequeueReusableSupplementaryViewOfKind \t func UICollectionView -> UICollectionReusableView
" , "contents": "dequeueReusableSupplementaryViewOfKind(${1:String}, withReuseIdentifier:${2:String}, forIndexPath:${3:NSIndexPath})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didSelectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIVisualEffectView \t UIVisualEffectView", "contents": "UIVisualEffectView" },{ "trigger": "startAnimating \t func UIImageView -> void" , "contents": "startAnimating(${1:})" },{ "trigger": "viewWillTransitionToSize \t func UIPresentationController -> void" , "contents": "viewWillTransitionToSize(${1:CGSize}, withTransitionCoordinator:${2:UIViewControllerTransitionCoordinator})" },{ "trigger": "NSLayoutConstraint.constraintWithItem \t class NSLayoutConstraint -> Self
" , "contents": "NSLayoutConstraint.constraintWithItem(${1:AnyObject}, attribute:${2:NSLayoutAttribute}, relatedBy:${3:NSLayoutRelation}, toItem:${4:AnyObject?}, attribute:${5:NSLayoutAttribute}, multiplier:${6:CGFloat}, constant:${7:CGFloat})" },{ "trigger": "touchInside \t BOOL", "contents": "touchInside" },{ "trigger": "tableView \t func unknown -> UITableViewCell
" , "contents": "tableView(${1:UITableView}, cellForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "readableContentGuide \t UILayoutGuide", "contents": "readableContentGuide" },{ "trigger": "UIMenuControllerWillHideMenuNotification \t String", "contents": "UIMenuControllerWillHideMenuNotification" },{ "trigger": "firstLineHeadIndent \t CGFloat", "contents": "firstLineHeadIndent" },{ "trigger": "hidesNavigationBarDuringPresentation \t BOOL", "contents": "hidesNavigationBarDuringPresentation" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, didEndDisplayingCell:${2:UICollectionViewCell}, forItemAtIndexPath:${3:NSIndexPath})" },{ "trigger": "indexPath \t NSIndexPath", "contents": "indexPath" },{ "trigger": "UISegmentedControlNoSegment \t Int", "contents": "UISegmentedControlNoSegment" },{ "trigger": "delegate \t UITextViewDelegate", "contents": "delegate" },{ "trigger": "UICollectionViewFocusUpdateContext \t UICollectionViewFocusUpdateContext", "contents": "UICollectionViewFocusUpdateContext" },{ "trigger": "center \t CGPoint", "contents": "center" },{ "trigger": "UIPasteboard.pasteboardWithName \t class UIPasteboard -> UIPasteboard?
" , "contents": "UIPasteboard.pasteboardWithName(${1:String}, create:${2:BOOL})" },{ "trigger": "dequeueReusableHeaderFooterViewWithIdentifier \t func UITableView -> UITableViewHeaderFooterView?
" , "contents": "dequeueReusableHeaderFooterViewWithIdentifier(${1:String})" },{ "trigger": "initiallyInteractive \t func unknown -> BOOL
" , "contents": "initiallyInteractive(${1:})" },{ "trigger": "videoEditorController \t func unknown -> void" , "contents": "videoEditorController(${1:UIVideoEditorController}, didSaveEditedVideoToPath:${2:String})" },{ "trigger": "scrollViewWillBeginZooming \t func UICollectionViewController -> void" , "contents": "scrollViewWillBeginZooming(${1:UIScrollView}, withView:${2:UIView?})" },{ "trigger": "UIInterpolatingMotionEffect \t UIInterpolatingMotionEffect", "contents": "UIInterpolatingMotionEffect" },{ "trigger": "providerIdentifier \t func NSFileProviderExtension -> String
" , "contents": "providerIdentifier(${1:})" },{ "trigger": "presentedSubitemAtURL \t func UIDocument -> void" , "contents": "presentedSubitemAtURL(${1:NSURL}, didGainVersion:${2:NSFileVersion})" },{ "trigger": "duplex \t UIPrintInfoDuplex", "contents": "duplex" },{ "trigger": "unknown.appearanceWhenContainedInInstancesOfClasses \t static unknown -> Self
" , "contents": "unknown.appearanceWhenContainedInInstancesOfClasses(${1:[AnyObject.Type]})" },{ "trigger": "videoPath \t String", "contents": "videoPath" },{ "trigger": "UIView.inheritedAnimationDuration \t class UIView -> NSTimeInterval
" , "contents": "UIView.inheritedAnimationDuration(${1:})" },{ "trigger": "searchBarTextDidBeginEditing \t func unknown -> void" , "contents": "searchBarTextDidBeginEditing(${1:UISearchBar})" },{ "trigger": "beginRefreshing \t func UIRefreshControl -> void" , "contents": "beginRefreshing(${1:})" },{ "trigger": "locale \t NSLocale", "contents": "locale" },{ "trigger": "animationSpeed \t CGFloat", "contents": "animationSpeed" },{ "trigger": "containsEnd \t BOOL", "contents": "containsEnd" },{ "trigger": "invalidateDataSourceCounts \t BOOL", "contents": "invalidateDataSourceCounts" },{ "trigger": "endBackgroundTask \t func UIApplication -> void" , "contents": "endBackgroundTask(${1:UIBackgroundTaskIdentifier})" },{ "trigger": "willTransitionToState \t func UITableViewCell -> void" , "contents": "willTransitionToState(${1:UITableViewCellStateMask})" },{ "trigger": "setNeedsDisplay \t func UIView -> void" , "contents": "setNeedsDisplay(${1:})" },{ "trigger": "primaryViewControllerForExpandingSplitViewController \t func unknown -> UIViewController?
" , "contents": "primaryViewControllerForExpandingSplitViewController(${1:UISplitViewController})" },{ "trigger": "pointInside \t func UIView -> BOOL
" , "contents": "pointInside(${1:CGPoint}, withEvent:${2:UIEvent?})" },{ "trigger": "CGPointValue \t func NSValue -> CGPoint
" , "contents": "CGPointValue(${1:})" },{ "trigger": "textContainerForGlyphAtIndex \t func NSLayoutManager -> NSTextContainer?
" , "contents": "textContainerForGlyphAtIndex(${1:Int}, effectiveRange:${2:NSRangePointer})" },{ "trigger": "NSFileProviderExtension.placeholderURLForURL \t class NSFileProviderExtension -> NSURL
" , "contents": "NSFileProviderExtension.placeholderURLForURL(${1:NSURL})" },{ "trigger": "addOptionWithTitle \t func UIDocumentMenuViewController -> Void
" , "contents": "addOptionWithTitle(${1:String}, image:${2:UIImage?}, order:${3:UIDocumentMenuOrder}, handler:${4: -> Void})" },{ "trigger": "centerYAnchor \t NSLayoutYAxisAnchor", "contents": "centerYAnchor" },{ "trigger": "addLineToPoint \t func UIBezierPath -> void" , "contents": "addLineToPoint(${1:CGPoint})" },{ "trigger": "addGestureRecognizer \t func UIView -> void" , "contents": "addGestureRecognizer(${1:UIGestureRecognizer})" },{ "trigger": "textRectForBounds \t func UILabel -> CGRect
" , "contents": "textRectForBounds(${1:CGRect}, limitedToNumberOfLines:${2:Int})" },{ "trigger": "sectionHeaderHeight \t CGFloat", "contents": "sectionHeaderHeight" },{ "trigger": "statusBarOrientation \t UIInterfaceOrientation", "contents": "statusBarOrientation" },{ "trigger": "pageViewController \t func unknown -> UIViewController?
" , "contents": "pageViewController(${1:UIPageViewController}, viewControllerAfterViewController:${2:UIViewController})" },{ "trigger": "popoverPresentationController \t func unknown -> void" , "contents": "popoverPresentationController(${1:UIPopoverPresentationController}, willRepositionPopoverToRect:${2:UnsafeMutablePointer<CGRect>}, inView:${3:AutoreleasingUnsafeMutablePointer<UIView?>})" },{ "trigger": "tableView \t func unknown -> NSIndexPath
" , "contents": "tableView(${1:UITableView}, targetIndexPathForMoveFromRowAtIndexPath:${2:NSIndexPath}, toProposedIndexPath:${3:NSIndexPath})" },{ "trigger": "NSObject.copy \t class NSObject -> void" , "contents": "NSObject.copy(${1:AnyObject?})" },{ "trigger": "UIGraphicsBeginPDFPageWithInfo \t func UIGravityBehavior -> void" , "contents": "UIGraphicsBeginPDFPageWithInfo(${1:CGRect}, _:${2:[NSObject })" },{ "trigger": "setTitleVerticalPositionAdjustment \t func UINavigationBar -> void" , "contents": "setTitleVerticalPositionAdjustment(${1:CGFloat}, forBarMetrics:${2:UIBarMetrics})" },{ "trigger": "isRegisteredForRemoteNotifications \t func UIApplication -> BOOL
" , "contents": "isRegisteredForRemoteNotifications(${1:})" },{ "trigger": "destinationViewController \t UIViewController", "contents": "destinationViewController" },{ "trigger": "getLineFragmentInsertionPointsForCharacterAtIndex \t func NSLayoutManager -> Int
" , "contents": "getLineFragmentInsertionPointsForCharacterAtIndex(${1:Int}, alternatePositions:${2:BOOL}, inDisplayOrder:${3:BOOL}, positions:${4:UnsafeMutablePointer<CGFloat>}, characterIndexes:${5:UnsafeMutablePointer<Int>})" },{ "trigger": "protectedDataAvailable \t BOOL", "contents": "protectedDataAvailable" },{ "trigger": "readFromData \t func NSMutableAttributedString -> void" , "contents": "readFromData(${1:NSData}, options:${2:[String }, documentAttributes:${3:AutoreleasingUnsafeMutablePointer<NSDictionary?>})" },{ "trigger": "decodeCGPointForKey \t func NSCoder -> CGPoint
" , "contents": "decodeCGPointForKey(${1:String})" },{ "trigger": "date \t NSDate", "contents": "date" },{ "trigger": "rotatingHeaderView \t func UIViewController -> UIView?
" , "contents": "rotatingHeaderView(${1:})" },{ "trigger": "NSVerticalGlyphFormAttributeName \t String", "contents": "NSVerticalGlyphFormAttributeName" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, willChangeStatusBarFrame:${2:CGRect})" },{ "trigger": "pickerView \t func unknown -> NSAttributedString?
" , "contents": "pickerView(${1:UIPickerView}, attributedTitleForRow:${2:Int}, forComponent:${3:Int})" },{ "trigger": "shouldInvalidateLayoutForPreferredLayoutAttributes \t func UICollectionViewLayout -> BOOL
" , "contents": "shouldInvalidateLayoutForPreferredLayoutAttributes(${1:UICollectionViewLayoutAttributes}, withOriginalAttributes:${2:UICollectionViewLayoutAttributes})" },{ "trigger": "touchesMoved \t func UIResponder -> void" , "contents": "touchesMoved(${1:Set<UITouch>}, withEvent:${2:UIEvent?})" },{ "trigger": "setKeepAliveTimeout \t func UIApplication -> Void?" , "contents": "setKeepAliveTimeout(${1:NSTimeInterval}, handler:${2: -> Void?})" },{ "trigger": "unregisterForPreviewingWithContext \t func UIViewController -> void" , "contents": "unregisterForPreviewingWithContext(${1:UIViewControllerPreviewing})" },{ "trigger": "UIEvent \t UIEvent", "contents": "UIEvent" },{ "trigger": "UIPrinterJobTypes \t UIPrinterJobTypes", "contents": "UIPrinterJobTypes" },{ "trigger": "invalidateLayoutForCharacterRange \t func NSLayoutManager -> void" , "contents": "invalidateLayoutForCharacterRange(${1:NSRange}, actualCharacterRange:${2:NSRangePointer})" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldUpdateFocusInContext:${2:UICollectionViewFocusUpdateContext})" },{ "trigger": "mutableCopyWithZone \t func UIApplicationShortcutItem -> AnyObject
" , "contents": "mutableCopyWithZone(${1:NSZone})" },{ "trigger": "popoverContentSize \t CGSize", "contents": "popoverContentSize" },{ "trigger": "comparePosition \t func UITextField -> NSComparisonResult
" , "contents": "comparePosition(${1:UITextPosition}, toPosition:${2:UITextPosition})" },{ "trigger": "alpha \t CGFloat", "contents": "alpha" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, shouldSelectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "insertDictationResultPlaceholder \t func unknown -> AnyObject
" , "contents": "insertDictationResultPlaceholder(${1:})" },{ "trigger": "UIContentSizeCategoryDidChangeNotification \t String", "contents": "UIContentSizeCategoryDidChangeNotification" },{ "trigger": "UIFont.familyNames \t class UIFont -> [String]
" , "contents": "UIFont.familyNames(${1:})" },{ "trigger": "pickerView \t func unknown -> String?
" , "contents": "pickerView(${1:UIPickerView}, titleForRow:${2:Int}, forComponent:${3:Int})" },{ "trigger": "representedElementKind \t String", "contents": "representedElementKind" },{ "trigger": "UIKeyboardAppearance \t UIKeyboardAppearance", "contents": "UIKeyboardAppearance" },{ "trigger": "directionalPressGestureRecognizer \t UIGestureRecognizer", "contents": "directionalPressGestureRecognizer" },{ "trigger": "navigationBar \t func unknown -> void" , "contents": "navigationBar(${1:UINavigationBar}, didPopItem:${2:UINavigationItem})" },{ "trigger": "UIApplicationWillEnterForegroundNotification \t String", "contents": "UIApplicationWillEnterForegroundNotification" },{ "trigger": "NSForegroundColorAttributeName \t String", "contents": "NSForegroundColorAttributeName" },{ "trigger": "contentInset \t UIEdgeInsets", "contents": "contentInset" },{ "trigger": "UICollectionViewLayoutAttributes.layoutAttributesForDecorationViewOfKind \t class UICollectionViewLayoutAttributes -> Self
" , "contents": "UICollectionViewLayoutAttributes.layoutAttributesForDecorationViewOfKind(${1:String}, withIndexPath:${2:NSIndexPath})" },{ "trigger": "characterIndexForGlyphAtIndex \t func NSLayoutManager -> Int
" , "contents": "characterIndexForGlyphAtIndex(${1:Int})" },{ "trigger": "pickerView \t func unknown -> UIView
" , "contents": "pickerView(${1:UIPickerView}, viewForRow:${2:Int}, forComponent:${3:Int}, reusingView:${4:UIView?})" },{ "trigger": "characterRangeAtPoint \t func UITextField -> UITextRange?
" , "contents": "characterRangeAtPoint(${1:CGPoint})" },{ "trigger": "NSObject.accessibilityElementsHidden \t class NSObject -> BOOL
" , "contents": "NSObject.accessibilityElementsHidden(${1:})" },{ "trigger": "scrollViewDidEndDecelerating \t func UIWebView -> void" , "contents": "scrollViewDidEndDecelerating(${1:UIScrollView})" },{ "trigger": "encodeWithCoder \t func UIView -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "UIImagePickerControllerMediaMetadata \t String", "contents": "UIImagePickerControllerMediaMetadata" },{ "trigger": "closestPositionToPoint \t func UITextField -> UITextPosition?
" , "contents": "closestPositionToPoint(${1:CGPoint}, withinRange:${2:UITextRange})" },{ "trigger": "positionFromPosition \t func unknown -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, inDirection:${2:UITextLayoutDirection}, offset:${3:Int})" },{ "trigger": "contentEdgeInsets \t UIEdgeInsets", "contents": "contentEdgeInsets" },{ "trigger": "window \t UIWindow", "contents": "window" },{ "trigger": "addPrintFormatter \t func UIPrintPageRenderer -> void" , "contents": "addPrintFormatter(${1:UIPrintFormatter}, startingAtPageAtIndex:${2:Int})" },{ "trigger": "touchesEnded \t func UIResponder -> void" , "contents": "touchesEnded(${1:Set<UITouch>}, withEvent:${2:UIEvent?})" },{ "trigger": "continuous \t BOOL", "contents": "continuous" },{ "trigger": "modifierFlags \t UIKeyModifierFlags", "contents": "modifierFlags" },{ "trigger": "animationDuration \t NSTimeInterval", "contents": "animationDuration" },{ "trigger": "setMaximumTrackImage \t func UISlider -> void" , "contents": "setMaximumTrackImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "tableHeaderView \t UIView", "contents": "tableHeaderView" },{ "trigger": "additionalContentForURL \t func UIManagedDocument -> AnyObject
" , "contents": "additionalContentForURL(${1:NSURL})" },{ "trigger": "NSIndexPath.indexPathForItem \t class NSIndexPath -> Self
" , "contents": "NSIndexPath.indexPathForItem(${1:Int}, inSection:${2:Int})" },{ "trigger": "UIStackView \t UIStackView", "contents": "UIStackView" },{ "trigger": "prepareForTransitionToLayout \t func UICollectionViewLayout -> void" , "contents": "prepareForTransitionToLayout(${1:UICollectionViewLayout})" },{ "trigger": "tableView \t func UITableViewController -> Int
" , "contents": "tableView(${1:UITableView}, indentationLevelForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIDevice \t UIDevice", "contents": "UIDevice" },{ "trigger": "bottomAnchor \t NSLayoutYAxisAnchor", "contents": "bottomAnchor" },{ "trigger": "fontDescriptorWithSize \t func UIFontDescriptor -> UIFontDescriptor
" , "contents": "fontDescriptorWithSize(${1:CGFloat})" },{ "trigger": "convertRect \t func UIView -> CGRect
" , "contents": "convertRect(${1:CGRect}, fromView:${2:UIView?})" },{ "trigger": "UIDocumentMenuViewController \t UIDocumentMenuViewController", "contents": "UIDocumentMenuViewController" },{ "trigger": "isVertical \t BOOL", "contents": "isVertical" },{ "trigger": "textFieldAtIndex \t func UIAlertView -> UITextField?
" , "contents": "textFieldAtIndex(${1:Int})" },{ "trigger": "ignoredWords \t func UITextChecker -> [AnyObject]?
" , "contents": "ignoredWords(${1:})" },{ "trigger": "UIApplicationShortcutIconType \t UIApplicationShortcutIconType", "contents": "UIApplicationShortcutIconType" },{ "trigger": "UIUserNotificationAction.supportsSecureCoding \t class UIUserNotificationAction -> BOOL
" , "contents": "UIUserNotificationAction.supportsSecureCoding(${1:})" },{ "trigger": "indicatorStyle \t UIScrollViewIndicatorStyle", "contents": "indicatorStyle" },{ "trigger": "dataForPasteboardType \t func UIPasteboard -> NSData?
" , "contents": "dataForPasteboardType(${1:String})" },{ "trigger": "removeLayoutManager \t func NSTextStorage -> void" , "contents": "removeLayoutManager(${1:NSLayoutManager})" },{ "trigger": "insertArrangedSubview \t func UIStackView -> void" , "contents": "insertArrangedSubview(${1:UIView}, atIndex:${2:Int})" },{ "trigger": "CenteredHorizontally \t UICollectionViewScrollPosition", "contents": "CenteredHorizontally" },{ "trigger": "elasticity \t CGFloat", "contents": "elasticity" },{ "trigger": "setFill \t func UIColor -> void" , "contents": "setFill(${1:})" },{ "trigger": "viewDidLayoutSubviews \t func UIViewController -> void" , "contents": "viewDidLayoutSubviews(${1:})" },{ "trigger": "setNeedsLayout \t func UIView -> void" , "contents": "setNeedsLayout(${1:})" },{ "trigger": "UIAlertControllerStyle \t UIAlertControllerStyle", "contents": "UIAlertControllerStyle" },{ "trigger": "Right \t UIRectEdge", "contents": "Right" },{ "trigger": "navigationController \t UINavigationController", "contents": "navigationController" },{ "trigger": "navigationOrientation \t UIPageViewControllerNavigationOrientation", "contents": "navigationOrientation" },{ "trigger": "backgroundEffect \t UIVisualEffect", "contents": "backgroundEffect" },{ "trigger": "baselineRelativeArrangement \t BOOL", "contents": "baselineRelativeArrangement" },{ "trigger": "falloff \t CGFloat", "contents": "falloff" },{ "trigger": "editingAccessoryView \t UIView", "contents": "editingAccessoryView" },{ "trigger": "NSPaperMarginDocumentAttribute \t String", "contents": "NSPaperMarginDocumentAttribute" },{ "trigger": "onImage \t UIImage", "contents": "onImage" },{ "trigger": "restorationIdentifier \t String", "contents": "restorationIdentifier" },{ "trigger": "NSObject.setAccessibilityElements \t class NSObject -> void" , "contents": "NSObject.setAccessibilityElements(${1:[AnyObject]?})" },{ "trigger": "drawPrintFormatter \t func UIPrintPageRenderer -> void" , "contents": "drawPrintFormatter(${1:UIPrintFormatter}, forPageAtIndex:${2:Int})" },{ "trigger": "UIMenuController.sharedMenuController \t class UIMenuController -> UIMenuController
" , "contents": "UIMenuController.sharedMenuController(${1:})" },{ "trigger": "closestPositionToPoint \t func UITextView -> UITextPosition?
" , "contents": "closestPositionToPoint(${1:CGPoint}, withinRange:${2:UITextRange})" },{ "trigger": "interactionControllerForPresentation \t func unknown -> UIViewControllerInteractiveTransitioning?
" , "contents": "interactionControllerForPresentation(${1:UIViewControllerAnimatedTransitioning})" },{ "trigger": "unregisterForRemoteNotifications \t func UIApplication -> void" , "contents": "unregisterForRemoteNotifications(${1:})" },{ "trigger": "removeArrangedSubview \t func UIStackView -> void" , "contents": "removeArrangedSubview(${1:UIView})" },{ "trigger": "UIViewContentMode \t UIViewContentMode", "contents": "UIViewContentMode" },{ "trigger": "NSTextStorageEditActions \t NSTextStorageEditActions", "contents": "NSTextStorageEditActions" },{ "trigger": "ShowingEditControlMask \t UITableViewCellStateMask", "contents": "ShowingEditControlMask" },{ "trigger": "fontDescriptorByAddingAttributes \t func UIFontDescriptor -> UIFontDescriptor
" , "contents": "fontDescriptorByAddingAttributes(${1:[String })" },{ "trigger": "drawAtPoint \t func NSAttributedString -> void" , "contents": "drawAtPoint(${1:CGPoint})" },{ "trigger": "UITextFieldTextDidEndEditingNotification \t String", "contents": "UITextFieldTextDidEndEditingNotification" },{ "trigger": "ClassTransitionalSerifs \t UIFontDescriptorSymbolicTraits", "contents": "ClassTransitionalSerifs" },{ "trigger": "UIAccessibilityIsVoiceOverRunning \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsVoiceOverRunning(${1:})" },{ "trigger": "characterOffsetOfPosition \t func UITextField -> Int
" , "contents": "characterOffsetOfPosition(${1:UITextPosition}, withinRange:${2:UITextRange})" },{ "trigger": "UIPasteboard \t UIPasteboard", "contents": "UIPasteboard" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, moveItemAtIndexPath:${2:NSIndexPath}, toIndexPath:${3:NSIndexPath})" },{ "trigger": "symbolicTraits \t UIFontDescriptorSymbolicTraits", "contents": "symbolicTraits" },{ "trigger": "enumerateEnclosingRectsForGlyphRange \t func NSLayoutManager -> Void
" , "contents": "enumerateEnclosingRectsForGlyphRange(${1:NSRange}, withinSelectedGlyphRange:${2:NSRange}, inTextContainer:${3:NSTextContainer}, usingBlock:${4:CGRect}, UnsafeMutablePointer<BOOL>:${5:})" },{ "trigger": "setIgnoredWords \t func UITextChecker -> void" , "contents": "setIgnoredWords(${1:[AnyObject]?})" },{ "trigger": "NSStringFromCGPoint \t func NSTextAlignment -> String
" , "contents": "NSStringFromCGPoint(${1:CGPoint})" },{ "trigger": "UITabBarItemPositioning \t UITabBarItemPositioning", "contents": "UITabBarItemPositioning" },{ "trigger": "documentInteractionControllerDidDismissOptionsMenu \t func unknown -> void" , "contents": "documentInteractionControllerDidDismissOptionsMenu(${1:UIDocumentInteractionController})" },{ "trigger": "glyphIndexForCharacterAtIndex \t func NSLayoutManager -> Int
" , "contents": "glyphIndexForCharacterAtIndex(${1:Int})" },{ "trigger": "alertView \t func unknown -> void" , "contents": "alertView(${1:UIAlertView}, clickedButtonAtIndex:${2:Int})" },{ "trigger": "UIPasteboardTypeListString \t NSArray", "contents": "UIPasteboardTypeListString" },{ "trigger": "collisionBoundingPath \t UIBezierPath", "contents": "collisionBoundingPath" },{ "trigger": "Unknown \t UIPrinterJobTypes", "contents": "Unknown" },{ "trigger": "endCustomizingAnimated \t func UITabBar -> BOOL
" , "contents": "endCustomizingAnimated(${1:BOOL})" },{ "trigger": "NSObject.accessibilityViewIsModal \t class NSObject -> BOOL
" , "contents": "NSObject.accessibilityViewIsModal(${1:})" },{ "trigger": "printRect \t func UIPrintPaper -> CGRect
" , "contents": "printRect(${1:})" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didRegisterUserNotificationSettings:${2:UIUserNotificationSettings})" },{ "trigger": "keyboardDisplayRequiresUserAction \t BOOL", "contents": "keyboardDisplayRequiresUserAction" },{ "trigger": "presentationController \t UIPresentationController", "contents": "presentationController" },{ "trigger": "UIViewAnimationOptions \t UIViewAnimationOptions", "contents": "UIViewAnimationOptions" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, didUpdateFocusInContext:${2:UICollectionViewFocusUpdateContext}, withAnimationCoordinator:${3:UIFocusAnimationCoordinator})" },{ "trigger": "traitCollectionDidChange \t func UIViewController -> void" , "contents": "traitCollectionDidChange(${1:UITraitCollection?})" },{ "trigger": "buttonGroup \t UIBarButtonItemGroup", "contents": "buttonGroup" },{ "trigger": "indexPathsForRowsInRect \t func UITableView -> [NSIndexPath]?
" , "contents": "indexPathsForRowsInRect(${1:CGRect})" },{ "trigger": "shouldAutorotate \t func UIViewController -> BOOL
" , "contents": "shouldAutorotate(${1:})" },{ "trigger": "UIDocumentInteractionController \t UIDocumentInteractionController", "contents": "UIDocumentInteractionController" },{ "trigger": "UIActivityTypePostToTwitter \t String", "contents": "UIActivityTypePostToTwitter" },{ "trigger": "UIKeyboardIsLocalUserInfoKey \t String", "contents": "UIKeyboardIsLocalUserInfoKey" },{ "trigger": "accessibilityPerformEscape \t func NSObject -> BOOL
" , "contents": "accessibilityPerformEscape(${1:})" },{ "trigger": "minimumDate \t NSDate", "contents": "minimumDate" },{ "trigger": "duration \t NSTimeInterval", "contents": "duration" },{ "trigger": "UIOffsetZero \t UIOffset", "contents": "UIOffsetZero" },{ "trigger": "hyphenationFactor \t CGFloat", "contents": "hyphenationFactor" },{ "trigger": "UIAccessibilityTraitKeyboardKey \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitKeyboardKey" },{ "trigger": "UIInterfaceOrientationIsPortrait \t func UIInterfaceOrientationMask -> BOOL
" , "contents": "UIInterfaceOrientationIsPortrait(${1:UIInterfaceOrientation})" },{ "trigger": "placeholderRectForBounds \t func UITextField -> CGRect
" , "contents": "placeholderRectForBounds(${1:CGRect})" },{ "trigger": "encodeWithCoder \t func UIVisualEffect -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "AllTouchEvents \t UIControlEvents", "contents": "AllTouchEvents" },{ "trigger": "extendStateRestoration \t func UIApplication -> void" , "contents": "extendStateRestoration(${1:})" },{ "trigger": "drawWithRect \t func NSString -> void" , "contents": "drawWithRect(${1:CGRect}, options:${2:NSStringDrawingOptions}, attributes:${3:[String }, context:${4:NSStringDrawingContext?})" },{ "trigger": "indexPathsToDeleteForDecorationViewOfKind \t func UICollectionViewLayout -> [NSIndexPath]
" , "contents": "indexPathsToDeleteForDecorationViewOfKind(${1:String})" },{ "trigger": "bringSubviewToFront \t func UIView -> void" , "contents": "bringSubviewToFront(${1:UIView})" },{ "trigger": "UIActionSheetStyle \t UIActionSheetStyle", "contents": "UIActionSheetStyle" },{ "trigger": "sizeForNumberOfPages \t func UIPageControl -> CGSize
" , "contents": "sizeForNumberOfPages(${1:Int})" },{ "trigger": "preferredInterfaceOrientationForPresentation \t func UIViewController -> UIInterfaceOrientation
" , "contents": "preferredInterfaceOrientationForPresentation(${1:})" },{ "trigger": "UIAccessibilityBoldTextStatusDidChangeNotification \t String", "contents": "UIAccessibilityBoldTextStatusDidChangeNotification" },{ "trigger": "localizedTitle \t String", "contents": "localizedTitle" },{ "trigger": "indexPathForPreferredFocusedViewInTableView \t func UITableViewController -> NSIndexPath?
" , "contents": "indexPathForPreferredFocusedViewInTableView(${1:UITableView})" },{ "trigger": "UIImageJPEGRepresentation \t func UIImageOrientation -> NSData?
" , "contents": "UIImageJPEGRepresentation(${1:UIImage}, _:${2:CGFloat})" },{ "trigger": "AlignAllBottom \t NSLayoutFormatOptions", "contents": "AlignAllBottom" },{ "trigger": "titleShadowColorForState \t func UIButton -> UIColor?
" , "contents": "titleShadowColorForState(${1:UIControlState})" },{ "trigger": "UIImagePickerControllerReferenceURL \t String", "contents": "UIImagePickerControllerReferenceURL" },{ "trigger": "viewForZoomingInScrollView \t func UIWebView -> UIView?
" , "contents": "viewForZoomingInScrollView(${1:UIScrollView})" },{ "trigger": "UIPasteboardTypeListURL \t NSArray", "contents": "UIPasteboardTypeListURL" },{ "trigger": "updateFocusIfNeeded \t func UIView -> void" , "contents": "updateFocusIfNeeded(${1:})" },{ "trigger": "type \t UIEventType", "contents": "type" },{ "trigger": "perPageContentInsets \t UIEdgeInsets", "contents": "perPageContentInsets" },{ "trigger": "CGPointFromString \t func unknown -> CGPoint
" , "contents": "CGPointFromString(${1:String})" },{ "trigger": "prepareForInterfaceBuilder \t func NSObject -> void" , "contents": "prepareForInterfaceBuilder(${1:})" },{ "trigger": "CurveEaseOut \t UIViewAnimationOptions", "contents": "CurveEaseOut" },{ "trigger": "insertDictationResultPlaceholder \t func UITextField -> AnyObject
" , "contents": "insertDictationResultPlaceholder(${1:})" },{ "trigger": "AlignAllLeading \t NSLayoutFormatOptions", "contents": "AlignAllLeading" },{ "trigger": "sizeWithFont \t func NSString -> CGSize
" , "contents": "sizeWithFont(${1:UIFont!})" },{ "trigger": "unknown.arrowBase \t static unknown -> CGFloat
" , "contents": "unknown.arrowBase(${1:})" },{ "trigger": "deselectItemAtIndexPath \t func UICollectionView -> void" , "contents": "deselectItemAtIndexPath(${1:NSIndexPath}, animated:${2:BOOL})" },{ "trigger": "searchFieldBackgroundPositionAdjustment \t UIOffset", "contents": "searchFieldBackgroundPositionAdjustment" },{ "trigger": "UIScrollViewDecelerationRateNormal \t CGFloat", "contents": "UIScrollViewDecelerationRateNormal" },{ "trigger": "touchesForGestureRecognizer \t func UIEvent -> Set UITouch ?
" , "contents": "touchesForGestureRecognizer(${1:UIGestureRecognizer})" },{ "trigger": "statusBarOrientationAnimationDuration \t NSTimeInterval", "contents": "statusBarOrientationAnimationDuration" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, didEndDisplayingSupplementaryView:${2:UICollectionReusableView}, forElementOfKind:${3:String}, atIndexPath:${4:NSIndexPath})" },{ "trigger": "supportedInterfaceOrientations \t func UIViewController -> UIInterfaceOrientationMask
" , "contents": "supportedInterfaceOrientations(${1:})" },{ "trigger": "copyWithZone \t func UIPrintInfo -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "cameraOverlayView \t UIView", "contents": "cameraOverlayView" },{ "trigger": "addArcWithCenter \t func UIBezierPath -> void" , "contents": "addArcWithCenter(${1:CGPoint}, radius:${2:CGFloat}, startAngle:${3:CGFloat}, endAngle:${4:CGFloat}, clockwise:${5:BOOL})" },{ "trigger": "estimatedSectionFooterHeight \t CGFloat", "contents": "estimatedSectionFooterHeight" },{ "trigger": "dictationRecordingDidEnd \t func UITextField -> void" , "contents": "dictationRecordingDidEnd(${1:})" },{ "trigger": "selectionIndicatorImage \t UIImage", "contents": "selectionIndicatorImage" },{ "trigger": "UIApplicationLaunchOptionsShortcutItemKey \t String", "contents": "UIApplicationLaunchOptionsShortcutItemKey" },{ "trigger": "delegate \t UISearchControllerDelegate", "contents": "delegate" },{ "trigger": "drawAtPoint \t func NSString -> CGSize
" , "contents": "drawAtPoint(${1:CGPoint}, forWidth:${2:CGFloat}, withFont:${3:UIFont!}, fontSize:${4:CGFloat}, lineBreakMode:${5:NSLineBreakMode}, baselineAdjustment:${6:UIBaselineAdjustment})" },{ "trigger": "layoutAttributesForInteractivelyMovingItemAtIndexPath \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes
" , "contents": "layoutAttributesForInteractivelyMovingItemAtIndexPath(${1:NSIndexPath}, withTargetPosition:${2:CGPoint})" },{ "trigger": "focusedFrameGuide \t UILayoutGuide", "contents": "focusedFrameGuide" },{ "trigger": "encodeWithCoder \t func NSTextAttachment -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "statusBarHidden \t BOOL", "contents": "statusBarHidden" },{ "trigger": "encodeWithCoder \t func UIMotionEffect -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "TransitionFlipFromRight \t UIViewAnimationOptions", "contents": "TransitionFlipFromRight" },{ "trigger": "contentViewController \t UIViewController", "contents": "contentViewController" },{ "trigger": "UIAccessibilityFocusedElementKey \t String", "contents": "UIAccessibilityFocusedElementKey" },{ "trigger": "presentedSubitemAtURL \t func UIDocument -> void" , "contents": "presentedSubitemAtURL(${1:NSURL}, didResolveConflictVersion:${2:NSFileVersion})" },{ "trigger": "UIImage.imageWithContentsOfFile \t class UIImage -> UIImage?
" , "contents": "UIImage.imageWithContentsOfFile(${1:String})" },{ "trigger": "textContainer \t NSTextContainer", "contents": "textContainer" },{ "trigger": "remembersLastFocusedIndexPath \t BOOL", "contents": "remembersLastFocusedIndexPath" },{ "trigger": "completionHandler \t UIActivityViewControllerCompletionHandler", "contents": "completionHandler" },{ "trigger": "delegate \t UITextFieldDelegate", "contents": "delegate" },{ "trigger": "UIContentSizeCategoryAccessibilityMedium \t String", "contents": "UIContentSizeCategoryAccessibilityMedium" },{ "trigger": "UIDatePicker \t UIDatePicker", "contents": "UIDatePicker" },{ "trigger": "setLineFragmentRect \t func NSLayoutManager -> void" , "contents": "setLineFragmentRect(${1:CGRect}, forGlyphRange:${2:NSRange}, usedRect:${3:CGRect})" },{ "trigger": "actionSheet \t func UIDocumentInteractionController -> void" , "contents": "actionSheet(${1:UIActionSheet}, didDismissWithButtonIndex:${2:Int})" },{ "trigger": "scrollViewDidScroll \t func UICollectionViewController -> void" , "contents": "scrollViewDidScroll(${1:UIScrollView})" },{ "trigger": "name \t String", "contents": "name" },{ "trigger": "startInteractiveTransitionToCollectionViewLayout \t func UICollectionView -> UICollectionViewTransitionLayout
" , "contents": "startInteractiveTransitionToCollectionViewLayout(${1:UICollectionViewLayout}, completion:${2:UICollectionViewLayoutInteractiveTransitionCompletion?})" },{ "trigger": "removeItem \t func UIDynamicItemBehavior -> void" , "contents": "removeItem(${1:UIDynamicItem})" },{ "trigger": "UIContentSizeCategoryAccessibilityExtraExtraLarge \t String", "contents": "UIContentSizeCategoryAccessibilityExtraExtraLarge" },{ "trigger": "UIActivityTypePostToFlickr \t String", "contents": "UIActivityTypePostToFlickr" },{ "trigger": "allowsSelfSizing \t BOOL", "contents": "allowsSelfSizing" },{ "trigger": "reloadSections \t func UICollectionView -> void" , "contents": "reloadSections(${1:NSIndexSet})" },{ "trigger": "UIKeyboardDidHideNotification \t String", "contents": "UIKeyboardDidHideNotification" },{ "trigger": "searchBarShouldBeginEditing \t func unknown -> BOOL
" , "contents": "searchBarShouldBeginEditing(${1:UISearchBar})" },{ "trigger": "invalidateIntrinsicContentSize \t func UIView -> void" , "contents": "invalidateIntrinsicContentSize(${1:})" },{ "trigger": "badgeValue \t String", "contents": "badgeValue" },{ "trigger": "anchorPoint \t CGPoint", "contents": "anchorPoint" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didFailToRegisterForRemoteNotificationsWithError:${2:NSError})" },{ "trigger": "style \t UIBarButtonItemStyle", "contents": "style" },{ "trigger": "searchContentsController \t UIViewController", "contents": "searchContentsController" },{ "trigger": "canGoBack \t BOOL", "contents": "canGoBack" },{ "trigger": "invalidateLayout \t func UICollectionViewLayout -> void" , "contents": "invalidateLayout(${1:})" },{ "trigger": "tableView \t func unknown -> Int
" , "contents": "tableView(${1:UITableView}, sectionForSectionIndexTitle:${2:String}, atIndex:${3:Int})" },{ "trigger": "transitionProgress \t CGFloat", "contents": "transitionProgress" },{ "trigger": "paperSize \t CGSize", "contents": "paperSize" },{ "trigger": "selectionDidChange \t func UIInputViewController -> void" , "contents": "selectionDidChange(${1:UITextInput?})" },{ "trigger": "unmarkText \t func unknown -> void" , "contents": "unmarkText(${1:})" },{ "trigger": "leading \t CGFloat", "contents": "leading" },{ "trigger": "collectionView \t func unknown -> CGSize
" , "contents": "collectionView(${1:UICollectionView}, layout:${2:UICollectionViewLayout}, sizeForItemAtIndexPath:${3:NSIndexPath})" },{ "trigger": "setSelected \t func UITableViewCell -> void" , "contents": "setSelected(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "DirectionLeadingToTrailing \t NSLayoutFormatOptions", "contents": "DirectionLeadingToTrailing" },{ "trigger": "autoresizingMask \t UIViewAutoresizing", "contents": "autoresizingMask" },{ "trigger": "UIImageAsset.supportsSecureCoding \t class UIImageAsset -> BOOL
" , "contents": "UIImageAsset.supportsSecureCoding(${1:})" },{ "trigger": "allowsMultipleSelection \t BOOL", "contents": "allowsMultipleSelection" },{ "trigger": "userInterfaceIdiom \t UIUserInterfaceIdiom", "contents": "userInterfaceIdiom" },{ "trigger": "beginFloatingCursorAtPoint \t func UITextView -> void" , "contents": "beginFloatingCursorAtPoint(${1:CGPoint})" },{ "trigger": "invalidateItemsAtIndexPaths \t func UICollectionViewLayoutInvalidationContext -> void" , "contents": "invalidateItemsAtIndexPaths(${1:[NSIndexPath]})" },{ "trigger": "frameForDictationResultPlaceholder \t func UITextField -> CGRect
" , "contents": "frameForDictationResultPlaceholder(${1:AnyObject})" },{ "trigger": "UIImageAsset \t UIImageAsset", "contents": "UIImageAsset" },{ "trigger": "UIImage.animatedResizableImageNamed \t class UIImage -> UIImage?
" , "contents": "UIImage.animatedResizableImageNamed(${1:String}, capInsets:${2:UIEdgeInsets}, resizingMode:${3:UIImageResizingMode}, duration:${4:NSTimeInterval})" },{ "trigger": "isPosition \t func UITextInputStringTokenizer -> BOOL
" , "contents": "isPosition(${1:UITextPosition}, atBoundary:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "hidden \t BOOL", "contents": "hidden" },{ "trigger": "UITransitionContextFromViewControllerKey \t String", "contents": "UITransitionContextFromViewControllerKey" },{ "trigger": "applicationDidEnterBackground \t func unknown -> void" , "contents": "applicationDidEnterBackground(${1:UIApplication})" },{ "trigger": "firstUnlaidGlyphIndex \t func NSLayoutManager -> Int
" , "contents": "firstUnlaidGlyphIndex(${1:})" },{ "trigger": "UIFontFeatureTypeIdentifierKey \t String", "contents": "UIFontFeatureTypeIdentifierKey" },{ "trigger": "UIApplication.registerObjectForStateRestoration \t class UIApplication -> void" , "contents": "UIApplication.registerObjectForStateRestoration(${1:UIStateRestoring}, restorationIdentifier:${2:String})" },{ "trigger": "hidesBackButton \t BOOL", "contents": "hidesBackButton" },{ "trigger": "UIFontDescriptorSizeAttribute \t String", "contents": "UIFontDescriptorSizeAttribute" },{ "trigger": "hasText \t func UITextField -> BOOL
" , "contents": "hasText(${1:})" },{ "trigger": "rotation \t CGFloat", "contents": "rotation" },{ "trigger": "UIManagedDocument \t UIManagedDocument", "contents": "UIManagedDocument" },{ "trigger": "sendAction \t func UIControl -> void" , "contents": "sendAction(${1:Selector}, to:${2:AnyObject?}, forEvent:${3:UIEvent?})" },{ "trigger": "numberOfPages \t func UIPrintPageRenderer -> Int
" , "contents": "numberOfPages(${1:})" },{ "trigger": "overscanCompensation \t UIScreenOverscanCompensation", "contents": "overscanCompensation" },{ "trigger": "presentationController \t func unknown -> UIViewController?
" , "contents": "presentationController(${1:UIPresentationController}, viewControllerForAdaptivePresentationStyle:${2:UIModalPresentationStyle})" },{ "trigger": "didPresentActionSheet \t func unknown -> void" , "contents": "didPresentActionSheet(${1:UIActionSheet})" },{ "trigger": "searchDisplayController \t UISearchDisplayController", "contents": "searchDisplayController" },{ "trigger": "UIFont.fontWithDescriptor \t class UIFont -> UIFont
" , "contents": "UIFont.fontWithDescriptor(${1:UIFontDescriptor}, size:${2:CGFloat})" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, didHighlightRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "loadHTMLString \t func UIWebView -> void" , "contents": "loadHTMLString(${1:String}, baseURL:${2:NSURL?})" },{ "trigger": "horizontal \t CGFloat", "contents": "horizontal" },{ "trigger": "zoomBouncing \t BOOL", "contents": "zoomBouncing" },{ "trigger": "nativeScale \t CGFloat", "contents": "nativeScale" },{ "trigger": "NSObject.selectAll \t class NSObject -> void" , "contents": "NSObject.selectAll(${1:AnyObject?})" },{ "trigger": "UITraitCollection \t UITraitCollection", "contents": "UITraitCollection" },{ "trigger": "enabled \t BOOL", "contents": "enabled" },{ "trigger": "descender \t CGFloat", "contents": "descender" },{ "trigger": "copyWithZone \t func UIUserNotificationAction -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "UILayoutPriorityDefaultLow \t UILayoutPriority", "contents": "UILayoutPriorityDefaultLow" },{ "trigger": "popNavigationItemAnimated \t func UINavigationBar -> UINavigationItem?
" , "contents": "popNavigationItemAnimated(${1:BOOL})" },{ "trigger": "miterLimit \t CGFloat", "contents": "miterLimit" },{ "trigger": "behavior \t UIUserNotificationActionBehavior", "contents": "behavior" },{ "trigger": "UIPrintPaper \t UIPrintPaper", "contents": "UIPrintPaper" },{ "trigger": "colorWithAlphaComponent \t func UIColor -> UIColor
" , "contents": "colorWithAlphaComponent(${1:CGFloat})" },{ "trigger": "UIGraphicsEndPDFContext \t func UIGravityBehavior -> void" , "contents": "UIGraphicsEndPDFContext(${1:})" },{ "trigger": "UIApplicationStatusBarOrientationUserInfoKey \t String", "contents": "UIApplicationStatusBarOrientationUserInfoKey" },{ "trigger": "UIInputViewStyle \t UIInputViewStyle", "contents": "UIInputViewStyle" },{ "trigger": "headerViewForSection \t func UITableView -> UITableViewHeaderFooterView?
" , "contents": "headerViewForSection(${1:Int})" },{ "trigger": "URL \t NSURL", "contents": "URL" },{ "trigger": "UIColor.greenColor \t class UIColor -> UIColor
" , "contents": "UIColor.greenColor(${1:})" },{ "trigger": "unregisterImageWithTraitCollection \t func UIImageAsset -> void" , "contents": "unregisterImageWithTraitCollection(${1:UITraitCollection})" },{ "trigger": "viewForZoomingInScrollView \t func UICollectionViewController -> UIView?
" , "contents": "viewForZoomingInScrollView(${1:UIScrollView})" },{ "trigger": "minimumTrackImageForState \t func UISlider -> UIImage?
" , "contents": "minimumTrackImageForState(${1:UIControlState})" },{ "trigger": "numberOfTouchesRequired \t Int", "contents": "numberOfTouchesRequired" },{ "trigger": "previouslyFocusedView \t UIView", "contents": "previouslyFocusedView" },{ "trigger": "activityViewController \t func unknown -> String
" , "contents": "activityViewController(${1:UIActivityViewController}, subjectForActivityType:${2:String?})" },{ "trigger": "setAngle \t func UIGravityBehavior -> void" , "contents": "setAngle(${1:CGFloat}, magnitude:${2:CGFloat})" },{ "trigger": "textFieldShouldClear \t func unknown -> BOOL
" , "contents": "textFieldShouldClear(${1:UITextField})" },{ "trigger": "setOn \t func UISwitch -> void" , "contents": "setOn(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "calendar \t NSCalendar", "contents": "calendar" },{ "trigger": "layoutMarginsGuide \t UILayoutGuide", "contents": "layoutMarginsGuide" },{ "trigger": "estimatedItemSize \t CGSize", "contents": "estimatedItemSize" },{ "trigger": "NSObject.setAccessibilityCustomActions \t class NSObject -> void" , "contents": "NSObject.setAccessibilityCustomActions(${1:[UIAccessibilityCustomAction]?})" },{ "trigger": "UIView.setAnimationStartDate \t class UIView -> void" , "contents": "UIView.setAnimationStartDate(${1:NSDate})" },{ "trigger": "UsesDeviceMetrics \t NSStringDrawingOptions", "contents": "UsesDeviceMetrics" },{ "trigger": "boundingRectForGlyphRange \t func NSLayoutManager -> CGRect
" , "contents": "boundingRectForGlyphRange(${1:NSRange}, inTextContainer:${2:NSTextContainer})" },{ "trigger": "multipleSelectionBackgroundView \t UIView", "contents": "multipleSelectionBackgroundView" },{ "trigger": "Alert \t UIRemoteNotificationType", "contents": "Alert" },{ "trigger": "outputType \t UIPrintInfoOutputType", "contents": "outputType" },{ "trigger": "printToPrinter \t func UIPrintInteractionController -> BOOL
" , "contents": "printToPrinter(${1:UIPrinter}, completionHandler:${2:UIPrintInteractionCompletionHandler?})" },{ "trigger": "alertLaunchImage \t String", "contents": "alertLaunchImage" },{ "trigger": "sizeWithFont \t func NSString -> CGSize
" , "contents": "sizeWithFont(${1:UIFont!}, constrainedToSize:${2:CGSize}, lineBreakMode:${3:NSLineBreakMode})" },{ "trigger": "visible \t BOOL", "contents": "visible" },{ "trigger": "UIDictationPhrase \t UIDictationPhrase", "contents": "UIDictationPhrase" },{ "trigger": "leftBarButtonItem \t UIBarButtonItem", "contents": "leftBarButtonItem" },{ "trigger": "setBackgroundImage \t func UIButton -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "endEditing \t func UIView -> BOOL
" , "contents": "endEditing(${1:BOOL})" },{ "trigger": "updateCurrentPageDisplay \t func UIPageControl -> void" , "contents": "updateCurrentPageDisplay(${1:})" },{ "trigger": "UIApplicationOpenURLOptionsOpenInPlaceKey \t String", "contents": "UIApplicationOpenURLOptionsOpenInPlaceKey" },{ "trigger": "None \t UIViewAutoresizing", "contents": "None" },{ "trigger": "tableView \t func UITableViewController -> BOOL
" , "contents": "tableView(${1:UITableView}, canFocusRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "thumbTintColor \t UIColor", "contents": "thumbTintColor" },{ "trigger": "UIAccessibilityAnnouncementNotification \t UIAccessibilityNotifications", "contents": "UIAccessibilityAnnouncementNotification" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, performAction:${2:Selector}, forItemAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "UIAccessibilitySpeechAttributePitch \t String", "contents": "UIAccessibilitySpeechAttributePitch" },{ "trigger": "tableView \t func UITableViewController -> Int
" , "contents": "tableView(${1:UITableView}, numberOfRowsInSection:${2:Int})" },{ "trigger": "presentedItemDidLoseVersion \t func UIDocument -> void" , "contents": "presentedItemDidLoseVersion(${1:NSFileVersion})" },{ "trigger": "contentSizeAdjustment \t CGSize", "contents": "contentSizeAdjustment" },{ "trigger": "UIAccessibilitySwitchControlStatusDidChangeNotification \t String", "contents": "UIAccessibilitySwitchControlStatusDidChangeNotification" },{ "trigger": "menuFrame \t CGRect", "contents": "menuFrame" },{ "trigger": "activityViewController \t func UIActivityItemProvider -> UIImage?
" , "contents": "activityViewController(${1:UIActivityViewController}, thumbnailImageForActivityType:${2:String?}, suggestedSize:${3:CGSize})" },{ "trigger": "primaryLanguage \t String", "contents": "primaryLanguage" },{ "trigger": "NSAttachmentAttributeName \t String", "contents": "NSAttachmentAttributeName" },{ "trigger": "rightAnchor \t NSLayoutXAxisAnchor", "contents": "rightAnchor" },{ "trigger": "UICollectionViewLayoutAttributes.layoutAttributesForSupplementaryViewOfKind \t class UICollectionViewLayoutAttributes -> Self
" , "contents": "UICollectionViewLayoutAttributes.layoutAttributesForSupplementaryViewOfKind(${1:String}, withIndexPath:${2:NSIndexPath})" },{ "trigger": "reloadSectionIndexTitles \t func UITableView -> void" , "contents": "reloadSectionIndexTitles(${1:})" },{ "trigger": "z \t UIAccelerationValue", "contents": "z" },{ "trigger": "UIAttachmentBehavior.slidingAttachmentWithItem \t class UIAttachmentBehavior -> Self
" , "contents": "UIAttachmentBehavior.slidingAttachmentWithItem(${1:UIDynamicItem}, attachmentAnchor:${2:CGPoint}, axisOfTranslation:${3:CGVector})" },{ "trigger": "printerPickerControllerDidPresent \t func unknown -> void" , "contents": "printerPickerControllerDidPresent(${1:UIPrinterPickerController})" },{ "trigger": "translationInView \t func UIPanGestureRecognizer -> CGPoint
" , "contents": "translationInView(${1:UIView?})" },{ "trigger": "category \t String", "contents": "category" },{ "trigger": "textFieldDidBeginEditing \t func unknown -> void" , "contents": "textFieldDidBeginEditing(${1:UITextField})" },{ "trigger": "insertSubview \t func UIView -> void" , "contents": "insertSubview(${1:UIView}, aboveSubview:${2:UIView})" },{ "trigger": "beginInteractiveMovementForItemAtIndexPath \t func UICollectionView -> BOOL
" , "contents": "beginInteractiveMovementForItemAtIndexPath(${1:NSIndexPath})" },{ "trigger": "AllCorners \t UIRectCorner", "contents": "AllCorners" },{ "trigger": "documentContextAfterInput \t String", "contents": "documentContextAfterInput" },{ "trigger": "UIView.setAnimationTransition \t class UIView -> void" , "contents": "UIView.setAnimationTransition(${1:UIViewAnimationTransition}, forView:${2:UIView}, cache:${3:BOOL})" },{ "trigger": "string \t String", "contents": "string" },{ "trigger": "perform \t func UIStoryboardSegue -> void" , "contents": "perform(${1:})" },{ "trigger": "containerView \t func unknown -> UIView?
" , "contents": "containerView(${1:})" },{ "trigger": "toggleUnderline \t func NSObject -> void" , "contents": "toggleUnderline(${1:AnyObject?})" },{ "trigger": "UIModalTransitionStyle \t UIModalTransitionStyle", "contents": "UIModalTransitionStyle" },{ "trigger": "addTarget \t func UIControl -> void" , "contents": "addTarget(${1:AnyObject?}, action:${2:Selector}, forControlEvents:${3:UIControlEvents})" },{ "trigger": "accessibilityAssistiveTechnologyFocusedIdentifiers \t func NSObject -> Set String ?
" , "contents": "accessibilityAssistiveTechnologyFocusedIdentifiers(${1:})" },{ "trigger": "tableView \t func UITableViewController -> BOOL
" , "contents": "tableView(${1:UITableView}, canPerformAction:${2:Selector}, forRowAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "restorationParent \t UIStateRestoring", "contents": "restorationParent" },{ "trigger": "pushDirection \t CGVector", "contents": "pushDirection" },{ "trigger": "encodeWithCoder \t func UIBarButtonItemGroup -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "transitionCoordinator \t func UIViewController -> UIViewControllerTransitionCoordinator?
" , "contents": "transitionCoordinator(${1:})" },{ "trigger": "textInRange \t func unknown -> String?
" , "contents": "textInRange(${1:UITextRange})" },{ "trigger": "accessibilityElementIsFocused \t func NSObject -> BOOL
" , "contents": "accessibilityElementIsFocused(${1:})" },{ "trigger": "ensureLayoutForGlyphRange \t func NSLayoutManager -> void" , "contents": "ensureLayoutForGlyphRange(${1:NSRange})" },{ "trigger": "allowsMultipleSelectionDuringEditing \t BOOL", "contents": "allowsMultipleSelectionDuringEditing" },{ "trigger": "UIAttachmentBehaviorType \t UIAttachmentBehaviorType", "contents": "UIAttachmentBehaviorType" },{ "trigger": "AlignAllBaseline \t NSLayoutFormatOptions", "contents": "AlignAllBaseline" },{ "trigger": "tabBarController \t UITabBarController", "contents": "tabBarController" },{ "trigger": "TransitionCurlUp \t UIViewAnimationOptions", "contents": "TransitionCurlUp" },{ "trigger": "pickerView \t func unknown -> String?
" , "contents": "pickerView(${1:UIPickerView}, accessibilityLabelForComponent:${2:Int})" },{ "trigger": "heightAnchor \t NSLayoutDimension", "contents": "heightAnchor" },{ "trigger": "ClassSansSerif \t UIFontDescriptorSymbolicTraits", "contents": "ClassSansSerif" },{ "trigger": "showsSelectionIndicator \t BOOL", "contents": "showsSelectionIndicator" },{ "trigger": "ClassMask \t UIFontDescriptorSymbolicTraits", "contents": "ClassMask" },{ "trigger": "maximumLineHeight \t CGFloat", "contents": "maximumLineHeight" },{ "trigger": "UIMenuControllerDidHideMenuNotification \t String", "contents": "UIMenuControllerDidHideMenuNotification" },{ "trigger": "endFloatingCursor \t func unknown -> void" , "contents": "endFloatingCursor(${1:})" },{ "trigger": "NSLayoutConstraint \t NSLayoutConstraint", "contents": "NSLayoutConstraint" },{ "trigger": "sectionIndexColor \t UIColor", "contents": "sectionIndexColor" },{ "trigger": "UIPrinterCutterBehavior \t UIPrinterCutterBehavior", "contents": "UIPrinterCutterBehavior" },{ "trigger": "dictationRecordingDidEnd \t func UITextView -> void" , "contents": "dictationRecordingDidEnd(${1:})" },{ "trigger": "addKeyCommand \t func UIViewController -> void" , "contents": "addKeyCommand(${1:UIKeyCommand})" },{ "trigger": "actualScaleFactor \t CGFloat", "contents": "actualScaleFactor" },{ "trigger": "undoManager \t NSUndoManager", "contents": "undoManager" },{ "trigger": "showsSearchResultsButton \t BOOL", "contents": "showsSearchResultsButton" },{ "trigger": "offImage \t UIImage", "contents": "offImage" },{ "trigger": "Boundaries \t UICollisionBehaviorMode", "contents": "Boundaries" },{ "trigger": "NSHyphenationFactorDocumentAttribute \t String", "contents": "NSHyphenationFactorDocumentAttribute" },{ "trigger": "UIColor.lightGrayColor \t class UIColor -> UIColor
" , "contents": "UIColor.lightGrayColor(${1:})" },{ "trigger": "isCancelled \t func unknown -> BOOL
" , "contents": "isCancelled(${1:})" },{ "trigger": "containsAttachmentsInRange \t func NSAttributedString -> BOOL
" , "contents": "containsAttachmentsInRange(${1:NSRange})" },{ "trigger": "NSLayoutRelation \t NSLayoutRelation", "contents": "NSLayoutRelation" },{ "trigger": "actionSheetCancel \t func UIDocumentInteractionController -> void" , "contents": "actionSheetCancel(${1:UIActionSheet})" },{ "trigger": "allowsInlineMediaPlayback \t BOOL", "contents": "allowsInlineMediaPlayback" },{ "trigger": "percentComplete \t func unknown -> CGFloat
" , "contents": "percentComplete(${1:})" },{ "trigger": "UIActivityCategory \t UIActivityCategory", "contents": "UIActivityCategory" },{ "trigger": "Right \t UISwipeGestureRecognizerDirection", "contents": "Right" },{ "trigger": "viewForFirstBaselineLayout \t UIView", "contents": "viewForFirstBaselineLayout" },{ "trigger": "registerClass \t func UICollectionViewLayout -> void" , "contents": "registerClass(${1:AnyClass?}, forDecorationViewOfKind:${2:String})" },{ "trigger": "UITextChecker \t UITextChecker", "contents": "UITextChecker" },{ "trigger": "UIImageRenderingMode \t UIImageRenderingMode", "contents": "UIImageRenderingMode" },{ "trigger": "copyWithZone \t func NSTextTab -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "animationEnded \t func unknown -> void" , "contents": "animationEnded(${1:BOOL})" },{ "trigger": "indexPathAfterUpdate \t NSIndexPath", "contents": "indexPathAfterUpdate" },{ "trigger": "willMoveToParentViewController \t func UIViewController -> void" , "contents": "willMoveToParentViewController(${1:UIViewController?})" },{ "trigger": "shouldGroupAccessibilityChildren \t BOOL", "contents": "shouldGroupAccessibilityChildren" },{ "trigger": "UIAccessibilityTraitStartsMediaSession \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitStartsMediaSession" },{ "trigger": "registerNib \t func UICollectionView -> void" , "contents": "registerNib(${1:UINib?}, forSupplementaryViewOfKind:${2:String}, withReuseIdentifier:${3:String})" },{ "trigger": "constraintLessThanOrEqualToConstant \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintLessThanOrEqualToConstant(${1:CGFloat})" },{ "trigger": "printerID \t String", "contents": "printerID" },{ "trigger": "UIColor.orangeColor \t class UIColor -> UIColor
" , "contents": "UIColor.orangeColor(${1:})" },{ "trigger": "CalculationModeLinear \t UIViewKeyframeAnimationOptions", "contents": "CalculationModeLinear" },{ "trigger": "NSObject.setIsAccessibilityElement \t class NSObject -> void" , "contents": "NSObject.setIsAccessibilityElement(${1:BOOL})" },{ "trigger": "openURL \t func UIApplication -> BOOL
" , "contents": "openURL(${1:NSURL})" },{ "trigger": "UIPreviewAction.actionWithTitle \t class UIPreviewAction -> Void" , "contents": "UIPreviewAction.actionWithTitle(${1:String}, style:${2:UIPreviewActionStyle}, handler:${3:UIPreviewAction}, UIViewController:${4:})" },{ "trigger": "TopRight \t UIRectCorner", "contents": "TopRight" },{ "trigger": "targetViewControllerForAction \t func UIViewController -> UIViewController?
" , "contents": "targetViewControllerForAction(${1:Selector}, sender:${2:AnyObject?})" },{ "trigger": "hidesBottomBarWhenPushed \t BOOL", "contents": "hidesBottomBarWhenPushed" },{ "trigger": "presentedView \t func UIPresentationController -> UIView?
" , "contents": "presentedView(${1:})" },{ "trigger": "UIApplicationOpenURLOptionsSourceApplicationKey \t String", "contents": "UIApplicationOpenURLOptionsSourceApplicationKey" },{ "trigger": "tableView \t func UITableViewController -> NSIndexPath?
" , "contents": "tableView(${1:UITableView}, willSelectRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "updateChangeCountWithToken \t func UIDocument -> void" , "contents": "updateChangeCountWithToken(${1:AnyObject}, forSaveOperation:${2:UIDocumentSaveOperation})" },{ "trigger": "addItem \t func UIFieldBehavior -> void" , "contents": "addItem(${1:UIDynamicItem})" },{ "trigger": "NSTextLayoutOrientation \t NSTextLayoutOrientation", "contents": "NSTextLayoutOrientation" },{ "trigger": "collapsed \t BOOL", "contents": "collapsed" },{ "trigger": "encodeWithCoder \t func UIKeyCommand -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "textStylingAtPosition \t func UITextView -> [String" , "contents": "textStylingAtPosition(${1:UITextPosition}, inDirection:${2:UITextStorageDirection})" },{ "trigger": "UIAccessibilityTraitAllowsDirectInteraction \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitAllowsDirectInteraction" },{ "trigger": "UIView.animateKeyframesWithDuration \t class UIView -> Void," , "contents": "UIView.animateKeyframesWithDuration(${1:NSTimeInterval}, delay:${2:NSTimeInterval}, options:${3:UIViewKeyframeAnimationOptions}, animations:${4: -> Void}, completion:${5:BOOL -> Void?})" },{ "trigger": "glyphIndexForPoint \t func NSLayoutManager -> Int
" , "contents": "glyphIndexForPoint(${1:CGPoint}, inTextContainer:${2:NSTextContainer}, fractionOfDistanceThroughGlyph:${3:UnsafeMutablePointer<CGFloat>})" },{ "trigger": "textViewShouldBeginEditing \t func unknown -> BOOL
" , "contents": "textViewShouldBeginEditing(${1:UITextView})" },{ "trigger": "prepareForDrawingPages \t func UIPrintPageRenderer -> void" , "contents": "prepareForDrawingPages(${1:NSRange})" },{ "trigger": "NSParagraphStyle.defaultWritingDirectionForLanguage \t class NSParagraphStyle -> NSWritingDirection
" , "contents": "NSParagraphStyle.defaultWritingDirectionForLanguage(${1:String?})" },{ "trigger": "gestureRecognizer \t func unknown -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldBeRequiredToFailByGestureRecognizer:${2:UIGestureRecognizer})" },{ "trigger": "removeAllSegments \t func UISegmentedControl -> void" , "contents": "removeAllSegments(${1:})" },{ "trigger": "multitaskingSupported \t BOOL", "contents": "multitaskingSupported" },{ "trigger": "allTargets \t func UIControl -> Set NSObject 
" , "contents": "allTargets(${1:})" },{ "trigger": "displaysSearchBarInNavigationBar \t BOOL", "contents": "displaysSearchBarInNavigationBar" },{ "trigger": "sizeWithAttributes \t func NSString -> CGSize
" , "contents": "sizeWithAttributes(${1:[String })" },{ "trigger": "model \t String", "contents": "model" },{ "trigger": "gestureRecognizer \t func unknown -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldRecognizeSimultaneouslyWithGestureRecognizer:${2:UIGestureRecognizer})" },{ "trigger": "currentLayout \t UICollectionViewLayout", "contents": "currentLayout" },{ "trigger": "UICollectionViewController \t UICollectionViewController", "contents": "UICollectionViewController" },{ "trigger": "scrollViewDidZoom \t func UITableViewController -> void" , "contents": "scrollViewDidZoom(${1:UIScrollView})" },{ "trigger": "closestPositionToPoint \t func UITextView -> UITextPosition?
" , "contents": "closestPositionToPoint(${1:CGPoint})" },{ "trigger": "registerUserNotificationSettings \t func UIApplication -> void" , "contents": "registerUserNotificationSettings(${1:UIUserNotificationSettings})" },{ "trigger": "UIScrollView \t UIScrollView", "contents": "UIScrollView" },{ "trigger": "imageView \t UIImageView", "contents": "imageView" },{ "trigger": "currentThumbImage \t UIImage", "contents": "currentThumbImage" },{ "trigger": "UIGraphicsBeginImageContext \t func UIGravityBehavior -> void" , "contents": "UIGraphicsBeginImageContext(${1:CGSize})" },{ "trigger": "shadowImageForToolbarPosition \t func UIToolbar -> UIImage?
" , "contents": "shadowImageForToolbarPosition(${1:UIBarPosition})" },{ "trigger": "glyphAtIndex \t func NSLayoutManager -> CGGlyph
" , "contents": "glyphAtIndex(${1:Int})" },{ "trigger": "UICollectionViewLayout.layoutAttributesClass \t class UICollectionViewLayout -> AnyClass
" , "contents": "UICollectionViewLayout.layoutAttributesClass(${1:})" },{ "trigger": "topItem \t UINavigationItem", "contents": "topItem" },{ "trigger": "UIKeyboardAnimationCurveUserInfoKey \t String", "contents": "UIKeyboardAnimationCurveUserInfoKey" },{ "trigger": "shouldChangeTextInRange \t func UITextView -> BOOL
" , "contents": "shouldChangeTextInRange(${1:UITextRange}, replacementText:${2:String})" },{ "trigger": "decodeCGAffineTransformForKey \t func NSCoder -> CGAffineTransform
" , "contents": "decodeCGAffineTransformForKey(${1:String})" },{ "trigger": "apportionsSegmentWidthsByContent \t BOOL", "contents": "apportionsSegmentWidthsByContent" },{ "trigger": "targetForAction \t func UIResponder -> AnyObject?
" , "contents": "targetForAction(${1:Selector}, withSender:${2:AnyObject?})" },{ "trigger": "willTransitionFromLayout \t func UICollectionReusableView -> void" , "contents": "willTransitionFromLayout(${1:UICollectionViewLayout}, toLayout:${2:UICollectionViewLayout})" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldHighlightRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "NSHTMLTextDocumentType \t String", "contents": "NSHTMLTextDocumentType" },{ "trigger": "CGGlyphAtIndex \t func NSLayoutManager -> CGGlyph
" , "contents": "CGGlyphAtIndex(${1:Int}, isValidIndex:${2:UnsafeMutablePointer<BOOL>})" },{ "trigger": "UIActivityTypePostToFacebook \t String", "contents": "UIActivityTypePostToFacebook" },{ "trigger": "UIFontWeightMedium \t CGFloat", "contents": "UIFontWeightMedium" },{ "trigger": "documentStorageURL \t func NSFileProviderExtension -> NSURL
" , "contents": "documentStorageURL(${1:})" },{ "trigger": "isAnimating \t func UIImageView -> BOOL
" , "contents": "isAnimating(${1:})" },{ "trigger": "accessibilityPath \t UIBezierPath", "contents": "accessibilityPath" },{ "trigger": "boundingRectWithSize \t func NSAttributedString -> CGRect
" , "contents": "boundingRectWithSize(${1:CGSize}, options:${2:NSStringDrawingOptions}, context:${3:NSStringDrawingContext?})" },{ "trigger": "fixesAttributesLazily \t BOOL", "contents": "fixesAttributesLazily" },{ "trigger": "finishInteractiveTransition \t func UICollectionView -> void" , "contents": "finishInteractiveTransition(${1:})" },{ "trigger": "videoQuality \t UIImagePickerControllerQualityType", "contents": "videoQuality" },{ "trigger": "motionBegan \t func UIResponder -> void" , "contents": "motionBegan(${1:UIEventSubtype}, withEvent:${2:UIEvent?})" },{ "trigger": "parentViewController \t UIViewController", "contents": "parentViewController" },{ "trigger": "drawPlaceholderInRect \t func UITextField -> void" , "contents": "drawPlaceholderInRect(${1:CGRect})" },{ "trigger": "indexPathsToInsertForDecorationViewOfKind \t func UICollectionViewLayout -> [NSIndexPath]
" , "contents": "indexPathsToInsertForDecorationViewOfKind(${1:String})" },{ "trigger": "UIView \t UIView", "contents": "UIView" },{ "trigger": "drawTextInRect \t func UILabel -> void" , "contents": "drawTextInRect(${1:CGRect})" },{ "trigger": "applicationWillResignActive \t func unknown -> void" , "contents": "applicationWillResignActive(${1:UIApplication})" },{ "trigger": "collectionView \t func UICollectionViewController -> void" , "contents": "collectionView(${1:UICollectionView}, willDisplaySupplementaryView:${2:UICollectionReusableView}, forElementKind:${3:String}, atIndexPath:${4:NSIndexPath})" },{ "trigger": "prepareLayout \t func UICollectionViewLayout -> void" , "contents": "prepareLayout(${1:})" },{ "trigger": "deselectRowAtIndexPath \t func UITableView -> void" , "contents": "deselectRowAtIndexPath(${1:NSIndexPath}, animated:${2:BOOL})" },{ "trigger": "AlignAllFirstBaseline \t NSLayoutFormatOptions", "contents": "AlignAllFirstBaseline" },{ "trigger": "UIApplicationState \t UIApplicationState", "contents": "UIApplicationState" },{ "trigger": "UIScreen.mainScreen \t class UIScreen -> UIScreen
" , "contents": "UIScreen.mainScreen(${1:})" },{ "trigger": "UIAccessibilityZoomType \t UIAccessibilityZoomType", "contents": "UIAccessibilityZoomType" },{ "trigger": "propertyForGlyphAtIndex \t func NSLayoutManager -> NSGlyphProperty
" , "contents": "propertyForGlyphAtIndex(${1:Int})" },{ "trigger": "firstUnlaidCharacterIndex \t func NSLayoutManager -> Int
" , "contents": "firstUnlaidCharacterIndex(${1:})" },{ "trigger": "detectsPhoneNumbers \t BOOL", "contents": "detectsPhoneNumbers" },{ "trigger": "ClassClarendonSerifs \t UIFontDescriptorSymbolicTraits", "contents": "ClassClarendonSerifs" },{ "trigger": "NSCharacterEncodingDocumentAttribute \t String", "contents": "NSCharacterEncodingDocumentAttribute" },{ "trigger": "tableView \t func UITableViewController -> UIView?
" , "contents": "tableView(${1:UITableView}, viewForFooterInSection:${2:Int})" },{ "trigger": "UIApplicationWillChangeStatusBarOrientationNotification \t String", "contents": "UIApplicationWillChangeStatusBarOrientationNotification" },{ "trigger": "EditingDidEnd \t UIControlEvents", "contents": "EditingDidEnd" },{ "trigger": "NSTextLayoutSectionsAttribute \t String", "contents": "NSTextLayoutSectionsAttribute" },{ "trigger": "UICollectionView \t UICollectionView", "contents": "UICollectionView" },{ "trigger": "UIColor.purpleColor \t class UIColor -> UIColor
" , "contents": "UIColor.purpleColor(${1:})" },{ "trigger": "accessibilityDecrement \t func NSObject -> void" , "contents": "accessibilityDecrement(${1:})" },{ "trigger": "numberOfLines \t Int", "contents": "numberOfLines" },{ "trigger": "UITextRange \t UITextRange", "contents": "UITextRange" },{ "trigger": "delegate \t UINavigationBarDelegate", "contents": "delegate" },{ "trigger": "UIPrintInteractionController.canPrintData \t class UIPrintInteractionController -> BOOL
" , "contents": "UIPrintInteractionController.canPrintData(${1:NSData})" },{ "trigger": "UIApplication.sharedApplication \t class UIApplication -> UIApplication
" , "contents": "UIApplication.sharedApplication(${1:})" },{ "trigger": "animationControllerForDismissedController \t func unknown -> UIViewControllerAnimatedTransitioning?
" , "contents": "animationControllerForDismissedController(${1:UIViewController})" },{ "trigger": "finalizeCollectionViewUpdates \t func UICollectionViewLayout -> void" , "contents": "finalizeCollectionViewUpdates(${1:})" },{ "trigger": "layoutAttributesForSupplementaryViewOfKind \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForSupplementaryViewOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, performFetchWithCompletionHandler:${2:UIBackgroundFetchResult -> Void})" },{ "trigger": "UITouchProperties \t UITouchProperties", "contents": "UITouchProperties" },{ "trigger": "UIFontTextStyleBody \t String", "contents": "UIFontTextStyleBody" },{ "trigger": "maximumContentHeight \t CGFloat", "contents": "maximumContentHeight" },{ "trigger": "collectionView \t func unknown -> CGPoint
" , "contents": "collectionView(${1:UICollectionView}, targetContentOffsetForProposedContentOffset:${2:CGPoint})" },{ "trigger": "UIAccessibilityAnnouncementKeyStringValue \t String", "contents": "UIAccessibilityAnnouncementKeyStringValue" },{ "trigger": "viewWillTransitionToSize \t func unknown -> void" , "contents": "viewWillTransitionToSize(${1:CGSize}, withTransitionCoordinator:${2:UIViewControllerTransitionCoordinator})" },{ "trigger": "preferredContentSizeCategory \t String", "contents": "preferredContentSizeCategory" },{ "trigger": "prepareForSegue \t func UIViewController -> void" , "contents": "prepareForSegue(${1:UIStoryboardSegue}, sender:${2:AnyObject?})" },{ "trigger": "buttonType \t UIButtonType", "contents": "buttonType" },{ "trigger": "detailTextForGuidedAccessRestrictionWithIdentifier \t func unknown -> String?
" , "contents": "detailTextForGuidedAccessRestrictionWithIdentifier(${1:String})" },{ "trigger": "UIBezierPath.bezierPathWithArcCenter \t class UIBezierPath -> Self
" , "contents": "UIBezierPath.bezierPathWithArcCenter(${1:CGPoint}, radius:${2:CGFloat}, startAngle:${3:CGFloat}, endAngle:${4:CGFloat}, clockwise:${5:BOOL})" },{ "trigger": "accessibilityContainer \t AnyObject", "contents": "accessibilityContainer" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, willDisplayHeaderView:${2:UIView}, forSection:${3:Int})" },{ "trigger": "smoothness \t CGFloat", "contents": "smoothness" },{ "trigger": "systemLayoutFittingSizeDidChangeForChildContentContainer \t func UIViewController -> void" , "contents": "systemLayoutFittingSizeDidChangeForChildContentContainer(${1:UIContentContainer})" },{ "trigger": "UIBarButtonSystemItem \t UIBarButtonSystemItem", "contents": "UIBarButtonSystemItem" },{ "trigger": "clearsOnBeginEditing \t BOOL", "contents": "clearsOnBeginEditing" },{ "trigger": "setDrawsOutsideLineFragment \t func NSLayoutManager -> void" , "contents": "setDrawsOutsideLineFragment(${1:BOOL}, forGlyphAtIndex:${2:Int})" },{ "trigger": "revertToContentsOfURL \t func UIDocument -> Void?
" , "contents": "revertToContentsOfURL(${1:NSURL}, completionHandler:${2:BOOL -> Void?})" },{ "trigger": "scrollViewWillBeginDecelerating \t func UITableViewController -> void" , "contents": "scrollViewWillBeginDecelerating(${1:UIScrollView})" },{ "trigger": "UIImage.imageNamed \t class UIImage -> UIImage?
" , "contents": "UIImage.imageNamed(${1:String}, inBundle:${2:NSBundle?}, compatibleWithTraitCollection:${3:UITraitCollection?})" },{ "trigger": "UIEdgeInsetsZero \t UIEdgeInsets", "contents": "UIEdgeInsetsZero" },{ "trigger": "baseWritingDirectionForPosition \t func UITextView -> UITextWritingDirection
" , "contents": "baseWritingDirectionForPosition(${1:UITextPosition}, inDirection:${2:UITextStorageDirection})" },{ "trigger": "shadowBlurRadius \t CGFloat", "contents": "shadowBlurRadius" },{ "trigger": "capHeight \t CGFloat", "contents": "capHeight" },{ "trigger": "row \t Int", "contents": "row" },{ "trigger": "traitCollectionDidChange \t func unknown -> void" , "contents": "traitCollectionDidChange(${1:UITraitCollection?})" },{ "trigger": "NSLayoutConstraint.deactivateConstraints \t class NSLayoutConstraint -> void" , "contents": "NSLayoutConstraint.deactivateConstraints(${1:[NSLayoutConstraint]})" },{ "trigger": "removeFromPrintPageRenderer \t func UIPrintFormatter -> void" , "contents": "removeFromPrintPageRenderer(${1:})" },{ "trigger": "UIDevice.currentDevice \t class UIDevice -> UIDevice
" , "contents": "UIDevice.currentDevice(${1:})" },{ "trigger": "TouchDragExit \t UIControlEvents", "contents": "TouchDragExit" },{ "trigger": "UIStepper \t UIStepper", "contents": "UIStepper" },{ "trigger": "NSDataAsset \t NSDataAsset", "contents": "NSDataAsset" },{ "trigger": "stroke \t func UIBezierPath -> void" , "contents": "stroke(${1:})" },{ "trigger": "delegate \t UIPrinterPickerControllerDelegate", "contents": "delegate" },{ "trigger": "layoutMarginsRelativeArrangement \t BOOL", "contents": "layoutMarginsRelativeArrangement" },{ "trigger": "insertRowsAtIndexPaths \t func UITableView -> void" , "contents": "insertRowsAtIndexPaths(${1:[NSIndexPath]}, withRowAnimation:${2:UITableViewRowAnimation})" },{ "trigger": "didPresentAlertView \t func unknown -> void" , "contents": "didPresentAlertView(${1:UIAlertView})" },{ "trigger": "activityViewController \t func UIActivityItemProvider -> String
" , "contents": "activityViewController(${1:UIActivityViewController}, subjectForActivityType:${2:String?})" },{ "trigger": "UIBarMetrics \t UIBarMetrics", "contents": "UIBarMetrics" },{ "trigger": "scrollViewWillEndDragging \t func UITableViewController -> void" , "contents": "scrollViewWillEndDragging(${1:UIScrollView}, withVelocity:${2:CGPoint}, targetContentOffset:${3:UnsafeMutablePointer<CGPoint>})" },{ "trigger": "directionalLockEnabled \t BOOL", "contents": "directionalLockEnabled" },{ "trigger": "UIApplicationLaunchOptionsUserActivityDictionaryKey \t String", "contents": "UIApplicationLaunchOptionsUserActivityDictionaryKey" },{ "trigger": "systemLayoutFittingSizeDidChangeForChildContentContainer \t func UIPresentationController -> void" , "contents": "systemLayoutFittingSizeDidChangeForChildContentContainer(${1:UIContentContainer})" },{ "trigger": "layoutAttributesForCellAtIndexPath \t func UIDynamicAnimator -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForCellAtIndexPath(${1:NSIndexPath})" },{ "trigger": "UIView.setAnimationBeginsFromCurrentState \t class UIView -> void" , "contents": "UIView.setAnimationBeginsFromCurrentState(${1:BOOL})" },{ "trigger": "showsBookmarkButton \t BOOL", "contents": "showsBookmarkButton" },{ "trigger": "NSObject.accessibilityHint \t class NSObject -> String?
" , "contents": "NSObject.accessibilityHint(${1:})" },{ "trigger": "scrollToNearestSelectedRowAtScrollPosition \t func UITableView -> void" , "contents": "scrollToNearestSelectedRowAtScrollPosition(${1:UITableViewScrollPosition}, animated:${2:BOOL})" },{ "trigger": "UIInterpolatingMotionEffectType \t UIInterpolatingMotionEffectType", "contents": "UIInterpolatingMotionEffectType" },{ "trigger": "registerClass \t func UITableView -> void" , "contents": "registerClass(${1:AnyClass?}, forCellReuseIdentifier:${2:String})" },{ "trigger": "sizeToFit \t func UIView -> void" , "contents": "sizeToFit(${1:})" },{ "trigger": "loadData \t func UIWebView -> void" , "contents": "loadData(${1:NSData}, MIMEType:${2:String}, textEncodingName:${3:String}, baseURL:${4:NSURL})" },{ "trigger": "showsCameraControls \t BOOL", "contents": "showsCameraControls" },{ "trigger": "UITextInputAssistantItem \t UITextInputAssistantItem", "contents": "UITextInputAssistantItem" },{ "trigger": "NSTextStorage \t NSTextStorage", "contents": "NSTextStorage" },{ "trigger": "UIMotionEffectGroup \t UIMotionEffectGroup", "contents": "UIMotionEffectGroup" },{ "trigger": "indexPathForRowAtPoint \t func UITableView -> NSIndexPath?
" , "contents": "indexPathForRowAtPoint(${1:CGPoint})" },{ "trigger": "rotatingFooterView \t func UIViewController -> UIView?
" , "contents": "rotatingFooterView(${1:})" },{ "trigger": "selectedViewController \t UIViewController", "contents": "selectedViewController" },{ "trigger": "stopLoading \t func UIWebView -> void" , "contents": "stopLoading(${1:})" },{ "trigger": "hitTest \t func UIView -> UIView?
" , "contents": "hitTest(${1:CGPoint}, withEvent:${2:UIEvent?})" },{ "trigger": "backgroundView \t UIView", "contents": "backgroundView" },{ "trigger": "UIImage.supportsSecureCoding \t class UIImage -> BOOL
" , "contents": "UIImage.supportsSecureCoding(${1:})" },{ "trigger": "editingRectForBounds \t func UITextField -> CGRect
" , "contents": "editingRectForBounds(${1:CGRect})" },{ "trigger": "indentationWidth \t CGFloat", "contents": "indentationWidth" },{ "trigger": "readAdditionalContentFromURL \t func UIManagedDocument -> void" , "contents": "readAdditionalContentFromURL(${1:NSURL})" },{ "trigger": "loadView \t func UIViewController -> void" , "contents": "loadView(${1:})" },{ "trigger": "UIView.transitionFromView \t class UIView -> Void?
" , "contents": "UIView.transitionFromView(${1:UIView}, toView:${2:UIView}, duration:${3:NSTimeInterval}, options:${4:UIViewAnimationOptions}, completion:${5:BOOL -> Void?})" },{ "trigger": "tabBar \t func UITabBarController -> void" , "contents": "tabBar(${1:UITabBar}, willBeginCustomizingItems:${2:[UITabBarItem]})" },{ "trigger": "copyWithZone \t func UIPreviewAction -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "UIDeviceBatteryStateDidChangeNotification \t String", "contents": "UIDeviceBatteryStateDidChangeNotification" },{ "trigger": "scrollViewDidEndScrollingAnimation \t func unknown -> void" , "contents": "scrollViewDidEndScrollingAnimation(${1:UIScrollView})" },{ "trigger": "viewForKey \t func unknown -> UIView?
" , "contents": "viewForKey(${1:String})" },{ "trigger": "contentOffsetAdjustment \t CGPoint", "contents": "contentOffsetAdjustment" },{ "trigger": "UIDeviceBatteryLevelDidChangeNotification \t String", "contents": "UIDeviceBatteryLevelDidChangeNotification" },{ "trigger": "popoverPresentationController \t UIPopoverPresentationController", "contents": "popoverPresentationController" },{ "trigger": "fileURL \t NSURL", "contents": "fileURL" },{ "trigger": "tableView \t func UITableViewController -> UITableViewCellAccessoryType
" , "contents": "tableView(${1:UITableView}, accessoryTypeForRowWithIndexPath:${2:NSIndexPath})" },{ "trigger": "delegate \t UIDocumentPickerDelegate", "contents": "delegate" },{ "trigger": "mutableCopyWithZone \t func UIUserNotificationCategory -> AnyObject
" , "contents": "mutableCopyWithZone(${1:NSZone})" },{ "trigger": "rowHeight \t CGFloat", "contents": "rowHeight" },{ "trigger": "insertSections \t func UITableView -> void" , "contents": "insertSections(${1:NSIndexSet}, withRowAnimation:${2:UITableViewRowAnimation})" },{ "trigger": "textStylingAtPosition \t func UITextField -> [String" , "contents": "textStylingAtPosition(${1:UITextPosition}, inDirection:${2:UITextStorageDirection})" },{ "trigger": "selectedImageTintColor \t UIColor", "contents": "selectedImageTintColor" },{ "trigger": "UIFieldBehavior.vortexField \t class UIFieldBehavior -> Self
" , "contents": "UIFieldBehavior.vortexField(${1:})" },{ "trigger": "beginCustomizingItems \t func UITabBar -> void" , "contents": "beginCustomizingItems(${1:[UITabBarItem]})" },{ "trigger": "removeTextContainerAtIndex \t func NSLayoutManager -> void" , "contents": "removeTextContainerAtIndex(${1:Int})" },{ "trigger": "reloadComponent \t func UIPickerView -> void" , "contents": "reloadComponent(${1:Int})" },{ "trigger": "videoMaximumDuration \t NSTimeInterval", "contents": "videoMaximumDuration" },{ "trigger": "statusBarStyle \t UIStatusBarStyle", "contents": "statusBarStyle" },{ "trigger": "beginReceivingRemoteControlEvents \t func UIApplication -> void" , "contents": "beginReceivingRemoteControlEvents(${1:})" },{ "trigger": "position \t CGPoint", "contents": "position" },{ "trigger": "Sound \t UIRemoteNotificationType", "contents": "Sound" },{ "trigger": "gestureRecognizer \t func unknown -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldRequireFailureOfGestureRecognizer:${2:UIGestureRecognizer})" },{ "trigger": "AllEditingEvents \t UIControlEvents", "contents": "AllEditingEvents" },{ "trigger": "timeZone \t NSTimeZone", "contents": "timeZone" },{ "trigger": "backgroundRectForBounds \t func UIButton -> CGRect
" , "contents": "backgroundRectForBounds(${1:CGRect})" },{ "trigger": "nextResponder \t func UIResponder -> UIResponder?
" , "contents": "nextResponder(${1:})" },{ "trigger": "setNeedsFocusUpdate \t func unknown -> void" , "contents": "setNeedsFocusUpdate(${1:})" },{ "trigger": "positionWithinRange \t func unknown -> UITextPosition?
" , "contents": "positionWithinRange(${1:UITextRange}, atCharacterOffset:${2:Int})" },{ "trigger": "UsesFontLeading \t NSStringDrawingOptions", "contents": "UsesFontLeading" },{ "trigger": "collectionView \t func unknown -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, canPerformAction:${2:Selector}, forItemAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "hasText \t func unknown -> BOOL
" , "contents": "hasText(${1:})" },{ "trigger": "AlignAllTop \t NSLayoutFormatOptions", "contents": "AlignAllTop" },{ "trigger": "UIColor.grayColor \t class UIColor -> UIColor
" , "contents": "UIColor.grayColor(${1:})" },{ "trigger": "Left \t UIRectEdge", "contents": "Left" },{ "trigger": "deleteBackward \t func UITextField -> void" , "contents": "deleteBackward(${1:})" },{ "trigger": "invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths \t func UICollectionViewLayout -> UICollectionViewLayoutInvalidationContext
" , "contents": "invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths(${1:[NSIndexPath]}, previousIndexPaths:${2:[NSIndexPath]}, movementCancelled:${3:BOOL})" },{ "trigger": "width \t CGFloat", "contents": "width" },{ "trigger": "UIAlertController \t UIAlertController", "contents": "UIAlertController" },{ "trigger": "NSTextLayoutSectionOrientation \t String", "contents": "NSTextLayoutSectionOrientation" },{ "trigger": "UIButtonType \t UIButtonType", "contents": "UIButtonType" },{ "trigger": "UIFontWeightBlack \t CGFloat", "contents": "UIFontWeightBlack" },{ "trigger": "UIPasteboardChangedTypesAddedKey \t String", "contents": "UIPasteboardChangedTypesAddedKey" },{ "trigger": "addTarget \t func UIGestureRecognizer -> void" , "contents": "addTarget(${1:AnyObject}, action:${2:Selector})" },{ "trigger": "modalTransitionStyle \t UIModalTransitionStyle", "contents": "modalTransitionStyle" },{ "trigger": "wantsFullScreenLayout \t BOOL", "contents": "wantsFullScreenLayout" },{ "trigger": "TraitCondensed \t UIFontDescriptorSymbolicTraits", "contents": "TraitCondensed" },{ "trigger": "TraitBold \t UIFontDescriptorSymbolicTraits", "contents": "TraitBold" },{ "trigger": "strikethroughGlyphRange \t func NSLayoutManager -> void" , "contents": "strikethroughGlyphRange(${1:NSRange}, strikethroughType:${2:NSUnderlineStyle}, lineFragmentRect:${3:CGRect}, lineFragmentGlyphRange:${4:NSRange}, containerOrigin:${5:CGPoint})" },{ "trigger": "UISaveVideoAtPathToSavedPhotosAlbum \t func UIScreen -> void" , "contents": "UISaveVideoAtPathToSavedPhotosAlbum(${1:String}, _:${2:AnyObject?}, _:${3:Selector}, _:${4:UnsafeMutablePointer<Void>})" },{ "trigger": "prepareForReuse \t func UITableViewHeaderFooterView -> void" , "contents": "prepareForReuse(${1:})" },{ "trigger": "NSWritingDirection \t NSWritingDirection", "contents": "NSWritingDirection" },{ "trigger": "NSLayoutAttribute \t NSLayoutAttribute", "contents": "NSLayoutAttribute" },{ "trigger": "paginationMode \t UIWebPaginationMode", "contents": "paginationMode" },{ "trigger": "UISegmentedControl \t UISegmentedControl", "contents": "UISegmentedControl" },{ "trigger": "None \t UIRemoteNotificationType", "contents": "None" },{ "trigger": "willTransitionToTraitCollection \t func UIPresentationController -> void" , "contents": "willTransitionToTraitCollection(${1:UITraitCollection}, withTransitionCoordinator:${2:UIViewControllerTransitionCoordinator})" },{ "trigger": "leftViewMode \t UITextFieldViewMode", "contents": "leftViewMode" },{ "trigger": "deleteSections \t func UITableView -> void" , "contents": "deleteSections(${1:NSIndexSet}, withRowAnimation:${2:UITableViewRowAnimation})" },{ "trigger": "firstAttribute \t NSLayoutAttribute", "contents": "firstAttribute" },{ "trigger": "UITextInputTextColorKey \t String", "contents": "UITextInputTextColorKey" },{ "trigger": "searchDisplayControllerWillBeginSearch \t func unknown -> void" , "contents": "searchDisplayControllerWillBeginSearch(${1:UISearchDisplayController})" },{ "trigger": "ClassUnknown \t UIFontDescriptorSymbolicTraits", "contents": "ClassUnknown" },{ "trigger": "delegate \t UIDynamicAnimatorDelegate", "contents": "delegate" },{ "trigger": "UIDynamicBehavior \t UIDynamicBehavior", "contents": "UIDynamicBehavior" },{ "trigger": "closePath \t func UIBezierPath -> void" , "contents": "closePath(${1:})" },{ "trigger": "tableView \t func unknown -> void" , "contents": "tableView(${1:UITableView}, performAction:${2:Selector}, forRowAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "UIAccessibilityIsShakeToUndoEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsShakeToUndoEnabled(${1:})" },{ "trigger": "alignmentRectForFrame \t func UIView -> CGRect
" , "contents": "alignmentRectForFrame(${1:CGRect})" },{ "trigger": "numberOfComponentsInPickerView \t func unknown -> Int
" , "contents": "numberOfComponentsInPickerView(${1:UIPickerView})" },{ "trigger": "viewControllerForUnwindSegueAction \t func UIViewController -> UIViewController?
" , "contents": "viewControllerForUnwindSegueAction(${1:Selector}, fromViewController:${2:UIViewController}, withSender:${3:AnyObject?})" },{ "trigger": "collectionView \t func unknown -> void" , "contents": "collectionView(${1:UICollectionView}, didSelectItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIEdgeInsets \t UIEdgeInsets", "contents": "UIEdgeInsets" },{ "trigger": "completionSpeed \t CGFloat", "contents": "completionSpeed" },{ "trigger": "isPosition \t func unknown -> BOOL
" , "contents": "isPosition(${1:UITextPosition}, atBoundary:${2:UITextGranularity}, inDirection:${3:UITextDirection})" },{ "trigger": "registerForRemoteNotifications \t func UIApplication -> void" , "contents": "registerForRemoteNotifications(${1:})" },{ "trigger": "printInfo \t UIPrintInfo", "contents": "printInfo" },{ "trigger": "dataSource \t UICollectionViewDataSource", "contents": "dataSource" },{ "trigger": "UIFont.boldSystemFontOfSize \t class UIFont -> UIFont
" , "contents": "UIFont.boldSystemFontOfSize(${1:CGFloat})" },{ "trigger": "UIRegion.infiniteRegion \t class UIRegion -> Self
" , "contents": "UIRegion.infiniteRegion(${1:})" },{ "trigger": "bottomLayoutGuide \t UILayoutSupport", "contents": "bottomLayoutGuide" },{ "trigger": "location \t CGFloat", "contents": "location" },{ "trigger": "indexPathForSelectedRow \t NSIndexPath", "contents": "indexPathForSelectedRow" },{ "trigger": "Autoreverse \t UIViewAnimationOptions", "contents": "Autoreverse" },{ "trigger": "UIRegion \t UIRegion", "contents": "UIRegion" },{ "trigger": "searchBarBookmarkButtonClicked \t func unknown -> void" , "contents": "searchBarBookmarkButtonClicked(${1:UISearchBar})" },{ "trigger": "TransitionCurlDown \t UIViewAnimationOptions", "contents": "TransitionCurlDown" },{ "trigger": "replaceLayoutManager \t func NSTextContainer -> void" , "contents": "replaceLayoutManager(${1:NSLayoutManager})" },{ "trigger": "CGVectorValue \t func NSValue -> CGVector
" , "contents": "CGVectorValue(${1:})" },{ "trigger": "UIImagePickerController.availableCaptureModesForCameraDevice \t class UIImagePickerController -> [NSNumber]?
" , "contents": "UIImagePickerController.availableCaptureModesForCameraDevice(${1:UIImagePickerControllerCameraDevice})" },{ "trigger": "processEditing \t func NSTextStorage -> void" , "contents": "processEditing(${1:})" },{ "trigger": "UIPickerView \t UIPickerView", "contents": "UIPickerView" },{ "trigger": "exchangeSubviewAtIndex \t func UIView -> void" , "contents": "exchangeSubviewAtIndex(${1:Int}, withSubviewAtIndex:${2:Int})" },{ "trigger": "collapseSecondaryViewController \t func UIViewController -> void" , "contents": "collapseSecondaryViewController(${1:UIViewController}, forSplitViewController:${2:UISplitViewController})" },{ "trigger": "setShadowImage \t func UIToolbar -> void" , "contents": "setShadowImage(${1:UIImage?}, forToolbarPosition:${2:UIBarPosition})" },{ "trigger": "layoutAttributesForDecorationViewOfKind \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForDecorationViewOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "UIUserNotificationType \t UIUserNotificationType", "contents": "UIUserNotificationType" },{ "trigger": "beginUpdates \t func UITableView -> void" , "contents": "beginUpdates(${1:})" },{ "trigger": "UIAccessibilityTraitPlaysSound \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitPlaysSound" },{ "trigger": "UIImagePickerController.isFlashAvailableForCameraDevice \t class UIImagePickerController -> BOOL
" , "contents": "UIImagePickerController.isFlashAvailableForCameraDevice(${1:UIImagePickerControllerCameraDevice})" },{ "trigger": "UIView.areAnimationsEnabled \t class UIView -> BOOL
" , "contents": "UIView.areAnimationsEnabled(${1:})" },{ "trigger": "UIPrintInfoDuplex \t UIPrintInfoDuplex", "contents": "UIPrintInfoDuplex" },{ "trigger": "UIApplicationProtectedDataWillBecomeUnavailable \t String", "contents": "UIApplicationProtectedDataWillBecomeUnavailable" },{ "trigger": "OverrideInheritedDuration \t UIViewKeyframeAnimationOptions", "contents": "OverrideInheritedDuration" },{ "trigger": "scrollViewDidEndDragging \t func UIWebView -> void" , "contents": "scrollViewDidEndDragging(${1:UIScrollView}, willDecelerate:${2:BOOL})" },{ "trigger": "UIDeviceOrientationIsPortrait \t func UIDictationPhrase -> BOOL
" , "contents": "UIDeviceOrientationIsPortrait(${1:UIDeviceOrientation})" },{ "trigger": "supportsColor \t BOOL", "contents": "supportsColor" },{ "trigger": "textContainerForGlyphAtIndex \t func NSLayoutManager -> NSTextContainer?
" , "contents": "textContainerForGlyphAtIndex(${1:Int}, effectiveRange:${2:NSRangePointer}, withoutAdditionalLayout:${3:BOOL})" },{ "trigger": "insertText \t func unknown -> void" , "contents": "insertText(${1:String})" },{ "trigger": "UITableViewAutomaticDimension \t CGFloat", "contents": "UITableViewAutomaticDimension" },{ "trigger": "owningView \t UIView", "contents": "owningView" },{ "trigger": "presentFromBarButtonItem \t func UIPrinterPickerController -> BOOL
" , "contents": "presentFromBarButtonItem(${1:UIBarButtonItem}, animated:${2:BOOL}, completionHandler:${3:UIPrinterPickerCompletionHandler?})" },{ "trigger": "encodeWithCoder \t func NSTextContainer -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "startPage \t Int", "contents": "startPage" },{ "trigger": "minimum \t CGFloat", "contents": "minimum" },{ "trigger": "Document \t UIPrinterJobTypes", "contents": "Document" },{ "trigger": "BlackTranslucent \t UIStatusBarStyle", "contents": "BlackTranslucent" },{ "trigger": "focused \t BOOL", "contents": "focused" },{ "trigger": "splitViewController \t func unknown -> UIViewController?
" , "contents": "splitViewController(${1:UISplitViewController}, separateSecondaryViewControllerFromPrimaryViewController:${2:UIViewController})" },{ "trigger": "scrollViewWillBeginDecelerating \t func UIWebView -> void" , "contents": "scrollViewWillBeginDecelerating(${1:UIScrollView})" },{ "trigger": "characterRangeByExtendingPosition \t func UITextView -> UITextRange?
" , "contents": "characterRangeByExtendingPosition(${1:UITextPosition}, inDirection:${2:UITextLayoutDirection})" },{ "trigger": "NewsstandContentAvailability \t UIRemoteNotificationType", "contents": "NewsstandContentAvailability" },{ "trigger": "UITableViewCellStyle \t UITableViewCellStyle", "contents": "UITableViewCellStyle" },{ "trigger": "UIRectFrameUsingBlendMode \t func UIReferenceLibraryViewController -> void" , "contents": "UIRectFrameUsingBlendMode(${1:CGRect}, _:${2:CGBlendMode})" },{ "trigger": "copyWithZone \t func UITraitCollection -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "constraintLessThanOrEqualToAnchor \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintLessThanOrEqualToAnchor(${1:NSLayoutDimension!}, multiplier:${2:CGFloat})" },{ "trigger": "minimumValueImage \t UIImage", "contents": "minimumValueImage" },{ "trigger": "UIGraphicsGetImageFromCurrentImageContext \t func UIGravityBehavior -> UIImage!
" , "contents": "UIGraphicsGetImageFromCurrentImageContext(${1:})" },{ "trigger": "visibleViewController \t UIViewController", "contents": "visibleViewController" },{ "trigger": "printableRect \t CGRect", "contents": "printableRect" },{ "trigger": "NSObject.awakeFromNib \t class NSObject -> void" , "contents": "NSObject.awakeFromNib(${1:})" },{ "trigger": "UIVisualEffectView.supportsSecureCoding \t class UIVisualEffectView -> BOOL
" , "contents": "UIVisualEffectView.supportsSecureCoding(${1:})" },{ "trigger": "insertDictationResult \t func unknown -> void" , "contents": "insertDictationResult(${1:[UIDictationPhrase]})" },{ "trigger": "Reserved \t UIControlState", "contents": "Reserved" },{ "trigger": "coordinateSpace \t UICoordinateSpace", "contents": "coordinateSpace" },{ "trigger": "activityType \t String", "contents": "activityType" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, canEditRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIView.setAnimationDidStopSelector \t class UIView -> void" , "contents": "UIView.setAnimationDidStopSelector(${1:Selector})" },{ "trigger": "accessibilityLineNumberForPoint \t func unknown -> Int
" , "contents": "accessibilityLineNumberForPoint(${1:CGPoint})" },{ "trigger": "zooming \t BOOL", "contents": "zooming" },{ "trigger": "UIApplicationStatusBarFrameUserInfoKey \t String", "contents": "UIApplicationStatusBarFrameUserInfoKey" },{ "trigger": "UIPasteboardRemovedNotification \t String", "contents": "UIPasteboardRemovedNotification" },{ "trigger": "setNeedsDisplayInRect \t func UIView -> void" , "contents": "setNeedsDisplayInRect(${1:CGRect})" },{ "trigger": "applicationState \t UIApplicationState", "contents": "applicationState" },{ "trigger": "providePlaceholderAtURL \t func NSFileProviderExtension -> Void
" , "contents": "providePlaceholderAtURL(${1:NSURL}, completionHandler:${2:NSError? -> Void})" },{ "trigger": "characterIndexForPoint \t func NSLayoutManager -> Int
" , "contents": "characterIndexForPoint(${1:CGPoint}, inTextContainer:${2:NSTextContainer}, fractionOfDistanceBetweenInsertionPoints:${3:UnsafeMutablePointer<CGFloat>})" },{ "trigger": "removeAllBehaviors \t func UIDynamicAnimator -> void" , "contents": "removeAllBehaviors(${1:})" },{ "trigger": "setMinimumTrackImage \t func UISlider -> void" , "contents": "setMinimumTrackImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "UIApplicationLaunchOptionsNewsstandDownloadsKey \t String", "contents": "UIApplicationLaunchOptionsNewsstandDownloadsKey" },{ "trigger": "setBackgroundImage \t func UIStepper -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "setViewControllers \t func UIPageViewController -> Void?
" , "contents": "setViewControllers(${1:[UIViewController]?}, direction:${2:UIPageViewControllerNavigationDirection}, animated:${3:BOOL}, completion:${4:BOOL -> Void?})" },{ "trigger": "gestureRecognizer \t func unknown -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldReceivePress:${2:UIPress})" },{ "trigger": "initialFrameForViewController \t func unknown -> CGRect
" , "contents": "initialFrameForViewController(${1:UIViewController})" },{ "trigger": "UIGraphicsSetPDFContextURLForRect \t func UIGravityBehavior -> void" , "contents": "UIGraphicsSetPDFContextURLForRect(${1:NSURL}, _:${2:CGRect})" },{ "trigger": "baseWritingDirectionForPosition \t func UITextField -> UITextWritingDirection
" , "contents": "baseWritingDirectionForPosition(${1:UITextPosition}, inDirection:${2:UITextStorageDirection})" },{ "trigger": "UIColor.groupTableViewBackgroundColor \t class UIColor -> UIColor
" , "contents": "UIColor.groupTableViewBackgroundColor(${1:})" },{ "trigger": "encodeWithCoder \t func NSShadow -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "opaque \t BOOL", "contents": "opaque" },{ "trigger": "AlignAllCenterY \t NSLayoutFormatOptions", "contents": "AlignAllCenterY" },{ "trigger": "setRightBarButtonItems \t func UINavigationItem -> void" , "contents": "setRightBarButtonItems(${1:[UIBarButtonItem]?}, animated:${2:BOOL})" },{ "trigger": "NSObject.accessibilityElementIsFocused \t class NSObject -> BOOL
" , "contents": "NSObject.accessibilityElementIsFocused(${1:})" },{ "trigger": "positionFromPosition \t func unknown -> UITextPosition?
" , "contents": "positionFromPosition(${1:UITextPosition}, offset:${2:Int})" },{ "trigger": "OverrideInheritedOptions \t UIViewAnimationOptions", "contents": "OverrideInheritedOptions" },{ "trigger": "UIAccessibilityRequestGuidedAccessSession \t func UIAccessibilityScrollDirection -> Void
" , "contents": "UIAccessibilityRequestGuidedAccessSession(${1:BOOL}, _:${2:BOOL -> Void})" },{ "trigger": "delegate \t UIAccelerometerDelegate", "contents": "delegate" },{ "trigger": "indexPathBeforeUpdate \t NSIndexPath", "contents": "indexPathBeforeUpdate" },{ "trigger": "scrollViewDidEndScrollingAnimation \t func UIWebView -> void" , "contents": "scrollViewDidEndScrollingAnimation(${1:UIScrollView})" },{ "trigger": "stopProvidingItemAtURL \t func NSFileProviderExtension -> void" , "contents": "stopProvidingItemAtURL(${1:NSURL})" },{ "trigger": "moveItemAtIndexPath \t func UICollectionView -> void" , "contents": "moveItemAtIndexPath(${1:NSIndexPath}, toIndexPath:${2:NSIndexPath})" },{ "trigger": "backgroundImageForBarPosition \t func UISearchBar -> UIImage?
" , "contents": "backgroundImageForBarPosition(${1:UIBarPosition}, barMetrics:${2:UIBarMetrics})" },{ "trigger": "adjustsImageWhenAncestorFocused \t BOOL", "contents": "adjustsImageWhenAncestorFocused" },{ "trigger": "autorepeat \t BOOL", "contents": "autorepeat" },{ "trigger": "typeIdentifier \t String", "contents": "typeIdentifier" },{ "trigger": "PatternSolid \t NSUnderlineStyle", "contents": "PatternSolid" },{ "trigger": "changeInLength \t Int", "contents": "changeInLength" },{ "trigger": "documentInteractionController \t func unknown -> void" , "contents": "documentInteractionController(${1:UIDocumentInteractionController}, didEndSendingToApplication:${2:String?})" },{ "trigger": "reloadRowsAtIndexPaths \t func UITableView -> void" , "contents": "reloadRowsAtIndexPaths(${1:[NSIndexPath]}, withRowAnimation:${2:UITableViewRowAnimation})" },{ "trigger": "endFloatingCursor \t func UITextField -> void" , "contents": "endFloatingCursor(${1:})" },{ "trigger": "textStorage \t func unknown -> void" , "contents": "textStorage(${1:NSTextStorage}, willProcessEditing:${2:NSTextStorageEditActions}, range:${3:NSRange}, changeInLength:${4:Int})" },{ "trigger": "TraitLooseLeading \t UIFontDescriptorSymbolicTraits", "contents": "TraitLooseLeading" },{ "trigger": "CurveEaseIn \t UIViewAnimationOptions", "contents": "CurveEaseIn" },{ "trigger": "UIAccessibilityCustomAction \t UIAccessibilityCustomAction", "contents": "UIAccessibilityCustomAction" },{ "trigger": "Shift \t UIKeyModifierFlags", "contents": "Shift" },{ "trigger": "selectedRange \t NSRange", "contents": "selectedRange" },{ "trigger": "UIContentSizeCategoryLarge \t String", "contents": "UIContentSizeCategoryLarge" },{ "trigger": "focusStyle \t UITableViewCellFocusStyle", "contents": "focusStyle" },{ "trigger": "closestPositionToPoint \t func unknown -> UITextPosition?
" , "contents": "closestPositionToPoint(${1:CGPoint}, withinRange:${2:UITextRange})" },{ "trigger": "delaysTouchesEnded \t BOOL", "contents": "delaysTouchesEnded" },{ "trigger": "UIFontWeightHeavy \t CGFloat", "contents": "UIFontWeightHeavy" },{ "trigger": "UIControlContentHorizontalAlignment \t UIControlContentHorizontalAlignment", "contents": "UIControlContentHorizontalAlignment" },{ "trigger": "tableView \t func UITableViewController -> CGFloat
" , "contents": "tableView(${1:UITableView}, estimatedHeightForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "scrollViewDidScroll \t func UIWebView -> void" , "contents": "scrollViewDidScroll(${1:UIScrollView})" },{ "trigger": "thumbImageForState \t func UISlider -> UIImage?
" , "contents": "thumbImageForState(${1:UIControlState})" },{ "trigger": "UITouchPhase \t UITouchPhase", "contents": "UITouchPhase" },{ "trigger": "insertText \t func UITextView -> void" , "contents": "insertText(${1:String})" },{ "trigger": "currentBackgroundImage \t UIImage", "contents": "currentBackgroundImage" },{ "trigger": "lineSpacing \t CGFloat", "contents": "lineSpacing" },{ "trigger": "region \t UIRegion", "contents": "region" },{ "trigger": "cellLayoutMarginsFollowReadableWidth \t BOOL", "contents": "cellLayoutMarginsFollowReadableWidth" },{ "trigger": "altitudeAngle \t CGFloat", "contents": "altitudeAngle" },{ "trigger": "UITraitCollection.traitCollectionWithHorizontalSizeClass \t class UITraitCollection -> UITraitCollection
" , "contents": "UITraitCollection.traitCollectionWithHorizontalSizeClass(${1:UIUserInterfaceSizeClass})" },{ "trigger": "CGRectValue \t func NSValue -> CGRect
" , "contents": "CGRectValue(${1:})" },{ "trigger": "unknown.contentViewInsets \t static unknown -> UIEdgeInsets
" , "contents": "unknown.contentViewInsets(${1:})" },{ "trigger": "motionEnded \t func UIResponder -> void" , "contents": "motionEnded(${1:UIEventSubtype}, withEvent:${2:UIEvent?})" },{ "trigger": "NSRTFDTextDocumentType \t String", "contents": "NSRTFDTextDocumentType" },{ "trigger": "setScopeBarButtonTitleTextAttributes \t func UISearchBar -> void" , "contents": "setScopeBarButtonTitleTextAttributes(${1:[String }, forState:${2:UIControlState})" },{ "trigger": "UIControlEvents \t UIControlEvents", "contents": "UIControlEvents" },{ "trigger": "UIImagePickerControllerMediaType \t String", "contents": "UIImagePickerControllerMediaType" },{ "trigger": "length \t CGFloat", "contents": "length" },{ "trigger": "regionTriggersOnce \t BOOL", "contents": "regionTriggersOnce" },{ "trigger": "currentAttributedTitle \t NSAttributedString", "contents": "currentAttributedTitle" },{ "trigger": "documentInteractionControllerWillPresentOptionsMenu \t func unknown -> void" , "contents": "documentInteractionControllerWillPresentOptionsMenu(${1:UIDocumentInteractionController})" },{ "trigger": "restoreUserActivityState \t func UIDocument -> void" , "contents": "restoreUserActivityState(${1:NSUserActivity})" },{ "trigger": "NSObject.accessibilityNavigationStyle \t class NSObject -> UIAccessibilityNavigationStyle
" , "contents": "NSObject.accessibilityNavigationStyle(${1:})" },{ "trigger": "dequeueReusableCellWithIdentifier \t func UITableView -> UITableViewCell?
" , "contents": "dequeueReusableCellWithIdentifier(${1:String})" },{ "trigger": "rawValue \t UInt", "contents": "rawValue" },{ "trigger": "UIFieldBehavior.electricField \t class UIFieldBehavior -> Self
" , "contents": "UIFieldBehavior.electricField(${1:})" },{ "trigger": "openWithCompletionHandler \t func UIDocument -> Void?
" , "contents": "openWithCompletionHandler(${1:BOOL -> Void?})" },{ "trigger": "delegate \t UIPopoverControllerDelegate", "contents": "delegate" },{ "trigger": "resizableImageWithCapInsets \t func UIImage -> UIImage
" , "contents": "resizableImageWithCapInsets(${1:UIEdgeInsets}, resizingMode:${2:UIImageResizingMode})" },{ "trigger": "setThumbImage \t func UISlider -> void" , "contents": "setThumbImage(${1:UIImage?}, forState:${2:UIControlState})" },{ "trigger": "accessibilityScroll \t func NSObject -> BOOL
" , "contents": "accessibilityScroll(${1:UIAccessibilityScrollDirection})" },{ "trigger": "minimumZoomScale \t CGFloat", "contents": "minimumZoomScale" },{ "trigger": "gestureRecognizer \t func unknown -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldReceiveTouch:${2:UITouch})" },{ "trigger": "completionSpeed \t func unknown -> CGFloat
" , "contents": "completionSpeed(${1:})" },{ "trigger": "UIDeviceBatteryState \t UIDeviceBatteryState", "contents": "UIDeviceBatteryState" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, canMoveRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "showsHorizontalScrollIndicator \t BOOL", "contents": "showsHorizontalScrollIndicator" },{ "trigger": "minimumRadius \t CGFloat", "contents": "minimumRadius" },{ "trigger": "drawBackgroundForGlyphRange \t func NSLayoutManager -> void" , "contents": "drawBackgroundForGlyphRange(${1:NSRange}, atPoint:${2:CGPoint})" },{ "trigger": "OverrideInheritedCurve \t UIViewAnimationOptions", "contents": "OverrideInheritedCurve" },{ "trigger": "UIPrintErrorDomain \t String", "contents": "UIPrintErrorDomain" },{ "trigger": "documentInteractionControllerDidEndPreview \t func unknown -> void" , "contents": "documentInteractionControllerDidEndPreview(${1:UIDocumentInteractionController})" },{ "trigger": "UIBezierPath.bezierPathWithCGPath \t class UIBezierPath -> Self
" , "contents": "UIBezierPath.bezierPathWithCGPath(${1:CGPath})" },{ "trigger": "removeTarget \t func UIGestureRecognizer -> void" , "contents": "removeTarget(${1:AnyObject?}, action:${2:Selector})" },{ "trigger": "activityTitle \t func UIActivity -> String?
" , "contents": "activityTitle(${1:})" },{ "trigger": "Right \t UICollectionViewScrollPosition", "contents": "Right" },{ "trigger": "start \t UITextPosition", "contents": "start" },{ "trigger": "UITableViewSelectionDidChangeNotification \t String", "contents": "UITableViewSelectionDidChangeNotification" },{ "trigger": "showCGGlyphs \t func NSLayoutManager -> void" , "contents": "showCGGlyphs(${1:UnsafePointer<CGGlyph>}, positions:${2:UnsafePointer<CGPoint>}, count:${3:Int}, font:${4:UIFont}, matrix:${5:CGAffineTransform}, attributes:${6:[String }, inContext:${7:CGContext})" },{ "trigger": "delegate \t AnyObject", "contents": "delegate" },{ "trigger": "scrollViewDidEndZooming \t func UICollectionViewController -> void" , "contents": "scrollViewDidEndZooming(${1:UIScrollView}, withView:${2:UIView?}, atScale:${3:CGFloat})" },{ "trigger": "Control \t UIKeyModifierFlags", "contents": "Control" },{ "trigger": "minimumTrackTintColor \t UIColor", "contents": "minimumTrackTintColor" },{ "trigger": "UIApplicationLaunchOptionsLocalNotificationKey \t String", "contents": "UIApplicationLaunchOptionsLocalNotificationKey" },{ "trigger": "UIPageViewControllerNavigationOrientation \t UIPageViewControllerNavigationOrientation", "contents": "UIPageViewControllerNavigationOrientation" },{ "trigger": "accessibilityHint \t String", "contents": "accessibilityHint" },{ "trigger": "UIPopoverController \t UIPopoverController", "contents": "UIPopoverController" },{ "trigger": "minimumPrimaryColumnWidth \t CGFloat", "contents": "minimumPrimaryColumnWidth" },{ "trigger": "NSLayoutManager \t NSLayoutManager", "contents": "NSLayoutManager" },{ "trigger": "NSStringFromCGRect \t func NSTextAlignment -> String
" , "contents": "NSStringFromCGRect(${1:CGRect})" },{ "trigger": "UIRectFillUsingBlendMode \t func UIReferenceLibraryViewController -> void" , "contents": "UIRectFillUsingBlendMode(${1:CGRect}, _:${2:CGBlendMode})" },{ "trigger": "barPosition \t UIBarPosition", "contents": "barPosition" },{ "trigger": "disablesAutomaticKeyboardDismissal \t func UIViewController -> BOOL
" , "contents": "disablesAutomaticKeyboardDismissal(${1:})" },{ "trigger": "UILayoutFittingCompressedSize \t CGSize", "contents": "UILayoutFittingCompressedSize" },{ "trigger": "searchBar \t func unknown -> void" , "contents": "searchBar(${1:UISearchBar}, selectedScopeButtonIndexDidChange:${2:Int})" },{ "trigger": "fileWrapperFromRange \t func NSAttributedString -> NSFileWrapper
" , "contents": "fileWrapperFromRange(${1:NSRange}, documentAttributes:${2:[String })" },{ "trigger": "application \t func unknown -> Void
" , "contents": "application(${1:UIApplication}, didReceiveRemoteNotification:${2:[NSObject }, fetchCompletionHandler:${3:UIBackgroundFetchResult -> Void})" },{ "trigger": "shouldUpdateFocusInContext \t func UIViewController -> BOOL
" , "contents": "shouldUpdateFocusInContext(${1:UIFocusUpdateContext})" },{ "trigger": "adaptivePresentationStyle \t func UIPresentationController -> UIModalPresentationStyle
" , "contents": "adaptivePresentationStyle(${1:})" },{ "trigger": "collectionView \t func UICollectionViewController -> BOOL
" , "contents": "collectionView(${1:UICollectionView}, canMoveItemAtIndexPath:${2:NSIndexPath})" },{ "trigger": "frameForDictationResultPlaceholder \t func UITextView -> CGRect
" , "contents": "frameForDictationResultPlaceholder(${1:AnyObject})" },{ "trigger": "separatorColor \t UIColor", "contents": "separatorColor" },{ "trigger": "UITextInputTextFontKey \t String", "contents": "UITextInputTextFontKey" },{ "trigger": "endInteractiveMovement \t func UICollectionView -> void" , "contents": "endInteractiveMovement(${1:})" },{ "trigger": "UIPrintInfo.printInfoWithDictionary \t class UIPrintInfo -> UIPrintInfo
" , "contents": "UIPrintInfo.printInfoWithDictionary(${1:[NSObject })" },{ "trigger": "allowableMovement \t CGFloat", "contents": "allowableMovement" },{ "trigger": "delegate \t UITableViewDelegate", "contents": "delegate" },{ "trigger": "TouchDownRepeat \t UIControlEvents", "contents": "TouchDownRepeat" },{ "trigger": "didDismissSearchController \t func unknown -> void" , "contents": "didDismissSearchController(${1:UISearchController})" },{ "trigger": "gestureRecognizerShouldBegin \t func UIView -> BOOL
" , "contents": "gestureRecognizerShouldBegin(${1:UIGestureRecognizer})" },{ "trigger": "selectionAffinity \t UITextStorageDirection", "contents": "selectionAffinity" },{ "trigger": "encodeWithCoder \t func UIColor -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "allowsEditingTextAttributes \t BOOL", "contents": "allowsEditingTextAttributes" },{ "trigger": "landscapeImagePhone \t UIImage", "contents": "landscapeImagePhone" },{ "trigger": "NSLigatureAttributeName \t String", "contents": "NSLigatureAttributeName" },{ "trigger": "UIPopoverArrowDirection \t UIPopoverArrowDirection", "contents": "UIPopoverArrowDirection" },{ "trigger": "actionSheet \t func UIDocumentInteractionController -> void" , "contents": "actionSheet(${1:UIActionSheet}, clickedButtonAtIndex:${2:Int})" },{ "trigger": "clearsContextBeforeDrawing \t BOOL", "contents": "clearsContextBeforeDrawing" },{ "trigger": "brightness \t CGFloat", "contents": "brightness" },{ "trigger": "dividerImageForLeftSegmentState \t func UISegmentedControl -> UIImage?
" , "contents": "dividerImageForLeftSegmentState(${1:UIControlState}, rightSegmentState:${2:UIControlState}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "resistance \t CGFloat", "contents": "resistance" },{ "trigger": "alwaysBounceHorizontal \t BOOL", "contents": "alwaysBounceHorizontal" },{ "trigger": "fillBackgroundRectArray \t func NSLayoutManager -> void" , "contents": "fillBackgroundRectArray(${1:UnsafePointer<CGRect>}, count:${2:Int}, forCharacterRange:${3:NSRange}, color:${4:UIColor})" },{ "trigger": "UITableViewStyle \t UITableViewStyle", "contents": "UITableViewStyle" },{ "trigger": "UIFont.fontNamesForFamilyName \t class UIFont -> [String]
" , "contents": "UIFont.fontNamesForFamilyName(${1:String})" },{ "trigger": "glyphRangeForBoundingRectWithoutAdditionalLayout \t func NSLayoutManager -> NSRange
" , "contents": "glyphRangeForBoundingRectWithoutAdditionalLayout(${1:CGRect}, inTextContainer:${2:NSTextContainer})" },{ "trigger": "registerNib \t func UITableView -> void" , "contents": "registerNib(${1:UINib?}, forCellReuseIdentifier:${2:String})" },{ "trigger": "textWillChange \t func UIInputViewController -> void" , "contents": "textWillChange(${1:UITextInput?})" },{ "trigger": "setTitle \t func UISegmentedControl -> void" , "contents": "setTitle(${1:String?}, forSegmentAtIndex:${2:Int})" },{ "trigger": "message \t String", "contents": "message" },{ "trigger": "maximumPrimaryColumnWidth \t CGFloat", "contents": "maximumPrimaryColumnWidth" },{ "trigger": "collectionView \t func UICollectionViewController -> Int
" , "contents": "collectionView(${1:UICollectionView}, numberOfItemsInSection:${2:Int})" },{ "trigger": "invalidateLayoutWithContext \t func UICollectionViewLayout -> void" , "contents": "invalidateLayoutWithContext(${1:UICollectionViewLayoutInvalidationContext})" },{ "trigger": "repeatCalendar \t NSCalendar", "contents": "repeatCalendar" },{ "trigger": "UIPrintInfoOutputType \t UIPrintInfoOutputType", "contents": "UIPrintInfoOutputType" },{ "trigger": "titleShadowOffset \t CGSize", "contents": "titleShadowOffset" },{ "trigger": "performBatchUpdates \t func UICollectionView -> Void?," , "contents": "performBatchUpdates(${1: -> Void?}, completion:${2:BOOL -> Void?})" },{ "trigger": "setNewsstandIconImage \t func UIApplication -> void" , "contents": "setNewsstandIconImage(${1:UIImage?})" },{ "trigger": "itemsInRect \t func UIDynamicAnimator -> [UIDynamicItem]
" , "contents": "itemsInRect(${1:CGRect})" },{ "trigger": "UIPrintInfo.printInfo \t class UIPrintInfo -> UIPrintInfo
" , "contents": "UIPrintInfo.printInfo(${1:})" },{ "trigger": "focusHeading \t UIFocusHeading", "contents": "focusHeading" },{ "trigger": "UITouchType \t UITouchType", "contents": "UITouchType" },{ "trigger": "accessibilityActivationPoint \t CGPoint", "contents": "accessibilityActivationPoint" },{ "trigger": "paperRect \t CGRect", "contents": "paperRect" },{ "trigger": "presentAnimated \t func UIPrintInteractionController -> BOOL
" , "contents": "presentAnimated(${1:BOOL}, completionHandler:${2:UIPrintInteractionCompletionHandler?})" },{ "trigger": "view \t UIView", "contents": "view" },{ "trigger": "Sound \t UIUserNotificationType", "contents": "Sound" },{ "trigger": "disabledBackground \t UIImage", "contents": "disabledBackground" },{ "trigger": "UITextViewTextDidChangeNotification \t String", "contents": "UITextViewTextDidChangeNotification" },{ "trigger": "stopAnimating \t func UIActivityIndicatorView -> void" , "contents": "stopAnimating(${1:})" },{ "trigger": "scrollViewDidEndScrollingAnimation \t func UITableViewController -> void" , "contents": "scrollViewDidEndScrollingAnimation(${1:UIScrollView})" },{ "trigger": "printFormattersForPageAtIndex \t func UIPrintPageRenderer -> [UIPrintFormatter]?
" , "contents": "printFormattersForPageAtIndex(${1:Int})" },{ "trigger": "finalLayoutAttributesForDisappearingSupplementaryElementOfKind \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "finalLayoutAttributesForDisappearingSupplementaryElementOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "paragraphSpacing \t CGFloat", "contents": "paragraphSpacing" },{ "trigger": "displayingRepresentativeItem \t BOOL", "contents": "displayingRepresentativeItem" },{ "trigger": "animationRepeatCount \t Int", "contents": "animationRepeatCount" },{ "trigger": "updateAction \t UICollectionUpdateAction", "contents": "updateAction" },{ "trigger": "preferredContentSizeDidChangeForChildContentContainer \t func UIViewController -> void" , "contents": "preferredContentSizeDidChangeForChildContentContainer(${1:UIContentContainer})" },{ "trigger": "UIContentSizeCategoryAccessibilityExtraExtraExtraLarge \t String", "contents": "UIContentSizeCategoryAccessibilityExtraExtraExtraLarge" },{ "trigger": "UIMenuItem \t UIMenuItem", "contents": "UIMenuItem" },{ "trigger": "sectionFootersPinToVisibleBounds \t BOOL", "contents": "sectionFootersPinToVisibleBounds" },{ "trigger": "UIFloatRangeInfinite \t UIFloatRange", "contents": "UIFloatRangeInfinite" },{ "trigger": "dynamicAnimator \t UIDynamicAnimator", "contents": "dynamicAnimator" },{ "trigger": "UIColor.colorWithRed \t class UIColor -> UIColor
" , "contents": "UIColor.colorWithRed(${1:CGFloat}, green:${2:CGFloat}, blue:${3:CGFloat}, alpha:${4:CGFloat})" },{ "trigger": "UIContentSizeCategoryAccessibilityLarge \t String", "contents": "UIContentSizeCategoryAccessibilityLarge" },{ "trigger": "dataDetectorTypes \t UIDataDetectorTypes", "contents": "dataDetectorTypes" },{ "trigger": "DirectionRightToLeft \t NSLayoutFormatOptions", "contents": "DirectionRightToLeft" },{ "trigger": "deleteBackward \t func unknown -> void" , "contents": "deleteBackward(${1:})" },{ "trigger": "UIVisualEffect.supportsSecureCoding \t class UIVisualEffect -> BOOL
" , "contents": "UIVisualEffect.supportsSecureCoding(${1:})" },{ "trigger": "originalURL \t NSURL", "contents": "originalURL" },{ "trigger": "headerHeight \t CGFloat", "contents": "headerHeight" },{ "trigger": "containsPoint \t func UIBezierPath -> BOOL
" , "contents": "containsPoint(${1:CGPoint})" },{ "trigger": "copyWithZone \t func UIApplicationShortcutItem -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "dismissGrantingAccessToURL \t func UIDocumentPickerExtensionViewController -> void" , "contents": "dismissGrantingAccessToURL(${1:NSURL?})" },{ "trigger": "moveRowAtIndexPath \t func UITableView -> void" , "contents": "moveRowAtIndexPath(${1:NSIndexPath}, toIndexPath:${2:NSIndexPath})" },{ "trigger": "UIFontDescriptorNameAttribute \t String", "contents": "UIFontDescriptorNameAttribute" },{ "trigger": "showsReorderControl \t BOOL", "contents": "showsReorderControl" },{ "trigger": "removeKeyCommand \t func UIViewController -> void" , "contents": "removeKeyCommand(${1:UIKeyCommand})" },{ "trigger": "NSLayoutXAxisAnchor \t NSLayoutXAxisAnchor", "contents": "NSLayoutXAxisAnchor" },{ "trigger": "adaptivePresentationStyleForPresentationController \t func unknown -> UIModalPresentationStyle
" , "contents": "adaptivePresentationStyleForPresentationController(${1:UIPresentationController})" },{ "trigger": "startInteractiveTransition \t func unknown -> void" , "contents": "startInteractiveTransition(${1:UIViewControllerContextTransitioning})" },{ "trigger": "removeChildBehavior \t func UIDynamicBehavior -> void" , "contents": "removeChildBehavior(${1:UIDynamicBehavior})" },{ "trigger": "sendAction \t func UIApplication -> BOOL
" , "contents": "sendAction(${1:Selector}, to:${2:AnyObject?}, from:${3:AnyObject?}, forEvent:${4:UIEvent?})" },{ "trigger": "mediaPlaybackRequiresUserAction \t BOOL", "contents": "mediaPlaybackRequiresUserAction" },{ "trigger": "addLayoutGuide \t func UIView -> void" , "contents": "addLayoutGuide(${1:UILayoutGuide})" },{ "trigger": "setStroke \t func UIColor -> void" , "contents": "setStroke(${1:})" },{ "trigger": "UIFocusUpdateContext \t UIFocusUpdateContext", "contents": "UIFocusUpdateContext" },{ "trigger": "UIKeyboardWillHideNotification \t String", "contents": "UIKeyboardWillHideNotification" },{ "trigger": "ClassScripts \t UIFontDescriptorSymbolicTraits", "contents": "ClassScripts" },{ "trigger": "types \t UIUserNotificationType", "contents": "types" },{ "trigger": "stopVideoCapture \t func UIImagePickerController -> void" , "contents": "stopVideoCapture(${1:})" },{ "trigger": "rectForHeaderInSection \t func UITableView -> CGRect
" , "contents": "rectForHeaderInSection(${1:Int})" },{ "trigger": "UIImagePickerControllerCameraFlashMode \t UIImagePickerControllerCameraFlashMode", "contents": "UIImagePickerControllerCameraFlashMode" },{ "trigger": "proximityMonitoringEnabled \t BOOL", "contents": "proximityMonitoringEnabled" },{ "trigger": "tableView \t func UITableViewController -> void" , "contents": "tableView(${1:UITableView}, willBeginEditingRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "popoverController \t UIPopoverController", "contents": "popoverController" },{ "trigger": "application \t func unknown -> void" , "contents": "application(${1:UIApplication}, didRegisterForRemoteNotificationsWithDeviceToken:${2:NSData})" },{ "trigger": "applyLayoutAttributes \t func UICollectionReusableView -> void" , "contents": "applyLayoutAttributes(${1:UICollectionViewLayoutAttributes})" },{ "trigger": "UIFontSlantTrait \t String", "contents": "UIFontSlantTrait" },{ "trigger": "UITableViewIndexSearch \t String", "contents": "UITableViewIndexSearch" },{ "trigger": "moreNavigationController \t UINavigationController", "contents": "moreNavigationController" },{ "trigger": "background \t UIImage", "contents": "background" },{ "trigger": "beginFloatingCursorAtPoint \t func unknown -> void" , "contents": "beginFloatingCursorAtPoint(${1:CGPoint})" },{ "trigger": "setNeedsFocusUpdate \t func UIView -> void" , "contents": "setNeedsFocusUpdate(${1:})" },{ "trigger": "encodeCGPoint \t func NSCoder -> void" , "contents": "encodeCGPoint(${1:CGPoint}, forKey:${2:String})" },{ "trigger": "UIAccessibilitySpeechAttributeLanguage \t String", "contents": "UIAccessibilitySpeechAttributeLanguage" },{ "trigger": "encodeCGRect \t func NSCoder -> void" , "contents": "encodeCGRect(${1:CGRect}, forKey:${2:String})" },{ "trigger": "UIResponder.clearTextInputContextIdentifier \t class UIResponder -> void" , "contents": "UIResponder.clearTextInputContextIdentifier(${1:String})" },{ "trigger": "tabBar \t func unknown -> void" , "contents": "tabBar(${1:UITabBar}, didEndCustomizingItems:${2:[UITabBarItem]}, changed:${3:BOOL})" },{ "trigger": "removeBehavior \t func UIDynamicAnimator -> void" , "contents": "removeBehavior(${1:UIDynamicBehavior})" },{ "trigger": "NSObject.setAccessibilityHeaderElements \t class NSObject -> void" , "contents": "NSObject.setAccessibilityHeaderElements(${1:[AnyObject]?})" },{ "trigger": "positionForBar \t func unknown -> UIBarPosition
" , "contents": "positionForBar(${1:UIBarPositioning})" },{ "trigger": "UIView.setAnimationsEnabled \t class UIView -> void" , "contents": "UIView.setAnimationsEnabled(${1:BOOL})" },{ "trigger": "completionVelocity \t func unknown -> CGFloat
" , "contents": "completionVelocity(${1:})" },{ "trigger": "boundaryWithIdentifier \t func UICollisionBehavior -> UIBezierPath?
" , "contents": "boundaryWithIdentifier(${1:NSCopying})" },{ "trigger": "copyWithZone \t func NSDataAsset -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "UIApplicationDidReceiveMemoryWarningNotification \t String", "contents": "UIApplicationDidReceiveMemoryWarningNotification" },{ "trigger": "UIViewControllerHierarchyInconsistencyException \t String", "contents": "UIViewControllerHierarchyInconsistencyException" },{ "trigger": "UISwitch \t UISwitch", "contents": "UISwitch" },{ "trigger": "persistentIdentifierForItemAtURL \t func NSFileProviderExtension -> String?
" , "contents": "persistentIdentifierForItemAtURL(${1:NSURL})" },{ "trigger": "notShownAttributeForGlyphAtIndex \t func NSLayoutManager -> BOOL
" , "contents": "notShownAttributeForGlyphAtIndex(${1:Int})" },{ "trigger": "setBackButtonBackgroundVerticalPositionAdjustment \t func UIBarButtonItem -> void" , "contents": "setBackButtonBackgroundVerticalPositionAdjustment(${1:CGFloat}, forBarMetrics:${2:UIBarMetrics})" },{ "trigger": "UIKeyCommand.supportsSecureCoding \t class UIKeyCommand -> BOOL
" , "contents": "UIKeyCommand.supportsSecureCoding(${1:})" },{ "trigger": "transitionWasCancelled \t func unknown -> BOOL
" , "contents": "transitionWasCancelled(${1:})" },{ "trigger": "splitViewController \t UISplitViewController", "contents": "splitViewController" },{ "trigger": "UIAccessibilityNotificationSwitchControlIdentifier \t String", "contents": "UIAccessibilityNotificationSwitchControlIdentifier" },{ "trigger": "pageLength \t CGFloat", "contents": "pageLength" },{ "trigger": "actionSheet \t func unknown -> void" , "contents": "actionSheet(${1:UIActionSheet}, willDismissWithButtonIndex:${2:Int})" },{ "trigger": "numberOfSections \t func UICollectionView -> Int
" , "contents": "numberOfSections(${1:})" },{ "trigger": "addButtonWithTitle \t func UIActionSheet -> Int
" , "contents": "addButtonWithTitle(${1:String?})" },{ "trigger": "UIPopoverBackgroundView.wantsDefaultContentAppearance \t class UIPopoverBackgroundView -> BOOL
" , "contents": "UIPopoverBackgroundView.wantsDefaultContentAppearance(${1:})" },{ "trigger": "ignoreWord \t func UITextChecker -> void" , "contents": "ignoreWord(${1:String})" },{ "trigger": "encodeWithCoder \t func UITraitCollection -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "UIAccelerometer \t UIAccelerometer", "contents": "UIAccelerometer" },{ "trigger": "UIControlState \t UIControlState", "contents": "UIControlState" },{ "trigger": "currentMode \t UIScreenMode", "contents": "currentMode" },{ "trigger": "invalidateFlowLayoutDelegateMetrics \t BOOL", "contents": "invalidateFlowLayoutDelegateMetrics" },{ "trigger": "UIAccessibilityIsGuidedAccessEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsGuidedAccessEnabled(${1:})" },{ "trigger": "lineCapStyle \t CGLineCap", "contents": "lineCapStyle" },{ "trigger": "persistentStoreTypeForFileType \t func UIManagedDocument -> String
" , "contents": "persistentStoreTypeForFileType(${1:String})" },{ "trigger": "didPresentSearchController \t func unknown -> void" , "contents": "didPresentSearchController(${1:UISearchController})" },{ "trigger": "presentViewController \t func UIViewController -> Void?
" , "contents": "presentViewController(${1:UIViewController}, animated:${2:BOOL}, completion:${3: -> Void?})" },{ "trigger": "inputAccessoryView \t UIView", "contents": "inputAccessoryView" },{ "trigger": "tableView \t func unknown -> UITableViewCellEditingStyle
" , "contents": "tableView(${1:UITableView}, editingStyleForRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "UIBarItem.appearanceForTraitCollection \t class UIBarItem -> Self
" , "contents": "UIBarItem.appearanceForTraitCollection(${1:UITraitCollection})" },{ "trigger": "intrinsicContentSize \t func UIView -> CGSize
" , "contents": "intrinsicContentSize(${1:})" },{ "trigger": "backgroundImageForState \t func UISegmentedControl -> UIImage?
" , "contents": "backgroundImageForState(${1:UIControlState}, barMetrics:${2:UIBarMetrics})" },{ "trigger": "rect \t CGRect", "contents": "rect" },{ "trigger": "setTitleShadowColor \t func UIButton -> void" , "contents": "setTitleShadowColor(${1:UIColor?}, forState:${2:UIControlState})" },{ "trigger": "UIContentSizeCategorySmall \t String", "contents": "UIContentSizeCategorySmall" },{ "trigger": "UIImagePickerControllerEditedImage \t String", "contents": "UIImagePickerControllerEditedImage" },{ "trigger": "numberOfSectionsInTableView \t func unknown -> Int
" , "contents": "numberOfSectionsInTableView(${1:UITableView})" },{ "trigger": "UIPopoverBackgroundView.arrowBase \t class UIPopoverBackgroundView -> CGFloat
" , "contents": "UIPopoverBackgroundView.arrowBase(${1:})" },{ "trigger": "NSControlCharacterContainerBreakAction \t Int", "contents": "NSControlCharacterContainerBreakAction" },{ "trigger": "collectionView \t func unknown -> CGFloat
" , "contents": "collectionView(${1:UICollectionView}, layout:${2:UICollectionViewLayout}, minimumLineSpacingForSectionAtIndex:${3:Int})" },{ "trigger": "UITextSelectionRect \t UITextSelectionRect", "contents": "UITextSelectionRect" },{ "trigger": "UIView.performWithoutAnimation \t class UIView -> Void
" , "contents": "UIView.performWithoutAnimation(${1: -> Void})" },{ "trigger": "tableView \t func UITableViewController -> String?
" , "contents": "tableView(${1:UITableView}, titleForFooterInSection:${2:Int})" },{ "trigger": "estimationUpdateIndex \t NSNumber", "contents": "estimationUpdateIndex" },{ "trigger": "transitioningDelegate \t UIViewControllerTransitioningDelegate", "contents": "transitioningDelegate" },{ "trigger": "backgroundColor \t UIColor", "contents": "backgroundColor" },{ "trigger": "didUpdateFocusInContext \t func UIViewController -> void" , "contents": "didUpdateFocusInContext(${1:UIFocusUpdateContext}, withAnimationCoordinator:${2:UIFocusAnimationCoordinator})" },{ "trigger": "NSObject.accessibilityScroll \t class NSObject -> BOOL
" , "contents": "NSObject.accessibilityScroll(${1:UIAccessibilityScrollDirection})" },{ "trigger": "UIDocument \t UIDocument", "contents": "UIDocument" },{ "trigger": "UIResponder \t UIResponder", "contents": "UIResponder" },{ "trigger": "scopeBarButtonTitleTextAttributesForState \t func UISearchBar -> [String" , "contents": "scopeBarButtonTitleTextAttributesForState(${1:UIControlState})" },{ "trigger": "Selected \t UIControlState", "contents": "Selected" },{ "trigger": "image \t UIImage", "contents": "image" },{ "trigger": "applicationFinishedRestoringState \t func unknown -> void" , "contents": "applicationFinishedRestoringState(${1:})" },{ "trigger": "barButtonItem \t UIBarButtonItem", "contents": "barButtonItem" },{ "trigger": "angularVelocityForItem \t func UIDynamicItemBehavior -> CGFloat
" , "contents": "angularVelocityForItem(${1:UIDynamicItem})" },{ "trigger": "UIPasteboard.pasteboardWithUniqueName \t class UIPasteboard -> UIPasteboard
" , "contents": "UIPasteboard.pasteboardWithUniqueName(${1:})" },{ "trigger": "backgroundImageForState \t func UIBarButtonItem -> UIImage?
" , "contents": "backgroundImageForState(${1:UIControlState}, barMetrics:${2:UIBarMetrics})" },{ "trigger": "imageWithAlignmentRectInsets \t func UIImage -> UIImage
" , "contents": "imageWithAlignmentRectInsets(${1:UIEdgeInsets})" },{ "trigger": "constraintGreaterThanOrEqualToAnchor \t func NSLayoutDimension -> NSLayoutConstraint!
" , "contents": "constraintGreaterThanOrEqualToAnchor(${1:NSLayoutDimension!}, multiplier:${2:CGFloat}, constant:${3:CGFloat})" },{ "trigger": "automaticallyAdjustsScrollViewInsets \t BOOL", "contents": "automaticallyAdjustsScrollViewInsets" },{ "trigger": "borderStyle \t UITextBorderStyle", "contents": "borderStyle" },{ "trigger": "AlignAllLeft \t NSLayoutFormatOptions", "contents": "AlignAllLeft" },{ "trigger": "UITextAutocorrectionType \t UITextAutocorrectionType", "contents": "UITextAutocorrectionType" },{ "trigger": "shouldRemovePresentersView \t func UIPresentationController -> BOOL
" , "contents": "shouldRemovePresentersView(${1:})" },{ "trigger": "UISearchBarStyle \t UISearchBarStyle", "contents": "UISearchBarStyle" },{ "trigger": "UIAccessibilityGrayscaleStatusDidChangeNotification \t String", "contents": "UIAccessibilityGrayscaleStatusDidChangeNotification" },{ "trigger": "UIAttachmentBehavior.limitAttachmentWithItem \t class UIAttachmentBehavior -> Self
" , "contents": "UIAttachmentBehavior.limitAttachmentWithItem(${1:UIDynamicItem}, offsetFromCenter:${2:UIOffset}, attachedToItem:${3:UIDynamicItem}, offsetFromCenter:${4:UIOffset})" },{ "trigger": "NSObject.accessibilityElementDidBecomeFocused \t class NSObject -> void" , "contents": "NSObject.accessibilityElementDidBecomeFocused(${1:})" },{ "trigger": "allowsDefaultTighteningForTruncation \t BOOL", "contents": "allowsDefaultTighteningForTruncation" },{ "trigger": "TraitItalic \t UIFontDescriptorSymbolicTraits", "contents": "TraitItalic" },{ "trigger": "centerXAnchor \t NSLayoutXAxisAnchor", "contents": "centerXAnchor" },{ "trigger": "searchBarSearchButtonClicked \t func unknown -> void" , "contents": "searchBarSearchButtonClicked(${1:UISearchBar})" },{ "trigger": "CIImage \t CIImage", "contents": "CIImage" },{ "trigger": "addTextContainer \t func NSLayoutManager -> void" , "contents": "addTextContainer(${1:NSTextContainer})" },{ "trigger": "application \t func unknown -> BOOL
" , "contents": "application(${1:UIApplication}, openURL:${2:NSURL}, options:${3:[String })" },{ "trigger": "UIColor \t UIColor", "contents": "UIColor" },{ "trigger": "tableView \t func UITableViewController -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldIndentWhileEditingRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "loadRequest \t func UIWebView -> void" , "contents": "loadRequest(${1:NSURLRequest})" },{ "trigger": "updateUserActivityState \t func UIDocument -> void" , "contents": "updateUserActivityState(${1:NSUserActivity})" },{ "trigger": "decreaseSize \t func NSObject -> void" , "contents": "decreaseSize(${1:AnyObject?})" },{ "trigger": "UIUserInterfaceIdiom \t UIUserInterfaceIdiom", "contents": "UIUserInterfaceIdiom" },{ "trigger": "removeTarget \t func UIControl -> void" , "contents": "removeTarget(${1:AnyObject?}, action:${2:Selector}, forControlEvents:${3:UIControlEvents})" },{ "trigger": "UIColor.blueColor \t class UIColor -> UIColor
" , "contents": "UIColor.blueColor(${1:})" },{ "trigger": "UIMutableApplicationShortcutItem \t UIMutableApplicationShortcutItem", "contents": "UIMutableApplicationShortcutItem" },{ "trigger": "valuesForPasteboardType \t func UIPasteboard -> [AnyObject]?
" , "contents": "valuesForPasteboardType(${1:String}, inItemSet:${2:NSIndexSet?})" },{ "trigger": "UIPrintInteractionController.canPrintURL \t class UIPrintInteractionController -> BOOL
" , "contents": "UIPrintInteractionController.canPrintURL(${1:NSURL})" },{ "trigger": "initialLayoutAttributesForAppearingItemAtIndexPath \t func UICollectionViewLayout -> UICollectionViewLayoutAttributes?
" , "contents": "initialLayoutAttributesForAppearingItemAtIndexPath(${1:NSIndexPath})" },{ "trigger": "providesPresentationContextTransitionStyle \t BOOL", "contents": "providesPresentationContextTransitionStyle" },{ "trigger": "UIApplicationOpenURLOptionsAnnotationKey \t String", "contents": "UIApplicationOpenURLOptionsAnnotationKey" },{ "trigger": "searchBar \t func unknown -> BOOL
" , "contents": "searchBar(${1:UISearchBar}, shouldChangeTextInRange:${2:NSRange}, replacementText:${3:String})" },{ "trigger": "presentPreviewAnimated \t func UIDocumentInteractionController -> BOOL
" , "contents": "presentPreviewAnimated(${1:BOOL})" },{ "trigger": "UIFontDescriptor.supportsSecureCoding \t class UIFontDescriptor -> BOOL
" , "contents": "UIFontDescriptor.supportsSecureCoding(${1:})" },{ "trigger": "didReceiveMemoryWarning \t func UIViewController -> void" , "contents": "didReceiveMemoryWarning(${1:})" },{ "trigger": "overrideTraitCollection \t UITraitCollection", "contents": "overrideTraitCollection" },{ "trigger": "displayName \t String", "contents": "displayName" },{ "trigger": "scale \t CGFloat", "contents": "scale" },{ "trigger": "collisionMode \t UICollisionBehaviorMode", "contents": "collisionMode" },{ "trigger": "numberOfItemsInSection \t func UICollectionView -> Int
" , "contents": "numberOfItemsInSection(${1:Int})" },{ "trigger": "imagePickerController \t func unknown -> void" , "contents": "imagePickerController(${1:UIImagePickerController}, didFinishPickingImage:${2:UIImage}, editingInfo:${3:[String })" },{ "trigger": "locationInView \t func UIGestureRecognizer -> CGPoint
" , "contents": "locationInView(${1:UIView?})" },{ "trigger": "NSValue.valueWithCGPoint \t class NSValue -> NSValue
" , "contents": "NSValue.valueWithCGPoint(${1:CGPoint})" },{ "trigger": "indexPathForCell \t func UITableView -> NSIndexPath?
" , "contents": "indexPathForCell(${1:UITableViewCell})" },{ "trigger": "insertDictationResultPlaceholder \t func UITextView -> AnyObject
" , "contents": "insertDictationResultPlaceholder(${1:})" },{ "trigger": "UIGestureRecognizer \t UIGestureRecognizer", "contents": "UIGestureRecognizer" },{ "trigger": "UITableViewCellSelectionStyle \t UITableViewCellSelectionStyle", "contents": "UITableViewCellSelectionStyle" },{ "trigger": "estimatedRowHeight \t CGFloat", "contents": "estimatedRowHeight" },{ "trigger": "setNavigationBarHidden \t func UINavigationController -> void" , "contents": "setNavigationBarHidden(${1:BOOL}, animated:${2:BOOL})" },{ "trigger": "itemSetWithPasteboardTypes \t func UIPasteboard -> NSIndexSet?
" , "contents": "itemSetWithPasteboardTypes(${1:[AnyObject]})" },{ "trigger": "UIDeviceOrientationIsLandscape \t func UIDictationPhrase -> BOOL
" , "contents": "UIDeviceOrientationIsLandscape(${1:UIDeviceOrientation})" },{ "trigger": "progressImage \t UIImage", "contents": "progressImage" },{ "trigger": "backgroundVerticalPositionAdjustmentForBarMetrics \t func UIBarButtonItem -> CGFloat
" , "contents": "backgroundVerticalPositionAdjustmentForBarMetrics(${1:UIBarMetrics})" },{ "trigger": "registerClass \t func UITableView -> void" , "contents": "registerClass(${1:AnyClass?}, forHeaderFooterViewReuseIdentifier:${2:String})" },{ "trigger": "LandscapePhonePrompt \t UIBarMetrics", "contents": "LandscapePhonePrompt" },{ "trigger": "printerPickerControllerParentViewController \t func unknown -> UIViewController?
" , "contents": "printerPickerControllerParentViewController(${1:UIPrinterPickerController})" },{ "trigger": "dismissAnimated \t func UIPrinterPickerController -> void" , "contents": "dismissAnimated(${1:BOOL})" },{ "trigger": "UIApplicationShortcutIcon.iconWithTemplateImageName \t class UIApplicationShortcutIcon -> Self
" , "contents": "UIApplicationShortcutIcon.iconWithTemplateImageName(${1:String})" },{ "trigger": "tabBarController \t func unknown -> void" , "contents": "tabBarController(${1:UITabBarController}, didSelectViewController:${2:UIViewController})" },{ "trigger": "completeTransition \t func unknown -> void" , "contents": "completeTransition(${1:BOOL})" },{ "trigger": "TouchDragEnter \t UIControlEvents", "contents": "TouchDragEnter" },{ "trigger": "UIAccessibilitySpeakSelectionStatusDidChangeNotification \t String", "contents": "UIAccessibilitySpeakSelectionStatusDidChangeNotification" },{ "trigger": "UIColor.whiteColor \t class UIColor -> UIColor
" , "contents": "UIColor.whiteColor(${1:})" },{ "trigger": "UIImagePNGRepresentation \t func UIImagePickerController -> NSData?
" , "contents": "UIImagePNGRepresentation(${1:UIImage})" },{ "trigger": "UITableViewRowAnimation \t UITableViewRowAnimation", "contents": "UITableViewRowAnimation" },{ "trigger": "setViewControllers \t func UINavigationController -> void" , "contents": "setViewControllers(${1:[UIViewController]}, animated:${2:BOOL})" },{ "trigger": "scrollViewWillBeginDecelerating \t func unknown -> void" , "contents": "scrollViewWillBeginDecelerating(${1:UIScrollView})" },{ "trigger": "UIAccessibilityTraitHeader \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitHeader" },{ "trigger": "handleError \t func UIDocument -> void" , "contents": "handleError(${1:NSError}, userInteractionPermitted:${2:BOOL})" },{ "trigger": "characterRangeByExtendingPosition \t func unknown -> UITextRange?
" , "contents": "characterRangeByExtendingPosition(${1:UITextPosition}, inDirection:${2:UITextLayoutDirection})" },{ "trigger": "update \t func UIMenuController -> void" , "contents": "update(${1:})" },{ "trigger": "loadFromContents \t func UIDocument -> void" , "contents": "loadFromContents(${1:AnyObject}, ofType:${2:String?})" },{ "trigger": "tabBarItem \t UITabBarItem", "contents": "tabBarItem" },{ "trigger": "isIgnoringInteractionEvents \t func UIApplication -> BOOL
" , "contents": "isIgnoringInteractionEvents(${1:})" },{ "trigger": "heightTracksTextView \t BOOL", "contents": "heightTracksTextView" },{ "trigger": "searchDisplayControllerDidBeginSearch \t func unknown -> void" , "contents": "searchDisplayControllerDidBeginSearch(${1:UISearchDisplayController})" },{ "trigger": "UIPreviewActionGroup.actionGroupWithTitle \t class UIPreviewActionGroup -> Self
" , "contents": "UIPreviewActionGroup.actionGroupWithTitle(${1:String}, style:${2:UIPreviewActionStyle}, actions:${3:[UIPreviewAction]})" },{ "trigger": "ignoreSnapshotOnNextApplicationLaunch \t func UIApplication -> void" , "contents": "ignoreSnapshotOnNextApplicationLaunch(${1:})" },{ "trigger": "TouchUpInside \t UIControlEvents", "contents": "TouchUpInside" },{ "trigger": "tableView \t func unknown -> CGFloat
" , "contents": "tableView(${1:UITableView}, heightForFooterInSection:${2:Int})" },{ "trigger": "UIApplicationLaunchOptionsRemoteNotificationKey \t String", "contents": "UIApplicationLaunchOptionsRemoteNotificationKey" },{ "trigger": "applicationSignificantTimeChange \t func unknown -> void" , "contents": "applicationSignificantTimeChange(${1:UIApplication})" },{ "trigger": "unknown.viewControllerWithRestorationIdentifierPath \t static unknown -> UIViewController?
" , "contents": "unknown.viewControllerWithRestorationIdentifierPath(${1:[AnyObject]}, coder:${2:NSCoder})" },{ "trigger": "registerForRemoteNotificationTypes \t func UIApplication -> void" , "contents": "registerForRemoteNotificationTypes(${1:UIRemoteNotificationType})" },{ "trigger": "objectForKey \t func UIFontDescriptor -> AnyObject?
" , "contents": "objectForKey(${1:String})" },{ "trigger": "scrollEnabled \t BOOL", "contents": "scrollEnabled" },{ "trigger": "drawInRect \t func UIImage -> void" , "contents": "drawInRect(${1:CGRect}, blendMode:${2:CGBlendMode}, alpha:${3:CGFloat})" },{ "trigger": "secondItem \t AnyObject", "contents": "secondItem" },{ "trigger": "UILayoutConstraintAxis \t UILayoutConstraintAxis", "contents": "UILayoutConstraintAxis" },{ "trigger": "TouchUpOutside \t UIControlEvents", "contents": "TouchUpOutside" },{ "trigger": "pagingEnabled \t BOOL", "contents": "pagingEnabled" },{ "trigger": "UIDocumentInteractionController.interactionControllerWithURL \t class UIDocumentInteractionController -> UIDocumentInteractionController
" , "contents": "UIDocumentInteractionController.interactionControllerWithURL(${1:NSURL})" },{ "trigger": "UIDeviceProximityStateDidChangeNotification \t String", "contents": "UIDeviceProximityStateDidChangeNotification" },{ "trigger": "UIGuidedAccessRestrictionStateForIdentifier \t func UIImage -> UIGuidedAccessRestrictionState
" , "contents": "UIGuidedAccessRestrictionStateForIdentifier(${1:String})" },{ "trigger": "ensureGlyphsForCharacterRange \t func NSLayoutManager -> void" , "contents": "ensureGlyphsForCharacterRange(${1:NSRange})" },{ "trigger": "imageForBounds \t func NSTextAttachment -> UIImage?
" , "contents": "imageForBounds(${1:CGRect}, textContainer:${2:NSTextContainer?}, characterIndex:${3:Int})" },{ "trigger": "containsPasteboardTypes \t func UIPasteboard -> BOOL
" , "contents": "containsPasteboardTypes(${1:[String]}, inItemSet:${2:NSIndexSet?})" },{ "trigger": "scopeBarButtonBackgroundImageForState \t func UISearchBar -> UIImage?
" , "contents": "scopeBarButtonBackgroundImageForState(${1:UIControlState})" },{ "trigger": "maximumValueImageRectForBounds \t func UISlider -> CGRect
" , "contents": "maximumValueImageRectForBounds(${1:CGRect})" },{ "trigger": "textFieldDidEndEditing \t func unknown -> void" , "contents": "textFieldDidEndEditing(${1:UITextField})" },{ "trigger": "NSObject.accessibilityIncrement \t class NSObject -> void" , "contents": "NSObject.accessibilityIncrement(${1:})" },{ "trigger": "addItem \t func UIGravityBehavior -> void" , "contents": "addItem(${1:UIDynamicItem})" },{ "trigger": "prepareForAnimatedBoundsChange \t func UICollectionViewLayout -> void" , "contents": "prepareForAnimatedBoundsChange(${1:CGRect})" },{ "trigger": "right \t CGFloat", "contents": "right" },{ "trigger": "scrollViewDidEndZooming \t func unknown -> void" , "contents": "scrollViewDidEndZooming(${1:UIScrollView}, withView:${2:UIView?}, atScale:${3:CGFloat})" },{ "trigger": "NSObject.setShouldGroupAccessibilityChildren \t class NSObject -> void" , "contents": "NSObject.setShouldGroupAccessibilityChildren(${1:BOOL})" },{ "trigger": "documentPickerWasCancelled \t func unknown -> void" , "contents": "documentPickerWasCancelled(${1:UIDocumentPickerViewController})" },{ "trigger": "delegate \t UITabBarDelegate", "contents": "delegate" },{ "trigger": "numberOfSectionsInTableView \t func UITableViewController -> Int
" , "contents": "numberOfSectionsInTableView(${1:UITableView})" },{ "trigger": "viewForZoomingInScrollView \t func unknown -> UIView?
" , "contents": "viewForZoomingInScrollView(${1:UIScrollView})" },{ "trigger": "targetOffsetFromCenterForItem \t func UIPushBehavior -> UIOffset
" , "contents": "targetOffsetFromCenterForItem(${1:UIDynamicItem})" },{ "trigger": "destructive \t BOOL", "contents": "destructive" },{ "trigger": "scrollToRowAtIndexPath \t func UITableView -> void" , "contents": "scrollToRowAtIndexPath(${1:NSIndexPath}, atScrollPosition:${2:UITableViewScrollPosition}, animated:${3:BOOL})" },{ "trigger": "canOpenURL \t func UIApplication -> BOOL
" , "contents": "canOpenURL(${1:NSURL})" },{ "trigger": "presentedItemDidMoveToURL \t func UIDocument -> void" , "contents": "presentedItemDidMoveToURL(${1:NSURL})" },{ "trigger": "minimumPressDuration \t CFTimeInterval", "contents": "minimumPressDuration" },{ "trigger": "pageViewControllerSupportedInterfaceOrientations \t func unknown -> UIInterfaceOrientationMask
" , "contents": "pageViewControllerSupportedInterfaceOrientations(${1:UIPageViewController})" },{ "trigger": "Left \t UIPopoverArrowDirection", "contents": "Left" },{ "trigger": "NSAttachmentCharacter \t Int", "contents": "NSAttachmentCharacter" },{ "trigger": "scrollViewDidZoom \t func UIWebView -> void" , "contents": "scrollViewDidZoom(${1:UIScrollView})" },{ "trigger": "cancelAllLocalNotifications \t func UIApplication -> void" , "contents": "cancelAllLocalNotifications(${1:})" },{ "trigger": "wantsSoftwareDimming \t BOOL", "contents": "wantsSoftwareDimming" },{ "trigger": "presentModalViewController \t func UIViewController -> void" , "contents": "presentModalViewController(${1:UIViewController}, animated:${2:BOOL})" },{ "trigger": "buttonTitleAtIndex \t func UIAlertView -> String?
" , "contents": "buttonTitleAtIndex(${1:Int})" },{ "trigger": "animationControllerForPresentedController \t func UISearchController -> UIViewControllerAnimatedTransitioning?
" , "contents": "animationControllerForPresentedController(${1:UIViewController}, presentingController:${2:UIViewController}, sourceController:${3:UIViewController})" },{ "trigger": "UIEdgeInsetsInsetRect \t func UIEvent -> CGRect
" , "contents": "UIEdgeInsetsInsetRect(${1:CGRect}, _:${2:UIEdgeInsets})" },{ "trigger": "density \t CGFloat", "contents": "density" },{ "trigger": "UILocalNotificationDefaultSoundName \t String", "contents": "UILocalNotificationDefaultSoundName" },{ "trigger": "localizedModel \t String", "contents": "localizedModel" },{ "trigger": "CalculationModeCubic \t UIViewKeyframeAnimationOptions", "contents": "CalculationModeCubic" },{ "trigger": "setBackgroundImage \t func UIBarButtonItem -> void" , "contents": "setBackgroundImage(${1:UIImage?}, forState:${2:UIControlState}, barMetrics:${3:UIBarMetrics})" },{ "trigger": "textViewShouldEndEditing \t func unknown -> BOOL
" , "contents": "textViewShouldEndEditing(${1:UITextView})" },{ "trigger": "NSControlCharacterZeroAdvancementAction \t Int", "contents": "NSControlCharacterZeroAdvancementAction" },{ "trigger": "documentInteractionControllerDidDismissOpenInMenu \t func unknown -> void" , "contents": "documentInteractionControllerDidDismissOpenInMenu(${1:UIDocumentInteractionController})" },{ "trigger": "UIRemoteNotificationType \t UIRemoteNotificationType", "contents": "UIRemoteNotificationType" },{ "trigger": "currentImage \t UIImage", "contents": "currentImage" },{ "trigger": "UIKeyboardAnimationDurationUserInfoKey \t String", "contents": "UIKeyboardAnimationDurationUserInfoKey" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, canPerformAction:${2:Selector}, forRowAtIndexPath:${3:NSIndexPath}, withSender:${4:AnyObject?})" },{ "trigger": "reloadItemsAtIndexPaths \t func UICollectionView -> void" , "contents": "reloadItemsAtIndexPaths(${1:[NSIndexPath]})" },{ "trigger": "collectionView \t func unknown -> Int
" , "contents": "collectionView(${1:UICollectionView}, numberOfItemsInSection:${2:Int})" },{ "trigger": "prepareForPresentationInMode \t func UIDocumentPickerExtensionViewController -> void" , "contents": "prepareForPresentationInMode(${1:UIDocumentPickerMode})" },{ "trigger": "setItems \t func UITabBar -> void" , "contents": "setItems(${1:[UITabBarItem]?}, animated:${2:BOOL})" },{ "trigger": "UICollectionElementCategory \t UICollectionElementCategory", "contents": "UICollectionElementCategory" },{ "trigger": "duration \t CGFloat", "contents": "duration" },{ "trigger": "copyWithZone \t func UICollectionViewLayoutAttributes -> AnyObject
" , "contents": "copyWithZone(${1:NSZone})" },{ "trigger": "NSStringFromUIOffset \t func NSTextAlignment -> String
" , "contents": "NSStringFromUIOffset(${1:UIOffset})" },{ "trigger": "titleForSegmentAtIndex \t func UISegmentedControl -> String?
" , "contents": "titleForSegmentAtIndex(${1:Int})" },{ "trigger": "saveToURL \t func UIDocument -> Void?
" , "contents": "saveToURL(${1:NSURL}, forSaveOperation:${2:UIDocumentSaveOperation}, completionHandler:${3:BOOL -> Void?})" },{ "trigger": "style \t UITableViewStyle", "contents": "style" },{ "trigger": "UIBezierPath.bezierPathWithRoundedRect \t class UIBezierPath -> Self
" , "contents": "UIBezierPath.bezierPathWithRoundedRect(${1:CGRect}, byRoundingCorners:${2:UIRectCorner}, cornerRadii:${3:CGSize})" },{ "trigger": "supportsDuplex \t BOOL", "contents": "supportsDuplex" },{ "trigger": "UIColor.colorWithWhite \t class UIColor -> UIColor
" , "contents": "UIColor.colorWithWhite(${1:CGFloat}, alpha:${2:CGFloat})" },{ "trigger": "NSObject.setAccessibilityHint \t class NSObject -> void" , "contents": "NSObject.setAccessibilityHint(${1:String?})" },{ "trigger": "UIAccessibilityIsInvertColorsEnabled \t func UIAccessibilityNavigationStyle -> BOOL
" , "contents": "UIAccessibilityIsInvertColorsEnabled(${1:})" },{ "trigger": "fileWrapper \t NSFileWrapper", "contents": "fileWrapper" },{ "trigger": "accessibilityFrame \t CGRect", "contents": "accessibilityFrame" },{ "trigger": "UIInterfaceOrientation \t UIInterfaceOrientation", "contents": "UIInterfaceOrientation" },{ "trigger": "readFromURL \t func UIDocument -> void" , "contents": "readFromURL(${1:NSURL})" },{ "trigger": "clearButtonMode \t UITextFieldViewMode", "contents": "clearButtonMode" },{ "trigger": "UIScreenEdgePanGestureRecognizer \t UIScreenEdgePanGestureRecognizer", "contents": "UIScreenEdgePanGestureRecognizer" },{ "trigger": "UISystemAnimation \t UISystemAnimation", "contents": "UISystemAnimation" },{ "trigger": "sectionIndexTitlesForTableView \t func UIPickerView -> [String]?
" , "contents": "sectionIndexTitlesForTableView(${1:UITableView})" },{ "trigger": "layoutAttributesForSupplementaryViewOfKind \t func UIDynamicAnimator -> UICollectionViewLayoutAttributes?
" , "contents": "layoutAttributesForSupplementaryViewOfKind(${1:String}, atIndexPath:${2:NSIndexPath})" },{ "trigger": "UIAccessibilityElementFocusedNotification \t String", "contents": "UIAccessibilityElementFocusedNotification" },{ "trigger": "encodeWithCoder \t func NSTextTab -> void" , "contents": "encodeWithCoder(${1:NSCoder})" },{ "trigger": "backButtonBackgroundImageForState \t func UIBarButtonItem -> UIImage?
" , "contents": "backButtonBackgroundImageForState(${1:UIControlState}, barMetrics:${2:UIBarMetrics})" },{ "trigger": "accessibilityElementCount \t func NSObject -> Int
" , "contents": "accessibilityElementCount(${1:})" },{ "trigger": "rawValue \t Int", "contents": "rawValue" },{ "trigger": "EditingChanged \t UIControlEvents", "contents": "EditingChanged" },{ "trigger": "UIAccessibilityRegisterGestureConflictWithZoom \t func UIAccessibilityScrollDirection -> void" , "contents": "UIAccessibilityRegisterGestureConflictWithZoom(${1:})" },{ "trigger": "printInteractionControllerWillPresentPrinterOptions \t func unknown -> void" , "contents": "printInteractionControllerWillPresentPrinterOptions(${1:UIPrintInteractionController})" },{ "trigger": "unwindForSegue \t func UIViewController -> void" , "contents": "unwindForSegue(${1:UIStoryboardSegue}, towardsViewController:${2:UIViewController})" },{ "trigger": "UIAccessibilityTraitImage \t UIAccessibilityTraits", "contents": "UIAccessibilityTraitImage" },{ "trigger": "ValueChanged \t UIControlEvents", "contents": "ValueChanged" },{ "trigger": "backItem \t UINavigationItem", "contents": "backItem" },{ "trigger": "tableView \t func unknown -> BOOL
" , "contents": "tableView(${1:UITableView}, shouldIndentWhileEditingRowAtIndexPath:${2:NSIndexPath})" },{ "trigger": "viewForRow \t func UIPickerView -> UIView?
" , "contents": "viewForRow(${1:Int}, forComponent:${2:Int})" },{ "trigger": "constraintEqualToAnchor \t func NSLayoutAnchor -> NSLayoutConstraint!
" , "contents": "constraintEqualToAnchor(${1:NSLayoutAnchor!})" },{ "trigger": "layer \t CALayer", "contents": "layer" },{ "trigger": "UIViewAnimationCurve \t UIViewAnimationCurve", "contents": "UIViewAnimationCurve" },{ "trigger": "modalPresentationStyle \t UIModalPresentationStyle", "contents": "modalPresentationStyle" },{ "trigger": "NSDefaultAttributesDocumentAttribute \t String", "contents": "NSDefaultAttributesDocumentAttribute" },{ "trigger": "UIApplicationLaunchOptionsLocationKey \t String", "contents": "UIApplicationLaunchOptionsLocationKey" },{ "trigger": "drawGlyphsForGlyphRange \t func NSLayoutManager -> void" , "contents": "drawGlyphsForGlyphRange(${1:NSRange}, atPoint:${2:CGPoint})" },{ "trigger": "scrollViewWillBeginZooming \t func unknown -> void" , "contents": "scrollViewWillBeginZooming(${1:UIScrollView}, withView:${2:UIView?})" },{ "trigger": "delegate \t UISplitViewControllerDelegate", "contents": "delegate" },{ "trigger": "permittedArrowDirections \t UIPopoverArrowDirection", "contents": "permittedArrowDirections" },{ "trigger": "UIWindowLevelStatusBar \t UIWindowLevel", "contents": "UIWindowLevelStatusBar" },{ "trigger": "printingItem \t AnyObject", "contents": "printingItem" },{ "trigger": "attachmentBoundsForTextContainer \t func unknown -> CGRect
" , "contents": "attachmentBoundsForTextContainer(${1:NSTextContainer?}, proposedLineFragment:${2:CGRect}, glyphPosition:${3:CGPoint}, characterIndex:${4:Int})" },{ "trigger": "transitionDuration \t func unknown -> NSTimeInterval
" , "contents": "transitionDuration(${1:UIViewControllerContextTransitioning?})" },{ "trigger": "UIKeyboardWillChangeFrameNotification \t String", "contents": "UIKeyboardWillChangeFrameNotification" },{ "trigger": "InsetApplicationFrame \t UIScreenOverscanCompensation", "contents": "InsetApplicationFrame" },{ "trigger": "resignKeyWindow \t func UIWindow -> void" , "contents": "resignKeyWindow(${1:})" },{ "trigger": "popoverControllerShouldDismissPopover \t func unknown -> BOOL
" , "contents": "popoverControllerShouldDismissPopover(${1:UIPopoverController})" },{ "trigger": "delegate \t NSLayoutManagerDelegate", "contents": "delegate" },{ "trigger": "gestureRecognizer \t func UITableViewCell -> BOOL
" , "contents": "gestureRecognizer(${1:UIGestureRecognizer}, shouldReceivePress:${2:UIPress})" },{ "trigger": "Items \t UICollisionBehaviorMode", "contents": "Items" },{ "trigger": "traitCollectionDidChange \t func UIScreen -> void" , "contents": "traitCollectionDidChange(${1:UITraitCollection?})" },{ "trigger": "rightViewRectForBounds \t func UITextField -> CGRect
" , "contents": "rightViewRectForBounds(${1:CGRect})" },{ "trigger": "firstRectForRange \t func unknown -> CGRect
" , "contents": "firstRectForRange(${1:UITextRange})" },{ "trigger": "titleEdgeInsets \t UIEdgeInsets", "contents": "titleEdgeInsets" }]
 }
